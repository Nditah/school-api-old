{"version":3,"sources":["../../../../src/api/flutterwave/flutterwave-transaction/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","FlutterwaveTransaction","find","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","page","id","from","to","currency","status","data","console","log","queryOnlineTnx","fetchSettlement","requestHash","headers","flutterwaveHash","process","env","FLUTTERWAVE_HASH","body","flwId","flwCreatedAt","createdAt","cleanData","newRecord","save","createRecord","bvn","params","Object","keys","verifyBvn","txref","verifyOnlineTnx","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\r\nimport log4js from \"log4js\";\r\nimport aqp from \"api-query-params\";\r\nimport FlutterwaveTransaction, { schemaCreate, schemaUpdate } from \"./model\";\r\nimport { success, fail, notFound, isObjecId, cleanObject } from \"../../../lib\";\r\nimport { STATUS_MSG } from \"../../../constants\";\r\nimport { getBVn, getTransaction, getSettlement, verifyTransaction } from \"../../../services/flutterwave\";\r\n\r\n// Logging\r\nconst logger = log4js.getLogger(\"[flutterwave-transaction]\");\r\nlog4js.configure({\r\n    appenders: { file: { type: \"file\", filename: \"logs/flutterwave-transaction.log\" } },\r\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\r\n});\r\nexport async function fetchRecord(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await FlutterwaveTransaction.find(filter)\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\n\r\n// fetch online transaction records\r\n// eslint-disable-next-line complexity\r\nexport async function queryOnlineTnx(req, res) {\r\n    const page = req.query.page || 0; // 1\r\n    const limit = req.query.limit || 100;\r\n    const id = req.query.id || \"\";\r\n    const from = req.query.from || \"2019-01-01\";\r\n    const to = req.query.to || \"2019-12-31\";\r\n    const currency = req.query.currency || \"NGN\";\r\n    const status = req.query.status || \"successful\";\r\n    let result;\r\n    try {\r\n        if (id) {\r\n            result = await getTransaction({ id }, true);\r\n        } else {\r\n            result = await getTransaction({ from, to, currency, status }, false);\r\n        }\r\n        if (result.status === \"success\") {\r\n            return success(res, 201, result.data, result.message);\r\n        }\r\n        console.log(result);\r\n        return notFound(res, result.message);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error query Transactions from Flutterwave. ${err.message}`);\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line complexity\r\nexport async function fetchSettlement(req, res) {\r\n    const page = req.query.page || 0; // 1\r\n    const limit = req.query.limit || 100;\r\n    const status = req.query.status || \"completed\";\r\n    try {\r\n        const result = await getSettlement({ page, limit, status });\r\n        if (result.status === \"success\") {\r\n            return success(res, 201, result.data, result.message);\r\n        }\r\n        console.log(result);\r\n        return notFound(res, result.message);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error fetching Settlement. ${err.message}`);\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line complexity\r\nexport async function createRecord(req, res) {\r\n    // Verify Hash\r\n    const requestHash = req.headers[ \"verif-hash\" ];\r\n    if (!requestHash) {\r\n        logger.error({ message: \"Bad request! No hash found\" });\r\n        // return fail(res, 422, \"Error: Bad Request: hash not found\");\r\n    }\r\n\r\n    const flutterwaveHash = process.env.FLUTTERWAVE_HASH;\r\n    if (requestHash !== flutterwaveHash) {\r\n        logger.error(`Error invalid transaction signature. ${requestHash}`, []);\r\n        // return fail(res, 422, `Error invalid transaction signature. ${requestHash}`);\r\n    }\r\n\r\n    const data = req.body; // JSON.parse(req.body);\r\n    data.flwId = data.id;\r\n    delete data.id;\r\n    data.flwCreatedAt = data.createdAt;\r\n    delete data.createdAt;\r\n    const cleanData = cleanObject(data);\r\n\r\n    // const { error } = Joi.validate(cleanData, schemaCreate);\r\n    // if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n\r\n    // Give value to your customer but don't give any output\r\n    // Remember that this is a call from rave's servers and\r\n    // Your customer is not seeing the response here at all\r\n    // return success(res, 200, result, \"Transaction was successful!\");\r\n    // Update Invoice if it exist or create an invoice with status of \"success\"\r\n\r\n    const newRecord = new FlutterwaveTransaction(data);\r\n    try {\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n            // return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        // return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n    return success(res, 200, [], \"Transaction was successful!\");\r\n}\r\n\r\nexport async function verifyBvn(req, res) {\r\n    const { bvn } = req.params;\r\n    try {\r\n        const result = await getBVn(bvn);\r\n        if (result.status === \"success\") {\r\n            return success(res, 201, result.data, result.message);\r\n        }\r\n        console.log(Object.keys(result));\r\n        return notFound(res, result.message);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error fetching BVN. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function verifyOnlineTnx(req, res) {\r\n    const { txref } = req.params;\r\n    try {\r\n        const result = await verifyTransaction(txref);\r\n        if (result.status === \"success\") {\r\n            return success(res, 201, result.data, result.message);\r\n        }\r\n        console.log(result);\r\n        return notFound(res, result.message);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error fetching BVN. ${err.message}`);\r\n    }\r\n}\r\n"]}
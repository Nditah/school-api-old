{"version":3,"sources":["../../../../src/api/flutterwave/flutterwave-transaction/controller.js"],"names":["Joi","log4js","aqp","FlutterwaveTransaction","schemaCreate","schemaUpdate","success","fail","notFound","isObjecId","cleanObject","STATUS_MSG","getBVn","getTransaction","getSettlement","verifyTransaction","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecord","req","res","query","filter","skip","limit","sort","projection","result","find","select","exec","info","SUCCESS","DEFAULT","err","error","message","queryOnlineTnx","page","id","from","to","currency","status","data","console","log","fetchSettlement","createRecord","requestHash","headers","flutterwaveHash","process","env","FLUTTERWAVE_HASH","body","flwId","flwCreatedAt","createdAt","cleanData","newRecord","save","verifyBvn","bvn","params","Object","keys","verifyOnlineTnx","txref"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,sBAAP,IAAiCC,YAAjC,EAA+CC,YAA/C,QAAmE,SAAnE;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,WAA7C,QAAgE,cAAhE;AACA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,aAAjC,EAAgDC,iBAAhD,QAAyE,+BAAzE;;AAEA;AACA,MAAMC,SAASf,OAAOgB,SAAP,CAAiB,2BAAjB,CAAf;AACAhB,OAAOiB,SAAP,CAAiB;AACbC,eAAW,EAAEC,MAAM,EAAEC,MAAM,MAAR,EAAgBC,UAAU,kCAA1B,EAAR,EADE;AAEbC,gBAAY,EAAEC,SAAS,EAAEL,WAAW,CAAC,MAAD,CAAb,EAAuBM,OAAO,OAA9B,EAAX;AAFC,CAAjB;AAIA,OAAO,eAAeC,WAAf,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqC;AACxC,UAAM,EAAEC,KAAF,KAAYF,GAAlB;AACA,UAAM,EAAEG,MAAF,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAA6BC,UAA7B,KAA4ChC,IAAI2B,KAAJ,CAAlD;AACA,QAAI;AACA,cAAMM,SAAS,MAAMhC,uBAAuBiC,IAAvB,CAA4BN,MAA5B,EAChBC,IADgB,CACXA,IADW,EAEhBC,KAFgB,CAEVA,KAFU,EAGhBC,IAHgB,CAGXA,IAHW,EAIhBI,MAJgB,CAITH,UAJS,EAKhBI,IALgB,EAArB;AAMA,YAAI,CAACH,MAAL,EAAa;AACT,mBAAO3B,SAASoB,GAAT,EAAc,qCAAd,CAAP;AACH;AACDZ,eAAOuB,IAAP,CAAY5B,WAAW6B,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AACA,eAAOnC,QAAQsB,GAAR,EAAa,GAAb,EAAkBO,MAAlB,EAA0B,IAA1B,CAAP;AACH,KAZD,CAYE,OAAOO,GAAP,EAAY;AACV1B,eAAO2B,KAAP,CAAaD,GAAb;AACA,eAAOnC,KAAKqB,GAAL,EAAU,GAAV,EAAgB,4BAA2Bc,IAAIE,OAAQ,EAAvD,CAAP;AACH;AACJ;;AAGD;AACA;AACA,OAAO,eAAeC,cAAf,CAA8BlB,GAA9B,EAAmCC,GAAnC,EAAwC;AAC3C,UAAMkB,OAAOnB,IAAIE,KAAJ,CAAUiB,IAAV,IAAkB,CAA/B,CAD2C,CACT;AAClC,UAAMd,QAAQL,IAAIE,KAAJ,CAAUG,KAAV,IAAmB,GAAjC;AACA,UAAMe,KAAKpB,IAAIE,KAAJ,CAAUkB,EAAV,IAAgB,EAA3B;AACA,UAAMC,OAAOrB,IAAIE,KAAJ,CAAUmB,IAAV,IAAkB,YAA/B;AACA,UAAMC,KAAKtB,IAAIE,KAAJ,CAAUoB,EAAV,IAAgB,YAA3B;AACA,UAAMC,WAAWvB,IAAIE,KAAJ,CAAUqB,QAAV,IAAsB,KAAvC;AACA,UAAMC,SAASxB,IAAIE,KAAJ,CAAUsB,MAAV,IAAoB,YAAnC;AACA,QAAIhB,MAAJ;AACA,QAAI;AACA,YAAIY,EAAJ,EAAQ;AACJZ,qBAAS,MAAMtB,eAAe,EAAEkC,EAAF,EAAf,EAAuB,IAAvB,CAAf;AACH,SAFD,MAEO;AACHZ,qBAAS,MAAMtB,eAAe,EAAEmC,IAAF,EAAQC,EAAR,EAAYC,QAAZ,EAAsBC,MAAtB,EAAf,EAA+C,KAA/C,CAAf;AACH;AACD,YAAIhB,OAAOgB,MAAP,KAAkB,SAAtB,EAAiC;AAC7B,mBAAO7C,QAAQsB,GAAR,EAAa,GAAb,EAAkBO,OAAOiB,IAAzB,EAA+BjB,OAAOS,OAAtC,CAAP;AACH;AACDS,gBAAQC,GAAR,CAAYnB,MAAZ;AACA,eAAO3B,SAASoB,GAAT,EAAcO,OAAOS,OAArB,CAAP;AACH,KAXD,CAWE,OAAOF,GAAP,EAAY;AACV1B,eAAO2B,KAAP,CAAaD,GAAb;AACA,eAAOnC,KAAKqB,GAAL,EAAU,GAAV,EAAgB,8CAA6Cc,IAAIE,OAAQ,EAAzE,CAAP;AACH;AACJ;;AAED;AACA,OAAO,eAAeW,eAAf,CAA+B5B,GAA/B,EAAoCC,GAApC,EAAyC;AAC5C,UAAMkB,OAAOnB,IAAIE,KAAJ,CAAUiB,IAAV,IAAkB,CAA/B,CAD4C,CACV;AAClC,UAAMd,QAAQL,IAAIE,KAAJ,CAAUG,KAAV,IAAmB,GAAjC;AACA,UAAMmB,SAASxB,IAAIE,KAAJ,CAAUsB,MAAV,IAAoB,WAAnC;AACA,QAAI;AACA,cAAMhB,SAAS,MAAMrB,cAAc,EAAEgC,IAAF,EAAQd,KAAR,EAAemB,MAAf,EAAd,CAArB;AACA,YAAIhB,OAAOgB,MAAP,KAAkB,SAAtB,EAAiC;AAC7B,mBAAO7C,QAAQsB,GAAR,EAAa,GAAb,EAAkBO,OAAOiB,IAAzB,EAA+BjB,OAAOS,OAAtC,CAAP;AACH;AACDS,gBAAQC,GAAR,CAAYnB,MAAZ;AACA,eAAO3B,SAASoB,GAAT,EAAcO,OAAOS,OAArB,CAAP;AACH,KAPD,CAOE,OAAOF,GAAP,EAAY;AACV1B,eAAO2B,KAAP,CAAaD,GAAb;AACA,eAAOnC,KAAKqB,GAAL,EAAU,GAAV,EAAgB,8BAA6Bc,IAAIE,OAAQ,EAAzD,CAAP;AACH;AACJ;;AAED;AACA,OAAO,eAAeY,YAAf,CAA4B7B,GAA5B,EAAiCC,GAAjC,EAAsC;AACzC;AACA,UAAM6B,cAAc9B,IAAI+B,OAAJ,CAAa,YAAb,CAApB;AACA,QAAI,CAACD,WAAL,EAAkB;AACdzC,eAAO2B,KAAP,CAAa,EAAEC,SAAS,4BAAX,EAAb;AACA;AACH;;AAED,UAAMe,kBAAkBC,QAAQC,GAAR,CAAYC,gBAApC;AACA,QAAIL,gBAAgBE,eAApB,EAAqC;AACjC3C,eAAO2B,KAAP,CAAc,wCAAuCc,WAAY,EAAjE,EAAoE,EAApE;AACA;AACH;;AAED,UAAML,OAAOzB,IAAIoC,IAAjB,CAdyC,CAclB;AACvBX,SAAKY,KAAL,GAAaZ,KAAKL,EAAlB;AACA,WAAOK,KAAKL,EAAZ;AACAK,SAAKa,YAAL,GAAoBb,KAAKc,SAAzB;AACA,WAAOd,KAAKc,SAAZ;AACA,UAAMC,YAAYzD,YAAY0C,IAAZ,CAAlB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,UAAMgB,YAAY,IAAIjE,sBAAJ,CAA2BiD,IAA3B,CAAlB;AACA,QAAI;AACA,cAAMjB,SAAS,MAAMiC,UAAUC,IAAV,EAArB;AACA,YAAI,CAAClC,MAAL,EAAa;AACTnB,mBAAOuB,IAAP,CAAY5B,WAAW6B,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AACA;AACH;AACD,eAAOnC,QAAQsB,GAAR,EAAa,GAAb,EAAkBO,MAAlB,EAA0B,8BAA1B,CAAP;AACH,KAPD,CAOE,OAAOO,GAAP,EAAY;AACV1B,eAAO2B,KAAP,CAAaD,GAAb;AACA;AACH;AACD,WAAOpC,QAAQsB,GAAR,EAAa,GAAb,EAAkB,EAAlB,EAAsB,6BAAtB,CAAP;AACH;;AAED,OAAO,eAAe0C,SAAf,CAAyB3C,GAAzB,EAA8BC,GAA9B,EAAmC;AACtC,UAAM,EAAE2C,GAAF,KAAU5C,IAAI6C,MAApB;AACA,QAAI;AACA,cAAMrC,SAAS,MAAMvB,OAAO2D,GAAP,CAArB;AACA,YAAIpC,OAAOgB,MAAP,KAAkB,SAAtB,EAAiC;AAC7B,mBAAO7C,QAAQsB,GAAR,EAAa,GAAb,EAAkBO,OAAOiB,IAAzB,EAA+BjB,OAAOS,OAAtC,CAAP;AACH;AACDS,gBAAQC,GAAR,CAAYmB,OAAOC,IAAP,CAAYvC,MAAZ,CAAZ;AACA,eAAO3B,SAASoB,GAAT,EAAcO,OAAOS,OAArB,CAAP;AACH,KAPD,CAOE,OAAOF,GAAP,EAAY;AACV1B,eAAO2B,KAAP,CAAaD,GAAb;AACA,eAAOnC,KAAKqB,GAAL,EAAU,GAAV,EAAgB,uBAAsBc,IAAIE,OAAQ,EAAlD,CAAP;AACH;AACJ;;AAED,OAAO,eAAe+B,eAAf,CAA+BhD,GAA/B,EAAoCC,GAApC,EAAyC;AAC5C,UAAM,EAAEgD,KAAF,KAAYjD,IAAI6C,MAAtB;AACA,QAAI;AACA,cAAMrC,SAAS,MAAMpB,kBAAkB6D,KAAlB,CAArB;AACA,YAAIzC,OAAOgB,MAAP,KAAkB,SAAtB,EAAiC;AAC7B,mBAAO7C,QAAQsB,GAAR,EAAa,GAAb,EAAkBO,OAAOiB,IAAzB,EAA+BjB,OAAOS,OAAtC,CAAP;AACH;AACDS,gBAAQC,GAAR,CAAYnB,MAAZ;AACA,eAAO3B,SAASoB,GAAT,EAAcO,OAAOS,OAArB,CAAP;AACH,KAPD,CAOE,OAAOF,GAAP,EAAY;AACV1B,eAAO2B,KAAP,CAAaD,GAAb;AACA,eAAOnC,KAAKqB,GAAL,EAAU,GAAV,EAAgB,uBAAsBc,IAAIE,OAAQ,EAAlD,CAAP;AACH;AACJ","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport FlutterwaveTransaction, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId, cleanObject } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport { getBVn, getTransaction, getSettlement, verifyTransaction } from \"../../../services/flutterwave\";\n\n// Logging\nconst logger = log4js.getLogger(\"[flutterwave-transaction]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/flutterwave-transaction.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await FlutterwaveTransaction.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n\n// fetch online transaction records\n// eslint-disable-next-line complexity\nexport async function queryOnlineTnx(req, res) {\n    const page = req.query.page || 0; // 1\n    const limit = req.query.limit || 100;\n    const id = req.query.id || \"\";\n    const from = req.query.from || \"2019-01-01\";\n    const to = req.query.to || \"2019-12-31\";\n    const currency = req.query.currency || \"NGN\";\n    const status = req.query.status || \"successful\";\n    let result;\n    try {\n        if (id) {\n            result = await getTransaction({ id }, true);\n        } else {\n            result = await getTransaction({ from, to, currency, status }, false);\n        }\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(result);\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error query Transactions from Flutterwave. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function fetchSettlement(req, res) {\n    const page = req.query.page || 0; // 1\n    const limit = req.query.limit || 100;\n    const status = req.query.status || \"completed\";\n    try {\n        const result = await getSettlement({ page, limit, status });\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(result);\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error fetching Settlement. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    // Verify Hash\n    const requestHash = req.headers[ \"verif-hash\" ];\n    if (!requestHash) {\n        logger.error({ message: \"Bad request! No hash found\" });\n        // return fail(res, 422, \"Error: Bad Request: hash not found\");\n    }\n\n    const flutterwaveHash = process.env.FLUTTERWAVE_HASH;\n    if (requestHash !== flutterwaveHash) {\n        logger.error(`Error invalid transaction signature. ${requestHash}`, []);\n        // return fail(res, 422, `Error invalid transaction signature. ${requestHash}`);\n    }\n\n    const data = req.body; // JSON.parse(req.body);\n    data.flwId = data.id;\n    delete data.id;\n    data.flwCreatedAt = data.createdAt;\n    delete data.createdAt;\n    const cleanData = cleanObject(data);\n\n    // const { error } = Joi.validate(cleanData, schemaCreate);\n    // if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n\n    // Give value to your customer but don't give any output\n    // Remember that this is a call from rave's servers and\n    // Your customer is not seeing the response here at all\n    // return success(res, 200, result, \"Transaction was successful!\");\n    // Update Invoice if it exist or create an invoice with status of \"success\"\n\n    const newRecord = new FlutterwaveTransaction(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            // return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        // return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n    return success(res, 200, [], \"Transaction was successful!\");\n}\n\nexport async function verifyBvn(req, res) {\n    const { bvn } = req.params;\n    try {\n        const result = await getBVn(bvn);\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(Object.keys(result));\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error fetching BVN. ${err.message}`);\n    }\n}\n\nexport async function verifyOnlineTnx(req, res) {\n    const { txref } = req.params;\n    try {\n        const result = await verifyTransaction(txref);\n        if (result.status === \"success\") {\n            return success(res, 201, result.data, result.message);\n        }\n        console.log(result);\n        return notFound(res, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error fetching BVN. ${err.message}`);\n    }\n}\n"]}
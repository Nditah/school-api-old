{"version":3,"sources":["../../../../src/api/general/synchronization/routes.js"],"names":["express","checkAuth","isValidStaff","fetchRecord","createRecord","updateRecord","deleteRecord","router","Router","get","post","put","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mCAAxC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,EAAkDC,YAAlD,QAAsE,cAAtE;;AAEA,MAAMC,SAASP,QAAQQ,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;;AAiBAD,OAAOE,GAAP,CAAW,mBAAX,EAAgCN,WAAhC;;AAEA;;;;;;;;;;;;;;;;AAgBAI,OAAOG,IAAP,CAAY,mBAAZ,EAAiC,CAACT,SAAD,EAAYC,YAAZ,CAAjC,EAA4DE,YAA5D;;AAEA;;;;;;;;;;;;;;;;;AAiBAG,OAAOI,GAAP,CAAW,6BAAX,EAA0C,CAACV,SAAD,EAAYC,YAAZ,CAA1C,EAAqEG,YAArE;;AAEA;;;;;;;;;;AAUAE,OAAOK,MAAP,CAAc,6BAAd,EAA6C,CAACX,SAAD,EAAYC,YAAZ,CAA7C,EAAwEI,YAAxE;;AAEA,eAAeC,MAAf","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/synchronizations?id={recordId} Retrieve Synchronization records\n * @apiName RetrieveSynchronization filter, skip, limit, sort, projection\n * @apiGroup Synchronization\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/synchronizations?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of all Synchronizations and branches worldwide.\n * Routes are established as links between synchronizations. Certain synchronizations are Hubs.\n * Read more from https://www.npmjs.com/package/api-query-params\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/synchronizations\", fetchRecord);\n\n/**\n * @api {post} /api/synchronizations Create a Synchronization record\n * @apiName CreateSynchronization\n * @apiGroup Synchronization\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Synchronization name (required)\n * @apiParam {String} type Synchronization type \"PUSH|PULL\"\n * @apiParam {ObjectId} table Synchronization Table Collection\n * @apiParam {ObjectId} terminal Synchronization terminal doing the operation\n * @apiParam {Boolean} success Synchronization i.e operation is successful\n * @apiParam {String} remark Synchronization remark about operation status\n * @apiSuccess {Object} Synchronization Synchronization's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Synchronization not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/synchronizations\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/synchronizations/{recordId} Update a Synchronization record\n * @apiName UpdateSynchronization\n * @apiGroup Synchronization\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} name Synchronization name (required)\n * @apiParam {String} type Synchronization type \"PUSH|PULL\"\n * @apiParam {ObjectId} table Synchronization Table Collection\n * @apiParam {ObjectId} terminal Synchronization terminal doing the operation\n * @apiParam {Boolean} success Synchronization i.e operation is successful\n * @apiParam {String} remark Synchronization remark about operation status\n * @apiSuccess {Object} Synchronization Synchronization's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Synchronization not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/synchronizations/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/synchronizations/{recordId} Delete a Synchronization record\n * @apiName DeleteSynchronization\n * @apiGroup Synchronization\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Synchronization not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/synchronizations/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/synchronization/routes.js"],"names":["router","express","Router","get","fetchRecord","post","checkAuth","isValidStaff","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;;AAiBAF,OAAOG,GAAP,CAAW,mBAAX,EAAgCC,uBAAhC;;AAEA;;;;;;;;;;;;;;;;AAgBAJ,OAAOK,IAAP,CAAY,mBAAZ,EAAiC,CAACC,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DC,wBAA5D;;AAEA;;;;;;;;;;;;;;;;;AAiBAR,OAAOS,GAAP,CAAW,6BAAX,EAA0C,CAACH,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEG,wBAArE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,6BAAd,EAA6C,CAACL,wBAAD,EAAYC,2BAAZ,CAA7C,EAAwEK,wBAAxE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/synchronizations?id={recordId} Retrieve Synchronization records\r\n * @apiName RetrieveSynchronization filter, skip, limit, sort, projection\r\n * @apiGroup Synchronization\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/synchronizations?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records of all Synchronizations and branches worldwide.\r\n * Routes are established as links between synchronizations. Certain synchronizations are Hubs.\r\n * Read more from https://www.npmjs.com/package/api-query-params\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/synchronizations\", fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/synchronizations Create a Synchronization record\r\n * @apiName CreateSynchronization\r\n * @apiGroup Synchronization\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} name Synchronization name (required)\r\n * @apiParam {String} type Synchronization type \"PUSH|PULL\"\r\n * @apiParam {ObjectId} table Synchronization Table Collection\r\n * @apiParam {ObjectId} terminal Synchronization terminal doing the operation\r\n * @apiParam {Boolean} success Synchronization i.e operation is successful\r\n * @apiParam {String} remark Synchronization remark about operation status\r\n * @apiSuccess {Object} Synchronization Synchronization's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Synchronization not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/synchronizations\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/synchronizations/{recordId} Update a Synchronization record\r\n * @apiName UpdateSynchronization\r\n * @apiGroup Synchronization\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiParam {String} name Synchronization name (required)\r\n * @apiParam {String} type Synchronization type \"PUSH|PULL\"\r\n * @apiParam {ObjectId} table Synchronization Table Collection\r\n * @apiParam {ObjectId} terminal Synchronization terminal doing the operation\r\n * @apiParam {Boolean} success Synchronization i.e operation is successful\r\n * @apiParam {String} remark Synchronization remark about operation status\r\n * @apiSuccess {Object} Synchronization Synchronization's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Synchronization not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/synchronizations/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/synchronizations/{recordId} Delete a Synchronization record\r\n * @apiName DeleteSynchronization\r\n * @apiGroup Synchronization\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Synchronization not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.delete(\"/synchronizations/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
{"version":3,"sources":["../../../../src/api/general/synchronization/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","type","Joi","string","trim","valid","optional","table","terminal","success","boolean","remark","created_by","required","schemaUpdate","updated_by","schema","String","enum","ref","Boolean","default","options","DATABASE","OPTIONS","newSchema","set","plugin","mongoose_csv","Synchronization","model"],"mappings":";;;;;;;AAaA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AALR;AAfA;AACA;;;;;;;;;;;;;IAoBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,MAAD,EAAS,MAAT,CAA1B,EAA4CC,QAA5C,EADkB;AAExBC,WAAOL,cAAIC,MAAJ,GAAaG,QAAb,EAFiB;AAGxBE,cAAUN,cAAIC,MAAJ,GAAaG,QAAb,EAHc;AAIxBG,aAASP,cAAIQ,OAAJ,GAAcJ,QAAd,EAJe;AAKxBK,YAAQT,cAAIC,MAAJ,GAAaG,QAAb,EALgB;AAMxBM,gBAAYV,cAAIC,MAAJ,GAAaU,QAAb;AANY,CAArB;;AASA,IAAMC,sCAAe;AACxBb,UAAMC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,MAAD,EAAS,MAAT,CAA1B,EAA4CC,QAA5C,EADkB;AAExBC,WAAOL,cAAIC,MAAJ,GAAaG,QAAb,EAFiB;AAGxBE,cAAUN,cAAIC,MAAJ,GAAaG,QAAb,EAHc;AAIxBG,aAASP,cAAIQ,OAAJ,GAAcJ,QAAd,EAJe;AAKxBK,YAAQT,cAAIC,MAAJ,GAAaG,QAAb,EALgB;AAMxBS,gBAAYb,cAAIC,MAAJ,GAAaU,QAAb;AANY,CAArB;;AASA,IAAMG,0BAAS;AAClBf,UAAM,EAAEA,MAAMgB,MAAR,EAAgBC,MAAM,CAAC,MAAD,EAAS,MAAT,CAAtB,EAAwCL,UAAU,IAAlD,EADY;AAElBN,WAAO,EAAEN,MAAMH,QAAR,EAAkBqB,KAAK,OAAvB,EAFW;AAGlBX,cAAU,EAAEP,MAAMH,QAAR,EAAkBqB,KAAK,UAAvB,EAHQ;AAIlBV,aAAS,EAAER,MAAMmB,OAAR,EAAiBC,SAAS,KAA1B,EAJS,EAI0B;AAC5CV,YAAQ,EAAEV,MAAMgB,MAAR,EAAgBJ,UAAU,IAA1B,EALU;AAMlBD,gBAAY,EAAEX,MAAMH,QAAR,EAAkBqB,KAAK,OAAvB,EAAgCN,UAAU,IAA1C,EANM;AAOlBE,gBAAY,EAAEd,MAAMH,QAAR;AAPM,CAAf;;AAUP,IAAMwB,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWoB,MAAX,EAAmBM,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,iBAA5B;AACAD,UAAUE,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,kBAAkBhC,mBAASiC,KAAT,CAAe,iBAAf,EAAkCL,SAAlC,CAAxB;;kBAEeI,e","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {ObjectId} id Synchronization primaryKey\n * @property {String} type Synchronization type \"PUSH|PULL\"\n * @property {ObjectId} table Synchronization Table Collection\n * @property {ObjectId} terminal Synchronization terminal doing the operation\n * @property {Boolean} success Synchronization i.e operation is successful\n * @property {String} remark Synchronization remark about operation status\n * @property {ObjectId} created_by Synchronization record created by\n * @property {ObjectId} updated_by Synchronization record modified by\n * @description Synchronization holds record of all cities with synchronization_list\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    type: Joi.string().trim().valid([\"PUSH\", \"PULL\"]).optional(),\n    table: Joi.string().optional(),\n    terminal: Joi.string().optional(),\n    success: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    type: Joi.string().trim().valid([\"PUSH\", \"PULL\"]).optional(),\n    table: Joi.string().optional(),\n    terminal: Joi.string().optional(),\n    success: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    type: { type: String, enum: [\"PUSH\", \"PULL\"], required: true },\n    table: { type: ObjectId, ref: \"Table\" },\n    terminal: { type: ObjectId, ref: \"Terminal\" },\n    success: { type: Boolean, default: false }, // Is successfully synchronized\n    remark: { type: String, required: true },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"synchronization\");\nnewSchema.plugin(mongoose_csv);\n\nconst Synchronization = mongoose.model(\"synchronization\", newSchema);\n\nexport default Synchronization;\n"]}
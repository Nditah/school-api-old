{"version":3,"sources":["../../../../src/api/general/synchronization/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","type","Joi","string","trim","valid","optional","table","terminal","success","boolean","remark","created_by","required","schemaUpdate","updated_by","schema","String","enum","ref","Boolean","default","options","DATABASE","OPTIONS","newSchema","set","plugin","mongoose_csv","Synchronization","model"],"mappings":";;;;;;;AAaA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AALR;AAfA;AACA;;;;;;;;;;;;;IAoBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,MAAD,EAAS,MAAT,CAA1B,EAA4CC,QAA5C,EADkB;AAExBC,WAAOL,cAAIC,MAAJ,GAAaG,QAAb,EAFiB;AAGxBE,cAAUN,cAAIC,MAAJ,GAAaG,QAAb,EAHc;AAIxBG,aAASP,cAAIQ,OAAJ,GAAcJ,QAAd,EAJe;AAKxBK,YAAQT,cAAIC,MAAJ,GAAaG,QAAb,EALgB;AAMxBM,gBAAYV,cAAIC,MAAJ,GAAaU,QAAb;AANY,CAArB;;AASA,IAAMC,sCAAe;AACxBb,UAAMC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,MAAD,EAAS,MAAT,CAA1B,EAA4CC,QAA5C,EADkB;AAExBC,WAAOL,cAAIC,MAAJ,GAAaG,QAAb,EAFiB;AAGxBE,cAAUN,cAAIC,MAAJ,GAAaG,QAAb,EAHc;AAIxBG,aAASP,cAAIQ,OAAJ,GAAcJ,QAAd,EAJe;AAKxBK,YAAQT,cAAIC,MAAJ,GAAaG,QAAb,EALgB;AAMxBS,gBAAYb,cAAIC,MAAJ,GAAaU,QAAb;AANY,CAArB;;AASA,IAAMG,0BAAS;AAClBf,UAAM,EAAEA,MAAMgB,MAAR,EAAgBC,MAAM,CAAC,MAAD,EAAS,MAAT,CAAtB,EAAwCL,UAAU,IAAlD,EADY;AAElBN,WAAO,EAAEN,MAAMH,QAAR,EAAkBqB,KAAK,OAAvB,EAFW;AAGlBX,cAAU,EAAEP,MAAMH,QAAR,EAAkBqB,KAAK,UAAvB,EAHQ;AAIlBV,aAAS,EAAER,MAAMmB,OAAR,EAAiBC,SAAS,KAA1B,EAJS,EAI0B;AAC5CV,YAAQ,EAAEV,MAAMgB,MAAR,EAAgBJ,UAAU,IAA1B,EALU;AAMlBD,gBAAY,EAAEX,MAAMH,QAAR,EAAkBqB,KAAK,OAAvB,EAAgCN,UAAU,IAA1C,EANM;AAOlBE,gBAAY,EAAEd,MAAMH,QAAR;AAPM,CAAf;;AAUP,IAAMwB,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWoB,MAAX,EAAmBM,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,iBAA5B;AACAD,UAAUE,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,kBAAkBhC,mBAASiC,KAAT,CAAe,iBAAf,EAAkCL,SAAlC,CAAxB;;kBAEeI,e","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\r\n/**\r\n * @author 4Decoder\r\n * @property {ObjectId} id Synchronization primaryKey\r\n * @property {String} type Synchronization type \"PUSH|PULL\"\r\n * @property {ObjectId} table Synchronization Table Collection\r\n * @property {ObjectId} terminal Synchronization terminal doing the operation\r\n * @property {Boolean} success Synchronization i.e operation is successful\r\n * @property {String} remark Synchronization remark about operation status\r\n * @property {ObjectId} created_by Synchronization record created by\r\n * @property {ObjectId} updated_by Synchronization record modified by\r\n * @description Synchronization holds record of all cities with synchronization_list\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE } from \"../../../constants\";\r\nimport Staff from \"../staff/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaCreate = {\r\n    type: Joi.string().trim().valid([\"PUSH\", \"PULL\"]).optional(),\r\n    table: Joi.string().optional(),\r\n    terminal: Joi.string().optional(),\r\n    success: Joi.boolean().optional(),\r\n    remark: Joi.string().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    type: Joi.string().trim().valid([\"PUSH\", \"PULL\"]).optional(),\r\n    table: Joi.string().optional(),\r\n    terminal: Joi.string().optional(),\r\n    success: Joi.boolean().optional(),\r\n    remark: Joi.string().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    type: { type: String, enum: [\"PUSH\", \"PULL\"], required: true },\r\n    table: { type: ObjectId, ref: \"Table\" },\r\n    terminal: { type: ObjectId, ref: \"Terminal\" },\r\n    success: { type: Boolean, default: false }, // Is successfully synchronized\r\n    remark: { type: String, required: true },\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId },\r\n};\r\n\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.set(\"collection\", \"synchronization\");\r\nnewSchema.plugin(mongoose_csv);\r\n\r\nconst Synchronization = mongoose.model(\"synchronization\", newSchema);\r\n\r\nexport default Synchronization;\r\n"]}
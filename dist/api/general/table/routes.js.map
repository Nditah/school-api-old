{"version":3,"sources":["../../../../src/api/general/table/routes.js"],"names":["router","express","Router","get","fetchRecord","post","checkAuth","isValidStaff","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;;AAiBAF,OAAOG,GAAP,CAAW,SAAX,EAAsBC,uBAAtB;;AAEA;;;;;;;;;;;;;;;;;AAiBAJ,OAAOK,IAAP,CAAY,SAAZ,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,wBAAlD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAR,OAAOS,GAAP,CAAW,mBAAX,EAAgC,CAACH,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DG,wBAA3D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,mBAAd,EAAmC,CAACL,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DK,wBAA9D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/tables?id={recordId} Retrieve Table records\r\n * @apiName RetrieveTable filter, skip, limit, sort, projection\r\n * @apiGroup Table\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/tables?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records of all Tables and branches worldwide.\r\n * Routes are established as links between tables. Certain tables are Hubs.\r\n * Read more from https://www.npmjs.com/package/api-query-params\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/tables\", fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/tables Create a Table record\r\n * @apiName CreateTable\r\n * @apiGroup Table\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} label Table label or table title,\r\n * @apiParam {String} name Table name (required)\r\n * @apiParam {String} url Table url segment /api/{url} (required),\r\n * @apiParam {Boolean} pullable Table pullable i.e. collection can be downloaded\r\n * @apiParam {Boolean} pushable Table pushable i.e. collection can be uploaded\r\n * @apiParam {Boolean} changes Table changes if there are changes to be synchronized\r\n * @apiParam {String} description Table description about operation status or feedback\r\n * @apiSuccess {Object} Table Table's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Table not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/tables\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/tables/{recordId} Update a Table record\r\n * @apiName UpdateTable\r\n * @apiGroup Table\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiParam {String} label Table label or table title,\r\n * @apiParam {String} name Table name (required)\r\n * @apiParam {String} url Table url segment /api/{url} (required),\r\n * @apiParam {Boolean} pullable Table pullable i.e. collection can be downloaded\r\n * @apiParam {Boolean} pushable Table pushable i.e. collection can be uploaded\r\n * @apiParam {Boolean} changes Table changes if there are changes to be synchronized\r\n * @apiParam {String} description Table description about operation status or feedback\r\n * @apiSuccess {Object} Table Table's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Table not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/tables/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/tables/{recordId} Delete a Table record\r\n * @apiName DeleteTable\r\n * @apiGroup Table\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Table not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.delete(\"/tables/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
{"version":3,"sources":["../../../../src/api/general/documentation/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,iBAAX,EAA8B,CAACC,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDC,uBAAzD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAN,OAAOO,IAAP,CAAY,iBAAZ,EAA+B,CAACH,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DG,wBAA1D;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BAR,OAAOS,GAAP,CAAW,2BAAX,EAAwC,CAACL,wBAAD,EAAYC,2BAAZ,CAAxC,EAAmEK,wBAAnE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,2BAAd,EAA2C,CAACP,wBAAD,EAAYC,2BAAZ,CAA3C,EAAsEO,wBAAtE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/documentations?id={recordId} Retrieve one or all records\n * @apiName RetrieveDocumentation\n * @apiGroup Documentation\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/documentations?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/documentations\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/documentations Create documentations\n * @apiName CreateDocumentation\n * @apiGroup Documentation\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} document_type_id Documentation DocumentType ObjectId (required)\n * @apiParam {String} type Documentation type owner\n * \"ASSET|PARTNER|STAFF|VEHICLE|SALESORDER|PURCHASE\" (required)\n * @apiParam {ObjectId} asset_id Documentation asset ObjectId\n * @apiParam {ObjectId} staff_id Documentation staff ObjectId\n * @apiParam {ObjectId} partner_id Documentation partner ObjectId\n * @apiParam {ObjectId} customer_id Documentation customer ObjectId\n * @apiParam {ObjectId} vehicle_id Documentation vehicle ObjectId\n * @apiParam {ObjectId} sales_order_id Documentation sales_order ObjectId\n * @apiParam {ObjectId} purchase_order_id Documentation PurchaseOrder ObjectId\n * @apiParam {String} reference Documentation reference number\n * @apiParam {Date} last_renewal Documentation previous date renewal\n * @apiParam {Date} next_renewal Documentation upcoming renewal\n * @apiParam {ObjectId} renewal_by Documentation renewal_by Staff responsible for the task\n * @apiParam {Number} amount Documentation amount spent or fee|charge for renewal\n * @apiParam {String} description Documentation description\n * @apiParam {Boolean} is_renewed Documentation is_renewed\n * @apiParam {Boolean} is_validity Documentation is_validity\n * @apiSuccess {Object} Documentation Documentation's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Documentation not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/documentations\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/documentations/{recordId} Update documentations\n * @apiName UpdateDocumentation\n * @apiGroup Documentation\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {ObjectId} document_type_id Documentation DocumentType ObjectId (required)\n * @apiParam {String} type Documentation type owner\n * \"ASSET|PARTNER|STAFF|VEHICLE|SALESORDER|PURCHASE\" (required)\n * @apiParam {ObjectId} asset_id Documentation asset ObjectId\n * @apiParam {ObjectId} staff_id Documentation staff ObjectId\n * @apiParam {ObjectId} partner_id Documentation partner ObjectId\n * @apiParam {ObjectId} customer_id Documentation customer ObjectId\n * @apiParam {ObjectId} vehicle_id Documentation vehicle ObjectId\n * @apiParam {ObjectId} sales_order_id Documentation sales_order ObjectId\n * @apiParam {ObjectId} purchase_order_id Documentation PurchaseOrder ObjectId\n * @apiParam {String} reference Documentation reference number\n * @apiParam {Date} last_renewal Documentation previous date renewal\n * @apiParam {Date} next_renewal Documentation upcoming renewal\n * @apiParam {ObjectId} renewal_by Documentation renewal_by Staff responsible for the task\n * @apiParam {Number} amount Documentation amount spent or fee|charge for renewal\n * @apiParam {String} description Documentation description\n * @apiParam {Boolean} is_renewed Documentation is_renewed\n * @apiParam {Boolean} is_validity Documentation is_validity\n * @apiSuccess {Object} Documentation Documentation's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Documentation not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/documentations/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/documentations/{recordId} Delete documentations\n * @apiName DeleteDocumentation\n * @apiGroup Documentation\n * @apiPermission master\n * @apiParam {String} recordId ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Documentation not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/documentations/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
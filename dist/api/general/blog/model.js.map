{"version":3,"sources":["../../../../src/api/general/blog/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","table","Staff","BlogComment","Schema","ObjectId","Types","schemaCreate","title","string","required","body","tags","array","author_id","optional","slug","is_published","boolean","created_by","schemaUpdate","updated_by","schema","type","String","ref","Boolean","default","comment_ids","preload","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Blog","model","insertMany"],"mappings":"AAAA;;;;;;;;;;;;;AAaA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA;AACA,OAAOC,WAAP,MAAwB,uBAAxB;;AAEA,MAAM,EAAEC,MAAF,KAAaN,QAAnB;AACA,MAAM,EAAEO,QAAF,KAAeD,OAAOE,KAA5B;;AAEA,OAAO,MAAMC,eAAe;AACxBC,WAAOX,IAAIY,MAAJ,GAAaC,QAAb,EADiB;AAExBC,UAAMd,IAAIY,MAAJ,GAAaC,QAAb,EAFkB;AAGxBE,UAAMf,IAAIgB,KAAJ,GAAYH,QAAZ,EAHkB;AAIxBI,eAAWjB,IAAIY,MAAJ,GAAaM,QAAb,EAJa;AAKxBC,UAAMnB,IAAIY,MAAJ,GAAaC,QAAb,EALkB;AAMxBO,kBAAcpB,IAAIqB,OAAJ,GAAcH,QAAd,EANU;AAOxBI,gBAAYtB,IAAIY,MAAJ,GAAaC,QAAb;AAPY,CAArB;;AAUP,OAAO,MAAMU,eAAe;AACxBZ,WAAOX,IAAIY,MAAJ,GAAaM,QAAb,EADiB;AAExBJ,UAAMd,IAAIY,MAAJ,GAAaM,QAAb,EAFkB;AAGxBH,UAAMf,IAAIgB,KAAJ,GAAYE,QAAZ,EAHkB;AAIxBD,eAAWjB,IAAIY,MAAJ,GAAaM,QAAb,EAJa;AAKxBC,UAAMnB,IAAIY,MAAJ,GAAaM,QAAb,EALkB;AAMxBE,kBAAcpB,IAAIqB,OAAJ,GAAcH,QAAd,EANU;AAOxBM,gBAAYxB,IAAIY,MAAJ,GAAaC,QAAb;AAPY,CAArB;;AAUP,OAAO,MAAMY,SAAS;AAClBd,WAAO,EAAEe,MAAMC,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EADW;AAElBC,UAAM,EAAEY,MAAMC,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAFY;AAGlBE,UAAM,CAAC,EAAEW,MAAMC,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAAD,CAHY;AAIlBI,eAAW,EAAES,MAAMlB,QAAR,EAAkBoB,KAAK,OAAvB,EAJO;AAKlBT,UAAM,EAAEO,MAAMC,MAAR,EALY;AAMlBP,kBAAc,EAAEM,MAAMG,OAAR,EAAiBC,SAAS,KAA1B,EANI;AAOlBC,iBAAa,CAAC,EAAEL,MAAMlB,QAAR,EAAkBoB,KAAK,aAAvB,EAAD,CAPK;AAQlBN,gBAAY,EAAEI,MAAMlB,QAAR,EAAkBoB,KAAK,OAAvB,EAAgCf,UAAU,IAA1C,EARM;AASlBW,gBAAY,EAAEE,MAAMlB,QAAR,EAAkBoB,KAAK,OAAvB;AATM,CAAf;AAWP,MAAMI,UAAU7B,SAAS8B,kBAAT,CAA4BC,OAA5C;AACA,MAAMC,UAAUhC,SAASiC,OAAzB;;AAEA,MAAMC,YAAY,IAAI9B,MAAJ,CAAWkB,MAAX,EAAmBU,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,MAA5B;;AAEA,MAAMC,OAAOtC,SAASuC,KAAT,CAAe,MAAf,EAAuBH,SAAvB,CAAb;;AAEA,IAAIL,OAAJ,EAAa;AAAEO,SAAKE,UAAL,CAAgBrC,KAAhB;AAAyB;;AAExC,eAAemC,IAAf","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Blog primaryKey\n * @property {String} title Blog title\n * @property {String} body Blog body field will hold the body of the article as HTML\n * @property {Array} tags Blog tags field will store the post’s tags, eg: “great, article”\n * @property {ObjectId} author_id Blog tags field will store the post’s author\n * @property {String} slug Blog slug field will store the URL-friendly version\n * of the post’s title, eg: “a-great-article”\n * @property {Array} comment_ids Blog Array-of-Comments\n * @property {String} is_published Blog published status\n * @description Blog model holds record of all popublications\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\n// eslint-disable-next-line import/no-cycle\nimport BlogComment from \"../blog-comment/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    title: Joi.string().required(),\n    body: Joi.string().required(),\n    tags: Joi.array().required(),\n    author_id: Joi.string().optional(),\n    slug: Joi.string().required(),\n    is_published: Joi.boolean().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    title: Joi.string().optional(),\n    body: Joi.string().optional(),\n    tags: Joi.array().optional(),\n    author_id: Joi.string().optional(),\n    slug: Joi.string().optional(),\n    is_published: Joi.boolean().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    title: { type: String, required: [true, \"Why no input?\"] },\n    body: { type: String, required: [true, \"Why no input?\"] },\n    tags: [{ type: String, required: [true, \"Why no input?\"] }],\n    author_id: { type: ObjectId, ref: \"Staff\" },\n    slug: { type: String },\n    is_published: { type: Boolean, default: false },\n    comment_ids: [{ type: ObjectId, ref: \"BlogComment\" }],\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"blog\");\n\nconst Blog = mongoose.model(\"Blog\", newSchema);\n\nif (preload) { Blog.insertMany(table); }\n\nexport default Blog;\n"]}
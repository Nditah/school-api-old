{"version":3,"sources":["../../../../src/api/general/blog/model.js"],"names":["Schema","mongoose","ObjectId","Types","blogCreate","title","Joi","string","required","body","tags","array","author_id","optional","slug","is_published","boolean","created_by","blogUpdate","updated_by","blogSchema","type","String","ref","Boolean","default","comment_ids","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newBlogSchema","set","Blog","model","insertMany","table","blogCommentCreate","blog_id","related_comment_id","comment","blogCommentUpdate","blogCommentSchema","newBlogCommentSchema","BlogComment"],"mappings":"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","file":"model.js","sourcesContent":["import Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const blogCreate = {\n    title: Joi.string().required(),\n    body: Joi.string().required(),\n    tags: Joi.array().required(),\n    author_id: Joi.string().optional(),\n    slug: Joi.string().required(),\n    is_published: Joi.boolean().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const blogUpdate = {\n    title: Joi.string().optional(),\n    body: Joi.string().optional(),\n    tags: Joi.array().optional(),\n    author_id: Joi.string().optional(),\n    slug: Joi.string().optional(),\n    is_published: Joi.boolean().optional(),\n    updated_by: Joi.string().required(),\n};\n\n/**\n * @author 4Dcoder\n * @property {ObjectId} id Blog primaryKey\n * @property {String} title Blog title\n * @property {String} body Blog body field will hold the body of the article as HTML\n * @property {Array} tags Blog tags field will store the post’s tags, eg: “great, article”\n * @property {ObjectId} author_id Blog tags field will store the post’s author\n * @property {String} slug Blog slug field will store the URL-friendly version\n * of the post’s title, eg: “a-great-article”\n * @property {Array} comment_ids Blog Array-of-Comments\n * @property {String} is_published Blog published status\n * @description Blog model holds record of all popublications\n */\nexport const blogSchema = {\n    title: { type: String, required: [true, \"Why no input?\"] },\n    body: { type: String, required: [true, \"Why no input?\"] },\n    tags: [{ type: String, required: [true, \"Why no input?\"] }],\n    author_id: { type: ObjectId, ref: \"Staff\" },\n    slug: { type: String },\n    is_published: { type: Boolean, default: false },\n    comment_ids: [{ type: ObjectId, ref: \"BlogComment\" }],\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newBlogSchema = new Schema(blogSchema, options);\nnewBlogSchema.set(\"collection\", \"blog\");\nconst Blog = mongoose.model(\"Blog\", newBlogSchema);\nif (preload) { Blog.insertMany(table); }\n\nexport const blogCommentCreate = {\n    blog_id: Joi.string().optional(),\n    related_comment_id: Joi.string().optional(),\n    comment: Joi.string().required(),\n    is_published: Joi.boolean().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const blogCommentUpdate = {\n    blog_id: Joi.string().optional(),\n    related_comment_id: Joi.string().optional(),\n    comment: Joi.string().optional(),\n    is_published: Joi.boolean().optional(),\n    updated_by: Joi.string().required(),\n};\n\n/**\n * @author 4Dcoder\n * @property {ObjectId} id BlogComment primaryKey\n * @property {String} blog_id BlogComment blog ObjectId\n * @property {String} related_comment_id BlogComment replied to comment ObjectId\n * @property {String} comment BlogComment comment\n * @property {String} is_published BlogComment published status\n * @description BlogComment model holds record of all blog post comments and replies\n */\nexport const blogCommentSchema = {\n    blog_id: { type: ObjectId, ref: \"Blog\" },\n    related_comment_id: { type: ObjectId, ref: \"BlogComment\" },\n    comment: { type: String, required: [true, \"Why no input?\"] },\n    is_published: { type: Boolean, default: false },\n    created_by: { type: ObjectId, ref: \"Customer\", required: true },\n    updated_by: { type: ObjectId },\n};\n\nconst newBlogCommentSchema = new Schema(blogCommentSchema, options);\nnewBlogCommentSchema.set(\"collection\", \"blog_comment\");\nconst BlogComment = mongoose.model(\"BlogComment\", newBlogCommentSchema);\n\nexport { Blog, BlogComment };\n"]}
{"version":3,"sources":["../../../../src/api/general/blog/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","title","Joi","string","required","body","tags","array","author_id","optional","slug","is_published","boolean","created_by","schemaUpdate","updated_by","schema","type","String","ref","Boolean","default","comment_ids","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Blog","model","insertMany","table"],"mappings":";;;;;;;AAaA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AAHR;;AALA;AAfA;;;;;;;;;;;;;;IAwBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,WAAOC,cAAIC,MAAJ,GAAaC,QAAb,EADiB;AAExBC,UAAMH,cAAIC,MAAJ,GAAaC,QAAb,EAFkB;AAGxBE,UAAMJ,cAAIK,KAAJ,GAAYH,QAAZ,EAHkB;AAIxBI,eAAWN,cAAIC,MAAJ,GAAaM,QAAb,EAJa;AAKxBC,UAAMR,cAAIC,MAAJ,GAAaC,QAAb,EALkB;AAMxBO,kBAAcT,cAAIU,OAAJ,GAAcH,QAAd,EANU;AAOxBI,gBAAYX,cAAIC,MAAJ,GAAaC,QAAb;AAPY,CAArB;;AAUA,IAAMU,sCAAe;AACxBb,WAAOC,cAAIC,MAAJ,GAAaM,QAAb,EADiB;AAExBJ,UAAMH,cAAIC,MAAJ,GAAaM,QAAb,EAFkB;AAGxBH,UAAMJ,cAAIK,KAAJ,GAAYE,QAAZ,EAHkB;AAIxBD,eAAWN,cAAIC,MAAJ,GAAaM,QAAb,EAJa;AAKxBC,UAAMR,cAAIC,MAAJ,GAAaM,QAAb,EALkB;AAMxBE,kBAAcT,cAAIU,OAAJ,GAAcH,QAAd,EANU;AAOxBM,gBAAYb,cAAIC,MAAJ,GAAaC,QAAb;AAPY,CAArB;;AAUA,IAAMY,0BAAS;AAClBf,WAAO,EAAEgB,MAAMC,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EADW;AAElBC,UAAM,EAAEY,MAAMC,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAFY;AAGlBE,UAAM,CAAC,EAAEW,MAAMC,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAAD,CAHY;AAIlBI,eAAW,EAAES,MAAMnB,QAAR,EAAkBqB,KAAK,OAAvB,EAJO;AAKlBT,UAAM,EAAEO,MAAMC,MAAR,EALY;AAMlBP,kBAAc,EAAEM,MAAMG,OAAR,EAAiBC,SAAS,KAA1B,EANI;AAOlBC,iBAAa,CAAC,EAAEL,MAAMnB,QAAR,EAAkBqB,KAAK,aAAvB,EAAD,CAPK;AAQlBN,gBAAY,EAAEI,MAAMnB,QAAR,EAAkBqB,KAAK,OAAvB,EAAgCf,UAAU,IAA1C,EARM;AASlBW,gBAAY,EAAEE,MAAMnB,QAAR,EAAkBqB,KAAK,OAAvB;AATM,CAAf;AAWP,IAAMI,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAIjC,MAAJ,CAAWoB,MAAX,EAAmBW,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,MAA5B;;AAEA,IAAMC,OAAOlC,mBAASmC,KAAT,CAAe,MAAf,EAAuBH,SAAvB,CAAb;;AAEA,IAAIN,OAAJ,EAAa;AAAEQ,SAAKE,UAAL,CAAgBC,eAAhB;AAAyB;;kBAEzBH,I","file":"model.js","sourcesContent":["/**\r\n * @author 4Dcoder\r\n * @property {ObjectId} id Blog primaryKey\r\n * @property {String} title Blog title\r\n * @property {String} body Blog body field will hold the body of the article as HTML\r\n * @property {Array} tags Blog tags field will store the post’s tags, eg: “great, article”\r\n * @property {ObjectId} author_id Blog tags field will store the post’s author\r\n * @property {String} slug Blog slug field will store the URL-friendly version\r\n * of the post’s title, eg: “a-great-article”\r\n * @property {Array} comment_ids Blog Array-of-Comments\r\n * @property {String} is_published Blog published status\r\n * @description Blog model holds record of all popublications\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE } from \"../../../constants\";\r\nimport table from \"./table\";\r\nimport Staff from \"../staff/model\";\r\n// eslint-disable-next-line import/no-cycle\r\nimport BlogComment from \"../blog-comment/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaCreate = {\r\n    title: Joi.string().required(),\r\n    body: Joi.string().required(),\r\n    tags: Joi.array().required(),\r\n    author_id: Joi.string().optional(),\r\n    slug: Joi.string().required(),\r\n    is_published: Joi.boolean().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    title: Joi.string().optional(),\r\n    body: Joi.string().optional(),\r\n    tags: Joi.array().optional(),\r\n    author_id: Joi.string().optional(),\r\n    slug: Joi.string().optional(),\r\n    is_published: Joi.boolean().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    title: { type: String, required: [true, \"Why no input?\"] },\r\n    body: { type: String, required: [true, \"Why no input?\"] },\r\n    tags: [{ type: String, required: [true, \"Why no input?\"] }],\r\n    author_id: { type: ObjectId, ref: \"Staff\" },\r\n    slug: { type: String },\r\n    is_published: { type: Boolean, default: false },\r\n    comment_ids: [{ type: ObjectId, ref: \"BlogComment\" }],\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.set(\"collection\", \"blog\");\r\n\r\nconst Blog = mongoose.model(\"Blog\", newSchema);\r\n\r\nif (preload) { Blog.insertMany(table); }\r\n\r\nexport default Blog;\r\n"]}
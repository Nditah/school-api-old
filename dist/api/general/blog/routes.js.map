{"version":3,"sources":["../../../../src/api/general/blog/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchBlog","post","createBlog","put","updateBlog","delete","deleteBlog","fetchBlogComment","createBlogComment","updateBlogComment","deleteBlogComment"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,QAAX,EAAqB,CAACC,wBAAD,EAAYC,2BAAZ,CAArB,EAAgDC,qBAAhD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAN,OAAOO,IAAP,CAAY,QAAZ,EAAsB,CAACH,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDG,sBAAjD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAR,OAAOS,GAAP,CAAW,kBAAX,EAA+B,CAACL,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DK,sBAA1D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,kBAAd,EAAkC,CAACP,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DO,sBAA7D;;AAEA;;AAEA;;;;;;;;;;;;;;;AAeAZ,OAAOG,GAAP,CAAW,gBAAX,EAA6B,CAACC,wBAAD,EAAYC,2BAAZ,CAA7B,EAAwDQ,4BAAxD;;AAEA;;;;;;;;;;;;;AAaAb,OAAOO,IAAP,CAAY,gBAAZ,EAA8B,CAACH,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDS,6BAAzD;;AAEA;;;;;;;;;;;;;;;AAeAd,OAAOS,GAAP,CAAW,0BAAX,EAAuC,CAACL,wBAAD,EAAYC,2BAAZ,CAAvC,EAAkEU,6BAAlE;;AAEA;;;;;;;;;;AAUAf,OAAOW,MAAP,CAAc,0BAAd,EAA0C,CAACP,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEW,6BAArE;;kBAEehB,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchBlog, createBlog, updateBlog, deleteBlog,\n    fetchBlogComment, createBlogComment, updateBlogComment, deleteBlogComment,\n} from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/blogs?id={recordId} Retrieve one or all records\n * @apiName RetrieveBlog\n * @apiGroup Blog\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/blogs\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Blogs  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/blogs\", [checkAuth, isValidStaff], fetchBlog);\n\n/**\n * @api {post} /api/v1/blogs Create blogs\n * @apiName CreateBlog\n * @apiGroup Blog\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} title Blog title\n * @apiParam {String} body Blog body field will hold the body of the article as HTML\n * @apiParam {Array} tags Blog tags field will store the post’s tags, eg: “great, article”\n * @apiParam {ObjectId} author_id Blog tags field will store the post’s author\n * @apiParam {String} slug Blog slug field will store the URL-friendly version\n * of the post’s title, eg: “a-great-article”\n * @apiParam {String} is_published Blog published status\n * @apiParam {Array} comment_ids Blog Array-of-Comments (prohibited)\n * @apiSuccess {Object} Blog Blog's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Blog not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/blogs\", [checkAuth, isValidStaff], createBlog);\n\n/**\n * @api {put} /api/v1/blogs/{recordId} Update blogs\n * @apiName UpdateBlog\n * @apiGroup Blog\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId record ObjectId\n * @apiParam {String} title Blog title\n * @apiParam {String} body Blog body field will hold the body of the article as HTML\n * @apiParam {Array} tags Blog tags field will store the post’s tags, eg: “great, article”\n * @apiParam {ObjectId} author_id Blog tags field will store the post’s author\n * @apiParam {String} slug Blog slug field will store the URL-friendly version\n * of the post’s title, eg: “a-great-article”\n * @apiParam {String} is_published Blog published status\n * @apiParam {Array} comment_ids Blog Array-of-Comments (prohibited)\n * @apiSuccess {Object} Blog Blog's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Blog not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/blogs/:recordId\", [checkAuth, isValidStaff], updateBlog);\n\n/**\n * @api {delete} /api/v1/blogs/{recordId} Delete blogs\n * @apiName DeleteBlog\n * @apiGroup Blog\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Blog not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/blogs/:recordId\", [checkAuth, isValidStaff], deleteBlog);\n\n//* =============== BlogComment ==============\n\n/**\n * @api {get} /api/v1/blog-comments?id={recordId} Retrieve one or all records\n * @apiName RetrieveBlogComment\n * @apiGroup BlogComment\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/blog-comments?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription BlogComments  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/blog-comments\", [checkAuth, isValidStaff], fetchBlogComment);\n\n/**\n * @api {post} /api/v1/blog-comments Create blog-comments\n * @apiName CreateBlogComment\n * @apiGroup BlogComment\n * @apiParam {String} blog_id BlogComment blog ObjectId\n * @apiParam {String} related_comment_id BlogComment replied to comment ObjectId\n * @apiParam {String} comment BlogComment comment\n * @apiParam {String} is_published BlogComment published status\n * @apiSuccess {Object} BlogComment BlogComment's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 BlogComment not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/blog-comments\", [checkAuth, isValidStaff], createBlogComment);\n\n/**\n * @api {put} /api/v1/blog-comments/{recordId} Update blog-comments\n * @apiName UpdateBlogComment\n * @apiGroup BlogComment\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} blog_id BlogComment blog ObjectId\n * @apiParam {String} related_comment_id BlogComment replied to comment ObjectId\n * @apiParam {String} comment BlogComment comment\n * @apiParam {String} is_published BlogComment published status\n * @apiSuccess {Object} BlogComment BlogComment's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 BlogComment not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/blog-comments/:recordId\", [checkAuth, isValidStaff], updateBlogComment);\n\n/**\n * @api {delete} /api/v1/blog-comments/{recordId} Delete blog-comments\n * @apiName DeleteBlogComment\n * @apiGroup BlogComment\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 BlogComment not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/blog-comments/:recordId\", [checkAuth, isValidStaff], deleteBlogComment);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/blog/routes.js"],"names":["express","checkAuth","isValidStaff","fetchRecord","createRecord","updateRecord","deleteRecord","router","Router","get","post","put","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mCAAxC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,EAAkDC,YAAlD,QAAsE,cAAtE;;AAEA,MAAMC,SAASP,QAAQQ,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAD,OAAOE,GAAP,CAAW,QAAX,EAAqB,CAACR,SAAD,EAAYC,YAAZ,CAArB,EAAgDC,WAAhD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAI,OAAOG,IAAP,CAAY,QAAZ,EAAsB,CAACT,SAAD,EAAYC,YAAZ,CAAtB,EAAiDE,YAAjD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAG,OAAOI,GAAP,CAAW,kBAAX,EAA+B,CAACV,SAAD,EAAYC,YAAZ,CAA/B,EAA0DG,YAA1D;;AAEA;;;;;;;;;;AAUAE,OAAOK,MAAP,CAAc,kBAAd,EAAkC,CAACX,SAAD,EAAYC,YAAZ,CAAlC,EAA6DI,YAA7D;;AAEA,eAAeC,MAAf","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/blogs?id={recordId} Retrieve one or all records\n * @apiName RetrieveBlog\n * @apiGroup Blog\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/blogs\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/blogs\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/blogs Create blogs\n * @apiName CreateBlog\n * @apiGroup Blog\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} title Blog title\n * @apiParam {String} body Blog body field will hold the body of the article as HTML\n * @apiParam {Array} tags Blog tags field will store the post’s tags, eg: “great, article”\n * @apiParam {ObjectId} author_id Blog tags field will store the post’s author\n * @apiParam {String} slug Blog slug field will store the URL-friendly version\n * of the post’s title, eg: “a-great-article”\n * @apiParam {String} is_published Blog published status\n * @apiParam {Array} comment_ids Blog Array-of-Comments (prohibited)\n * @apiSuccess {Object} Blog Blog's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Blog not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/blogs\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/blogs/{recordId} Update blogs\n * @apiName UpdateBlog\n * @apiGroup Blog\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId record ObjectId\n * @apiParam {String} title Blog title\n * @apiParam {String} body Blog body field will hold the body of the article as HTML\n * @apiParam {Array} tags Blog tags field will store the post’s tags, eg: “great, article”\n * @apiParam {ObjectId} author_id Blog tags field will store the post’s author\n * @apiParam {String} slug Blog slug field will store the URL-friendly version\n * of the post’s title, eg: “a-great-article”\n * @apiParam {String} is_published Blog published status\n * @apiParam {Array} comment_ids Blog Array-of-Comments (prohibited)\n * @apiSuccess {Object} Blog Blog's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Blog not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/blogs/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/blogs/{recordId} Delete blogs\n * @apiName DeleteBlog\n * @apiGroup Blog\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Blog not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/blogs/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
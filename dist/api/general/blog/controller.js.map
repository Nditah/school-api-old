{"version":3,"sources":["../../../../src/api/general/blog/controller.js"],"names":["Joi","log4js","aqp","Blog","schemaCreate","schemaUpdate","success","fail","notFound","isObjecId","STATUS_MSG","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecord","req","res","query","filter","skip","limit","sort","projection","searchString","q","$text","$search","result","find","populate","select","exec","info","SUCCESS","DEFAULT","err","error","message","createRecord","data","body","validate","newRecord","save","updateRecord","recordId","id","params","findOneAndUpdate","_id","new","deleteRecord","findOneAndRemove"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Blog, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[blog]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/blog.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Blog.find(filter)\n            .populate(\"author_id\", \"id surname other_name email phone\")\n            .populate(\"comment_ids\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Blog(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Blog.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Blog.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
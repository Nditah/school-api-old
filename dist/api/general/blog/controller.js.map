{"version":3,"sources":["../../../../src/api/general/blog/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","searchString","q","$text","$search","Blog","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchBlog","data","body","Joi","validate","blogCreate","newBlog","save","createBlog","id","params","recordId","blogUpdate","findOneAndUpdate","_id","new","updateBlog","findOneAndRemove","deleteBlog","BlogComment","fetchBlogComment","blogCommentCreate","newBlogComment","ERROR","update","blob_id","$push","comment_ids","result2","createBlogComment","blogCommentUpdate","updateBlogComment","$pull","deleteBlogComment","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport {\n    Blog, blogCreate, blogUpdate,\n    BlogComment, blogCommentCreate, blogCommentUpdate,\n} from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[blog]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/blog.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchBlog(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Blog.find(filter)\n            .populate(\"author_id\", \"id surname given_name email phone\")\n            .populate(\"comment_ids\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createBlog(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, blogCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newBlog = new Blog(data);\n    try {\n        const result = await newBlog.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Blog created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateBlog(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, blogUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Blog.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Blog updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteBlog(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Blog.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Blog deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\n//* ========== BLOG-COMMENT ===============\n\nexport async function fetchBlogComment(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await BlogComment.find(filter)\n            .populate(\"blog_id\")\n            .populate(\"related_comment_id\")\n            .populate(\"created_by\", \"id surname given_name email phone\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createBlogComment(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, blogCommentCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const newBlogComment = new BlogComment(data);\n        const result = await newBlogComment.save();\n        if (!result) {\n            logger.error(STATUS_MSG.ERROR.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        const result2 = await Blog.update({ _id: result.blob_id },\n            { $push: { comment_ids: result._id } }).exec();\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result2, \"BlogComment created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateBlogComment(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, blogCommentUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await BlogComment.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"BlogComment updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteBlogComment(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await BlogComment.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result2 = await Blog.update({ _id: result.blob_id },\n            { $pull: { comment_ids: result._id } }).exec();\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 200, result2, \"BlogComment deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
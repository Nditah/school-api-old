{"version":3,"sources":["../../../../src/api/general/blog/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","searchString","q","$text","$search","Blog","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","newRecord","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Blog, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[blog]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/blog.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Blog.find(filter)\n            .populate(\"author_id\", \"id surname given_name email phone\")\n            .populate(\"comment_ids\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Blog(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Blog.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Blog.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
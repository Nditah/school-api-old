{"version":3,"sources":["../../../../src/api/general/result/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","type","Joi","string","trim","valid","required","term","cumulated","array","optional","student","marksheets","evaluation","number","total","rank","created_by","schemaUpdate","updated_by","schema","String","enum","ref","Number","options","DATABASE","OPTIONS","newSchema","set","Result","model"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Report primaryKey\n * @property {String} type Report type \"EVALUATION|TERMLY|ANNUAL\" required\n * @property {String} term Report type \"FIRST|SECOND|THRID|ANNUAL\" required\n * @property {Array} cumulated Report cumulated Result Array\n * @property {ObjectId} student Report student ObjectId\n * @property {Array} marksheets Report marksheets Array<Marksheet>\n * @property {Number} evaluation Report evaluation [1, 2, 3, 4]\n * @property {Number} total Report total\n * @property {Number} rank Report rank for that report\n * @description Result ( a type of report) holds generated academic report being computed\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\nimport Marksheet from \"../marksheet/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    type: Joi.string().trim().valid([\"EVALUATION\", \"TERMLY\", \"ANNUAL\"]).required(),\n    term: Joi.string().trim().valid([\"FIRST\", \"SECOND\", \"THRID\", \"ANNUAL\"]).required(),\n    cumulated: Joi.array().optional(),\n    student: Joi.string().optional(),\n    marksheets: Joi.array().optional(),\n    evaluation: Joi.number().valid([1, 2, 3, 4]).required(),\n    total: Joi.number().optional(),\n    rank: Joi.number().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    type: Joi.string().trim().valid([\"EVALUATION\", \"TERMLY\", \"ANNUAL\"]).required(),\n    term: Joi.string().trim().valid([\"FIRST\", \"SECOND\", \"THRID\", \"ANNUAL\"]).required(),\n    cumulated: Joi.array().optional(),\n    student: Joi.string().optional(),\n    marksheets: Joi.array().optional(),\n    evaluation: Joi.number().valid([1, 2, 3, 4]).required(),\n    total: Joi.number().optional(),\n    rank: Joi.number().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    type: { type: String, enum: [\"EVALUATION\", \"TERMLY\", \"ANNUAL\"], required: true },\n    term: { type: String, enum: [\"FIRST\", \"SECOND\", \"THRID\", \"ANNUAL\"], required: true },\n    cumulated: [{ type: ObjectId, ref: \"Result\" }], // for annual\n    student: { type: ObjectId, ref: \"Student\", required: true },\n    marksheets: [{ type: ObjectId, ref: \"Marksheet\" }],\n    evaluation: { type: Number, enum: [1, 2, 3, 4], required: true },\n    total: { type: Number },\n    rank: { type: Number },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"result\");\n\nconst Result = mongoose.model(\"Result\", newSchema);\n\nexport default Result;\n"]}
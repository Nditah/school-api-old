{"version":3,"sources":["../../../../src/api/general/paystack/model.js"],"names":["Schema","mongoose","schemaCreate","branchid","Joi","number","required","amount","string","channel","trandate","date","trancode","destaccountno","balance","originbank","narration","optional","currency","trantype","trim","valid","valuedate","business_id","transaction_ref","branchname","schema","type","Number","String","Date","default","enum","options","DATABASE","OPTIONS","newSchema","set","PaystackTransaction","model"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} branchid UnionBank Branch code the transaction originated from\n * @property {String} channel UnionBank channel Transaction Channel\n * @property {Date} trandate UnionBank trandate Date transaction was initiated\n * @property {String} trancode UnionBank trancode Transaction code\n * @property {String} amount UnionBank amount Transaction amount\n * @property {String} currency UnionBank currency Currency In which transaction occurred\n * @property {String} destaccountno UnionBank destaccountno Integrating partner’s account\n * number transaction occurred on\n * @property {Number} balance UnionBank balance Available balance on the account\n * transaction occurred on\n * @property {String} originbank UnionBank originbank Integrating partner’s bank\n * @property {String} narration UnionBank narration Description of the transaction\n * @property {String} trantype UnionBank trantype Transaction type: Debit or Credit\n * @property {Date} valuedate UnionBank valuedate Date the value of the transaction hit the account\n * @property {Number} business_id UnionBank business_id Profile ID for integrating partner\n * @property {String} transaction_ref UnionBank transaction_ref Unique transaction reference number\n * @property {String} branchname UnionBank branchname Branch name the transaction originated from\n * @description PaystackTransaction model holds record of all transactions via Paystack\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\n\nconst { Schema } = mongoose;\n\nexport const schemaCreate = {\n    branchid: Joi.number().required(),\n    amount: Joi.string().required(),\n    channel: Joi.string().required(),\n    trandate: Joi.date().required(),\n    trancode: Joi.string().required(),\n    destaccountno: Joi.string().required(),\n    balance: Joi.number().required(),\n    originbank: Joi.string().required(),\n    narration: Joi.string().optional(),\n    currency: Joi.string().required(),\n    trantype: Joi.string().trim().valid([\"CREDIT\", \"DEBIT\"]).required(),\n    valuedate: Joi.date().required(),\n    business_id: Joi.number().required(),\n    transaction_ref: Joi.string().required(),\n    branchname: Joi.string().required(),\n};\n\nexport const schema = {\n    branchid: { type: Number, required: [true, \"Why no branchid?\"] },\n    amount: { type: String, required: [true, \"Why no amount?\"] },\n    channel: { type: String, required: [true, \"Why no channel?\"] },\n    trandate: { type: Date, required: [true, \"Why no trandate?\"] },\n    trancode: { type: String, required: [true, \"Why no trancode?\"] },\n    destaccountno: { type: String, required: [true, \"Why no dest account no?\"] },\n    balance: { type: Number, required: [true, \"Why no balance?\"] },\n    originbank: { type: String, required: [true, \"Why no origin bank?\"] },\n    narration: { type: String },\n    currency: { type: String, required: [true, \"Why no currency?\"], default: \"NGN\" },\n    trantype: { type: String, enum: [\"CREDIT\", \"DEBIT\"], required: [true, \"Why no trantype?\"] },\n    valuedate: { type: Date, required: [true, \"Why no value date?\"] },\n    business_id: { type: Number, required: [true, \"Why no business id?\"] },\n    transaction_ref: { type: String, required: [true, \"Why no transaction ref?\"] },\n    branchname: { type: String, required: [true, \"Why no branch name?\"] },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"paystack_transaction\");\n\nconst PaystackTransaction = mongoose.model(\"PaystackTransaction\", newSchema);\n\nexport default PaystackTransaction;\n"]}
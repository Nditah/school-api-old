{"version":3,"sources":["../../../../src/api/general/paystack/controller.js"],"names":["rp","success","fail","transUrl","headersObj","Accept","json","publicKey","process","env","PAYSTACK_TEST_PUBLIC_KEY","secretKey","PAYSTACK_TEST_SECRET_KEY","checkAuthorization","req","res","payload","body","options","method","uri","headers","auth","bearer","then","status","data","message","catch","error","getTransaction","id","params","timelineTransaction","listTransaction","perPage","page","customer","from","to","amount","console","log","verifyTransaction","reference","verifyPaystack","totalTransaction"],"mappings":"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","file":"controller.js","sourcesContent":["import rp from \"request-promise\";\nimport { success, fail } from \"../../../lib\";\n\nconst transUrl = \"https://api.paystack.co/transaction\"; // list\n// const verifyUrl = \"/verify/reference\";\n// Fetch https://api.paystack.co/transaction/id\n// Transaction Totals https://api.paystack.co/transaction/totals\n// Export Transactions: https://api.paystack.co/transaction/export\n// Check Authorization: https://api.paystack.co/transaction/check_authorization\n\nconst headersObj = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    json: true,\n};\n\nconst publicKey = process.env.PAYSTACK_TEST_PUBLIC_KEY;\nconst secretKey = process.env.PAYSTACK_TEST_SECRET_KEY;\n/*\nif (process.env.NODE_ENV === \"production\") {\n    publicKey = process.env.PAYSTACK_LIVE_PUBLIC_KEY;\n    secretKey = process.env.PAYSTACK_LIVE_SECRET_KEY;\n// tnxHash = process.env.FLUTTERWAVE_HASH;\n}\n*/\n\nexport async function checkAuthorization(req, res) {\n    const payload = req.body;\n    const options = {\n        method: \"POST\",\n        uri: `${transUrl}/check_authorization`,\n        body: payload,\n        headers: headersObj,\n        auth: { bearer: secretKey },\n        json: true, // Automatically stringifies the body to JSON\n    };\n    return rp(options).then((body) => {\n        if (body.status) return success(res, 200, body.data, body.message);\n        return fail(res, 200, body.message);\n    }).catch((error) => {\n        fail(res, 500, `Error checking Auth. ${error.message}`);\n    });\n}\n\nexport async function getTransaction(req, res) {\n    const { id } = req.params;\n    const options = {\n        method: \"GET\",\n        uri: `${transUrl}/${id}`,\n        headers: headersObj,\n        auth: { bearer: secretKey },\n        json: true,\n    };\n    return rp(options).then((body) => {\n        if (body.status) return success(res, 200, body.data, body.message);\n        return fail(res, 200, body.message);\n    }).catch((error) => {\n        fail(res, 500, `Error getting Tnx. ${error.message}`);\n    });\n}\n\nexport async function timelineTransaction(req, res) {\n    const { id } = req.params;\n    const options = {\n        method: \"GET\",\n        uri: `${transUrl}/timeline/${id}`,\n        auth: { bearer: secretKey },\n        headers: headersObj,\n        json: true, // Automatically stringifies the body to JSON\n    };\n    return rp(options).then((body) => {\n        if (body.status) return success(res, 200, body.data, body.message);\n        return fail(res, 200, body.message);\n    }).catch((error) => {\n        fail(res, 500, `Error getting timeline. ${error.message}`);\n    });\n}\n\n// eslint-disable-next-line complexity\nexport async function listTransaction(req, res) {\n    const { perPage, page, customer, status, from, to, amount } = req.body;\n    const payload = {};\n    if (perPage) payload.perPage = perPage;\n    if (page) payload.page = page;\n    if (customer) payload.customer = customer;\n    if (status) payload.status = status;\n    if (from) payload.from = from;\n    if (to) payload.to = to;\n    if (amount) payload.amount = amount;\n\n    console.log(\"query options\", payload);\n    const options = {\n        method: \"GET\",\n        uri: `${transUrl}`,\n        body: payload,\n        headers: headersObj,\n        auth: { bearer: secretKey },\n        json: true, // Automatically stringifies the body to JSON\n    };\n    return rp(options).then((body) => {\n        if (body.status) return success(res, 200, body.data, body.message);\n        return fail(res, 200, body.message);\n    }).catch((error) => {\n        fail(res, 500, `Error listing Tnx. ${error.message}`);\n    });\n}\n\nexport async function verifyTransaction(req, res) {\n    const { reference } = req.params;\n    const options = {\n        method: \"GET\",\n        uri: `${transUrl}/verify/${reference}`,\n        headers: headersObj,\n        auth: { bearer: secretKey },\n        json: true, // Automatically stringifies the body to JSON\n    };\n    return rp(options).then((body) => {\n        if (body.status) return success(res, 200, body.data, body.message);\n        return fail(res, 200, body.message);\n    }).catch((error) => {\n        fail(res, 500, `Error list Tnx. ${error.message}`);\n    });\n}\n\nexport async function verifyPaystack(reference) {\n    const options = {\n        method: \"GET\",\n        uri: `${transUrl}/verify/${reference}`,\n        headers: headersObj,\n        auth: { bearer: secretKey },\n        json: true, // Automatically stringifies the body to JSON\n    };\n    return rp(options).then(body => body).catch(error => error);\n}\n\nexport async function totalTransaction(req, res) {\n    const { from, to } = req.params;\n    const options = {\n        method: \"GET\",\n        uri: `${transUrl}/totals`,\n        body: { from, to },\n        headers: headersObj,\n        auth: { bearer: secretKey },\n        json: true, // Automatically stringifies the body to JSON\n    };\n    return rp(options).then((body) => {\n        if (body.status) return success(res, 200, body.data, body.message);\n        return fail(res, 200, body.message);\n    }).catch((error) => {\n        fail(res, 500, `Error getting total Tnx. ${error.message}`);\n    });\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/bank/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,QAAX,EAAqB,CAACC,wBAAD,EAAYC,2BAAZ,CAArB,EAAgDC,uBAAhD;;AAEA;;;;;;;;;;;;;;;;;AAiBAN,OAAOO,IAAP,CAAY,QAAZ,EAAsB,CAACH,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDG,wBAAjD;;AAEA;;;;;;;;;;;;;;;;;AAiBAR,OAAOS,GAAP,CAAW,kBAAX,EAA+B,CAACL,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DK,wBAA1D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,kBAAd,EAAkC,CAACP,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DO,wBAA7D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/banks?id={recordId} Retrieve one or all records\n * @apiName RetrieveBank\n * @apiGroup Bank\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/banks?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of Corporate commercial banks operating Groups bank account(s)\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/banks\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/banks Create banks\n * @apiName CreateBank\n * @apiGroup Bank\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} name Bank full name (required)\n * @apiParam {String} sort_code Bank sort_code (required)\n * @apiParam {String} bank_code Bank bank_code (required)\n * @apiParam {String} country_iso2 Bank country_iso2 (optional)\n * @apiParam {String} contact_person Bank contact_person (optional)\n * @apiParam {String} website Bank website (optional)\n * @apiSuccess {Object} Bank Bank's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Bank not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/banks\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/banks/{recordId} Update banks\n * @apiName UpdateBank\n * @apiGroup Bank\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} name Bank full name (required)\n * @apiParam {String} sort_code Bank sort_code (required)\n * @apiParam {String} bank_code Bank bank_code (required)\n * @apiParam {String} country_iso2 Bank country_iso2 (optional)\n * @apiParam {String} contact_person Bank contact_person (optional)\n * @apiParam {String} website Bank website (optional)\n * @apiSuccess {Object} Bank Bank's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Bank not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/banks/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/banks/{recordId} Delete banks\n * @apiName DeleteBank\n * @apiGroup Bank\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Bank not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/banks/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/classe/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAN,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDG,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DK,wBAA5D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DO,wBAA/D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/classes?id={recordId} Retrieve one or all records\n * @apiName RetrieveClasse\n * @apiGroup Classe\n* @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/classes?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of classes in the school\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/classes\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/classes Create classes\n * @apiName CreateClasse\n * @apiGroup Classe\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Classe name - external (required)\n * @apiParam {String} code Classe code - internal (required)\n * @apiParam {String} subsidiary Classe subsidiary (required)\n * @apiParam {String} level Classe level [1-7]\n * @apiParam {ObjectId} master Classe master or form teacher (optional)\n * @apiParam {ObjectId} prefect Classe prefect or class captain (optional)\n * @apiParam {ObjectId} classroom Classe classroom or lesson venue (optional)\n * @apiParam {ObjectId} category Classe category or type (optional)\n * @apiSuccess {Object} Classe Classe's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Classe not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/classes\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/classes/{recordId} Update classes\n * @apiName UpdateClasse\n * @apiGroup Classe\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId required record ObjectId\n * @apiParam {String} name Classe name - external (required)\n * @apiParam {String} code Classe code - internal (required)\n * @apiParam {String} subsidiary Classe subsidiary (required)\n * @apiParam {String} level Classe level [1-7]\n * @apiParam {ObjectId} master Classe master or form teacher (optional)\n * @apiParam {ObjectId} prefect Classe prefect or class captain (optional)\n * @apiParam {ObjectId} classroom Classe classroom or lesson venue (optional)\n * @apiParam {ObjectId} category Classe category or type (optional)\n * @apiSuccess {Object} Classe Classe's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Classe not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/classes/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/classes/{recordId} Delete classes\n * @apiName DeleteClasse\n * @apiGroup Classe\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Classe not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/classes/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
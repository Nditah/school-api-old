{"version":3,"sources":["../../../../src/api/general/classe/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","searchString","q","$text","$search","Classe","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","code","findOne","$or","duplicate","newRecord","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Classe, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, hasProp, hash } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[classe]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/classe.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Classe.find(filter)\n            .populate(\"master\")\n            .populate(\"prefect\")\n            .populate(\"classroom\")\n            .populate(\"category\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const { code } = data;\n    const duplicate = await Classe.findOne({ $or: [{ code }] }).exec();\n    if (duplicate) {\n        return fail(res, 422, `Error! Record already exist for ${code}`);\n    }\n    const newRecord = new Classe(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Classe.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Classe.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 204, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/vehicle/controller.js"],"names":["req","res","query","findVehicle","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","filter","skip","limit","sort","projection","searchString","q","$text","$search","Vehicle","find","populate","path","select","exec","data","body","Joi","validate","schemaCreate","newRecord","save","ERROR","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\r\nimport log4js from \"log4js\";\r\nimport aqp from \"api-query-params\";\r\nimport Vehicle, { schemaCreate, schemaUpdate } from \"./model\";\r\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\r\nimport { STATUS_MSG } from \"../../../constants\";\r\n\r\n// Logging\r\nconst logger = log4js.getLogger(\"[vehicle]\");\r\nlog4js.configure({\r\n    appenders: { file: { type: \"file\", filename: \"logs/vehicle.log\" } },\r\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\r\n});\r\n\r\nexport async function fetchRecord(req, res) {\r\n    const { query } = req;\r\n    try {\r\n        const result = await findVehicle(query);\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function findVehicle(query) {\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    const searchString = filter.q || \"\";\r\n    if (searchString) {\r\n        filter.$text = { $search: searchString };\r\n        delete filter.q;\r\n    }\r\n    const result = await Vehicle.find(filter)\r\n        .populate(\"partner_id\")\r\n        .populate(\"current_staff_id\")\r\n        .populate(\"current_partner_id\")\r\n        .populate(\"rating_ids\")\r\n        .populate({ path: \"created_by\", select: \"surname given_name email phone\" })\r\n        .populate({ path: \"updated_by\", select: \"surname given_name email phone\" })\r\n        .skip(skip)\r\n        .limit(limit)\r\n        .sort(sort)\r\n        .select(projection)\r\n        .exec();\r\n    return result;\r\n}\r\n\r\nexport async function createRecord(req, res) {\r\n    const data = req.body;\r\n    const { error } = Joi.validate(data, schemaCreate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    const newRecord = new Vehicle(data);\r\n    try {\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.error(STATUS_MSG.ERROR.DEFAULT, []);\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateRecord(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, schemaUpdate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await Vehicle.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteRecord(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await Vehicle.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}\r\n"]}
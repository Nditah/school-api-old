{"version":3,"sources":["../../../../src/api/general/setup/controller.js"],"names":["req","res","accessToken","results","console","log","options","uri","setupUrls","method","auth","bearer","headers","json","Promise","all","map","setupUrl","message","setupSystem","params","subsidiary","folder","collection","Model","tablePath","path","join","__dirname","table","require","default","AccountClass","AccountHeading","Bank","BankAccount","Budget","Category","Country","Table","Vehicle","State","Setting","Hub","Staff","Office","Report","DocumentType","OffenceType","Material","Stage","insertMany","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","setCollection","writeHead","find","sort","_id","limit","csv","downloadCsv","Object","keys","files","length","status","send","csvFile","file","csvString","data","toString","records","fromString","ignoreEmpty","on","mongoose","Types","ObjectId","push","create","then","newRecord","catch","err","uploadCsv","log4js","getLogger","configure","appenders","type","filename","categories","level","host","process","env","NODE_ENV","SERVER_DEV","SERVER_PROD"],"mappings":";;;;;;;;uEA6DO,iBAA2BA,GAA3B,EAAgCC,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,mCADH,GACiB,6BAASF,GAAT,CADjB;AAECG,+BAFD;;AAGHC,gCAAQC,GAAR,CAAY,wBAAZ,EAAsCH,WAAtC;;AAEMI,+BALH,GAKa;AACZC,iCAAKC,UAAW,CAAX,CADO;AAEZC,oCAAQ,KAFI;AAGZC,kCAAM,EAAEC,QAAQT,WAAV,EAHM;AAIZU,qCAAS,EAAE,cAAc,iBAAhB,EAJG;AAKZC,kCAAM;AALM,yBALb;AAAA;AAAA;AAcW,+BAAMC,QAAQC,GAAR,CAAYP,UAAUQ,GAAV,CAAc,UAACC,QAAD,EAAc;AACpDX,oCAAQC,GAAR,GAAcU,QAAd;AACA,mCAAO,8BAAGX,OAAH,CAAP;AACH,yBAH2B,CAAZ,CAAN;;AAdX;AAcCH,+BAdD;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAmBCC,gCAAQC,GAAR,CAAY,YAAIa,OAAhB;AAnBD,yDAoBQ,eAAKjB,GAAL,EAAU,GAAV,8BAAyC,YAAIiB,OAA7C,CApBR;;AAAA;AAAA,yDAsBI,kBAAQjB,GAAR,EAAa,GAAb,EAAkBE,OAAlB,EAA2B,wBAA3B,CAtBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAegB,W;;;;;;wEAyBf,kBAA6BnB,GAA7B,EAAkCC,GAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sCACwCD,IAAIoB,MAD5C,EACKC,UADL,eACKA,UADL,EACiBC,MADjB,eACiBA,MADjB,EACyBC,UADzB,eACyBA,UADzB;AAECC,6BAFD;AAIGC,iCAJH,GAIeC,eAAKC,IAAL,CAAUC,SAAV,aAA8BP,UAA9B,SAA4CC,MAA5C,YAJf;;AAMH;;AACMO,6BAPH,GAOWC,aAAWL,SAAX,EAAwBM,OAPnC;;AAQH3B,gCAAQC,GAAR,CAAYwB,KAAZ;AARG;AAAA,uCAWSN,UAXT;AAAA,0DAYM,eAZN,wBAaM,iBAbN,yBAcM,MAdN,yBAeM,cAfN,yBAgBM,QAhBN,yBAiBM,UAjBN,yBAkBM,SAlBN,yBAmBM,OAnBN,yBAoBM,SApBN,yBAqBM,OArBN,yBAsBM,SAtBN,yBAuBM,KAvBN,yBAwBM,OAxBN,yBAyBM,QAzBN,yBA0BM,QA1BN,yBA2BM,eA3BN,yBA4BM,cA5BN,yBA6BM,UA7BN,yBA8BM,OA9BN;AAAA;;AAAA;AAYuBC,gCAAQQ,eAAR,CAZvB;;AAAA;AAayBR,gCAAQS,eAAR,CAbzB;;AAAA;AAccT,gCAAQU,gBAAR,CAdd;;AAAA;AAesBV,gCAAQW,gBAAR,CAftB;;AAAA;AAgBgBX,gCAAQY,gBAAR,CAhBhB;;AAAA;AAiBkBZ,gCAAQa,gBAAR,CAjBlB;;AAAA;AAkBiBb,gCAAQc,OAAR,CAlBjB;;AAAA;AAmBed,gCAAQe,eAAR,CAnBf;;AAAA;AAoBiBf,gCAAQgB,gBAAR,CApBjB;;AAAA;AAqBehB,gCAAQiB,gBAAR,CArBf;;AAAA;AAsBiBjB,gCAAQkB,gBAAR,CAtBjB;;AAAA;AAuBalB,gCAAQmB,GAAR,CAvBb;;AAAA;AAwBenB,gCAAQoB,eAAR,CAxBf;;AAAA;AAyBgBpB,gCAAQqB,gBAAR,CAzBhB;;AAAA;AA0BgBrB,gCAAQsB,gBAAR,CA1BhB;;AAAA;AA2BuBtB,gCAAQuB,gBAAR,CA3BvB;;AAAA;AA4BsBvB,gCAAQwB,gBAAR,CA5BtB;;AAAA;AA6BkBxB,gCAAQyB,gBAAR,CA7BlB;;AAAA;AA8BezB,gCAAQ0B,KAAR,CA9Bf;;AAAA;AAAA,0DA+BiB,eAAKjD,GAAL,EAAU,GAAV,iCAA4CsB,UAA5C,CA/BjB;;AAAA;AAAA;AAiCgB,+BAAMC,MAAM2B,UAAN,CAAiBtB,KAAjB,CAAN;;AAjChB;AAiCOuB,8BAjCP;;AAAA,4BAkCMA,MAlCN;AAAA;AAAA;AAAA;;AAmCKC,+BAAOC,IAAP,CAAYC,sBAAWC,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AAnCL,0DAoCY,mBAASxD,GAAT,EAAc,qCAAd,CApCZ;;AAAA;AAAA,0DAsCQ,kBAAQA,GAAR,EAAa,GAAb,EAAkBmD,MAAlB,EAA0B,8BAA1B,CAtCR;;AAAA;AAAA;AAAA;;AAwCCC,+BAAOK,KAAP;AAxCD,0DAyCQ,eAAKzD,GAAL,EAAU,GAAV,8BAAyC,aAAIiB,OAA7C,CAzCR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeyC,a;;;;;;wEA6Cf,kBAA2B3D,GAA3B,EAAgCC,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACKsB,kCADL,GACoBvB,IAAIoB,MADxB,CACKG,UADL;AAECC,6BAFD;AAAA;AAAA,uCAKSD,UALT;AAAA,0DAMU,eANV,wBAOU,iBAPV,wBAQU,MARV,yBASU,cATV,yBAUU,QAVV,yBAWU,UAXV,yBAYU,SAZV,yBAaU,OAbV,yBAcU,SAdV,yBAeU,OAfV,yBAgBU,SAhBV,yBAiBU,KAjBV,yBAkBU,OAlBV,yBAmBU,QAnBV,yBAoBU,QApBV,yBAqBU,eArBV,yBAsBU,cAtBV,yBAuBU,UAvBV,yBAwBU,OAxBV;AAAA;;AAAA;AAM2BC,gCAAQQ,eAAR,CAN3B;;AAAA;AAO6BR,gCAAQS,eAAR,CAP7B;;AAAA;AAQkBT,gCAAQU,gBAAR,CARlB;;AAAA;AAS0BV,gCAAQW,gBAAR,CAT1B;;AAAA;AAUoBX,gCAAQY,gBAAR,CAVpB;;AAAA;AAWsBZ,gCAAQa,gBAAR,CAXtB;;AAAA;AAYqBb,gCAAQc,OAAR,CAZrB;;AAAA;AAamBd,gCAAQe,eAAR,CAbnB;;AAAA;AAcqBf,gCAAQgB,gBAAR,CAdrB;;AAAA;AAemBhB,gCAAQiB,gBAAR,CAfnB;;AAAA;AAgBqBjB,gCAAQkB,gBAAR,CAhBrB;;AAAA;AAiBiBlB,gCAAQmB,GAAR,CAjBjB;;AAAA;AAkBmBnB,gCAAQoB,eAAR,CAlBnB;;AAAA;AAmBoBpB,gCAAQqB,gBAAR,CAnBpB;;AAAA;AAoBoBrB,gCAAQsB,gBAAR,CApBpB;;AAAA;AAqB2BtB,gCAAQuB,gBAAR,CArB3B;;AAAA;AAsB0BvB,gCAAQwB,gBAAR,CAtB1B;;AAAA;AAuBsBxB,gCAAQyB,gBAAR,CAvBtB;;AAAA;AAwBmBzB,gCAAQ0B,KAAR,CAxBnB;;AAAA;AAAA,0DAyBiB,eAAKjD,GAAL,EAAU,GAAV,iCAA4CsB,UAA5C,CAzBjB;;AAAA;AA2BCtB,4BAAI2D,SAAJ,CAAc,GAAd,EAAmB;AACf,4CAAgB,UADD;AAEf,6EAA+CrC,UAA/C;AAFe,yBAAnB;AAIA;AA/BD;AAgCQ,+BAAMC,MAAMqC,IAAN,GAAaC,IAAb,CAAkB,EAAEC,KAAK,CAAP,EAAlB,EAA8BC,KAA9B,CAAoC,GAApC,EAAyCC,GAAzC,CAA6ChE,GAA7C,CAAN;;AAhCR;AAAA;;AAAA;AAAA;AAAA;;AAmCCoD,+BAAOK,KAAP;AAnCD,0DAoCQ,eAAKzD,GAAL,EAAU,GAAV,8BAAyC,aAAIiB,OAA7C,CApCR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAegD,W;;;;;;wEAwCf,kBAAyBlE,GAAzB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACHG,gCAAQC,GAAR,CAAY,WAAZ;AACQkB,kCAFL,GAEoBvB,IAAIoB,MAFxB,CAEKG,UAFL;AAGCC,6BAHD;AAAA;AAAA,uCAMSD,UANT;AAAA,0DAOU,eAPV,wBAQU,iBARV,wBASU,MATV,yBAUU,cAVV,yBAWU,QAXV,yBAYU,UAZV,yBAaU,SAbV,yBAcU,OAdV,yBAeU,SAfV,yBAgBU,OAhBV,yBAiBU,SAjBV,yBAkBU,KAlBV,yBAmBU,OAnBV,yBAoBU,QApBV,yBAqBU,QArBV,yBAsBU,eAtBV,yBAuBU,cAvBV,yBAwBU,UAxBV,yBAyBU,OAzBV;AAAA;;AAAA;AAO2BC,gCAAQQ,eAAR,CAP3B;;AAAA;AAQ6BR,gCAAQS,eAAR,CAR7B;;AAAA;AASkBT,gCAAQU,gBAAR,CATlB;;AAAA;AAU0BV,gCAAQW,gBAAR,CAV1B;;AAAA;AAWoBX,gCAAQY,gBAAR,CAXpB;;AAAA;AAYsBZ,gCAAQa,gBAAR,CAZtB;;AAAA;AAaqBb,gCAAQc,OAAR,CAbrB;;AAAA;AAcmBd,gCAAQe,eAAR,CAdnB;;AAAA;AAeqBf,gCAAQgB,gBAAR,CAfrB;;AAAA;AAgBmBhB,gCAAQiB,gBAAR,CAhBnB;;AAAA;AAiBqBjB,gCAAQkB,gBAAR,CAjBrB;;AAAA;AAkBiBlB,gCAAQmB,GAAR,CAlBjB;;AAAA;AAmBmBnB,gCAAQoB,eAAR,CAnBnB;;AAAA;AAoBoBpB,gCAAQqB,gBAAR,CApBpB;;AAAA;AAqBoBrB,gCAAQsB,gBAAR,CArBpB;;AAAA;AAsB2BtB,gCAAQuB,gBAAR,CAtB3B;;AAAA;AAuB0BvB,gCAAQwB,gBAAR,CAvB1B;;AAAA;AAwBsBxB,gCAAQyB,gBAAR,CAxBtB;;AAAA;AAyBmBzB,gCAAQ0B,KAAR,CAzBnB;;AAAA;AAAA,0DA0BiB,eAAKjD,GAAL,EAAU,GAAV,iCAA4CsB,UAA5C,CA1BjB;;AAAA;AAAA,8BA4BK4C,OAAOC,IAAP,CAAYpE,IAAIqE,KAAhB,EAAuBC,MAAvB,KAAkC,CA5BvC;AAAA;AAAA;AAAA;;AAAA,0DA6BYrE,IAAIsE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yBAArB,CA7BZ;;AAAA;AA+BOC,+BA/BP,GA+BiBzE,IAAIqE,KAAJ,CAAUK,IA/B3B;AAgCOC,iCAhCP,GAgCmBF,QAAQG,IAAR,CAAaC,QAAb,EAhCnB;AAiCOC,+BAjCP,GAiCiB,EAjCjB;AAAA,0DAkCQb,kBAAIc,UAAJ,CAAeJ,SAAf,EAA0B,EAAE/D,SAAS,IAAX,EAAiBoE,aAAa,IAA9B,EAA1B,EACFC,EADE,CACC,MADD,EACS,UAACL,IAAD,EAAU;AAClBA,iCAAKb,GAAL,GAAW,IAAImB,mBAASC,KAAT,CAAeC,QAAnB,EAAX;AACAN,oCAAQO,IAAR,CAAaT,IAAb;AACH,yBAJE,EAKFK,EALE,CAKC,KALD,EAKQ;AAAA,mCAAMzD,MAAM8D,MAAN,CAAaR,OAAb,EACZS,IADY,CACP;AAAA,uCAAa,kBAAQtF,GAAR,EAAa,GAAb,EAAkB6E,OAAlB,EAA8BU,UAAUlB,MAAxC,SAAkD/C,UAAlD,sCAAb;AAAA,6BADO,EAEZkE,KAFY,CAEN;AAAA,uCAAO,eAAKxF,GAAL,EAAU,GAAV,OAAkByF,IAAIxE,OAAtB,CAAP;AAAA,6BAFM,CAAN;AAAA,yBALR,CAlCR;;AAAA;AAAA;AAAA;;AA2CCmC,+BAAOK,KAAP;AA3CD,0DA4CQ,eAAKzD,GAAL,EAAU,GAAV,8BAAyC,aAAMiB,OAA/C,CA5CR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeyE,S;;;;;AAzKtB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;2cA3BA;AACA;;;AA4BA;AACA,IAAMtC,SAASuC,iBAAOC,SAAP,CAAiB,SAAjB,CAAf;AACAD,iBAAOE,SAAP,CAAiB;AACbC,eAAW,EAAErB,MAAM,EAAEsB,MAAM,MAAR,EAAgBC,UAAU,gBAA1B,EAAR,EADE;AAEbC,gBAAY,EAAEnE,SAAS,EAAEgE,WAAW,CAAC,MAAD,CAAb,EAAuBI,OAAO,OAA9B,EAAX;AAFC,CAAjB;;AAKA,IAAIC,aAAJ;AACA,IAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCH,WAAOC,QAAQC,GAAR,CAAYE,UAAnB;AACH,CAFD,MAEO;AACHJ,WAAOC,QAAQC,GAAR,CAAYG,WAAnB;AACH;;AAED,IAAMjG,YAAY;AACd;AACG4F,IAFW,8DAGXA,IAHW,kEAIXA,IAJW,8CAKXA,IALW,gDAMXA,IANW,kDAOXA,IAPW,gDAQXA,IARW,8CASXA,IATW,8CAUXA,IAVW,kDAWXA,IAXW,4CAYXA,IAZW,4DAaXA,IAbW,8DAcXA,IAdW,4DAeXA,IAfW,6CAAlB","file":"controller.js","sourcesContent":["/* eslint-disable global-require */\n/* eslint-disable complexity */\nimport log4js from \"log4js\";\nimport path from \"path\";\nimport rp from \"request-promise\";\nimport csv from \"fast-csv\";\nimport mongoose from \"mongoose\";\n\nimport AccountHeading from \"../account-heading/model\";\nimport AccountClass from \"../account-class/model\";\nimport Table from \"../table/model\";\nimport Staff from \"../staff/model\";\nimport Office from \"../office/model\";\nimport Report from \"../report/model\";\nimport Vehicle from \"../vehicle/model\";\nimport Budget from \"../budget/model\";\nimport County from \"../county/model\";\nimport State from \"../state/model\";\nimport Setting from \"../setting/model\";\nimport Bank from \"../bank/model\";\nimport DocumentType from \"../document-type/model\";\nimport OffenceType from \"../offence-type/model\";\nimport BankAccount from \"../bank-account/model\";\nimport Material from \"../material/model\";\nimport Category from \"../category/model\";\nimport { success, fail, notFound } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport { getToken } from \"../../../middleware/authorization\";\n\n// Logging\nconst logger = log4js.getLogger(\"[setup]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/setup.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nlet host;\nif (process.env.NODE_ENV === \"development\") {\n    host = process.env.SERVER_DEV;\n} else {\n    host = process.env.SERVER_PROD;\n}\n\nconst setupUrls = [\n    // `${host}/api/setups/preload/{subsidiary}/{folder}/{collection}`,\n    `${host}/api/setups/preload/general/account-class/account_class`,\n    `${host}/api/setups/preload/general/account-heading/account_heading`,\n    `${host}/api/setups/preload/general/staff/staff`,\n    `${host}/api/setups/preload/general/office/office`,\n    `${host}/api/setups/preload/general/vehicle/vehicle`,\n    `${host}/api/setups/preload/general/county/county`,\n    `${host}/api/setups/preload/general/state/state`,\n    `${host}/api/setups/preload/general/table/table`,\n    `${host}/api/setups/preload/general/setting/setting`,\n    `${host}/api/setups/preload/general/bank/bank`,\n    `${host}/api/setups/preload/general/bank-account/bank_account`,\n    `${host}/api/setups/preload/general/document-type/document_type`,\n    `${host}/api/setups/preload/general/offence-type/offence_type`,\n    `${host}/api/setups/preload/general/stage/stage`,\n];\n\nexport async function setupSystem(req, res) {\n    const accessToken = getToken(req);\n    let results;\n    console.log(\"\\nThis is token \\n\\n\\n\", accessToken);\n\n    const options = {\n        uri: setupUrls[ 0 ],\n        method: \"GET\",\n        auth: { bearer: accessToken },\n        headers: { \"User-Agent\": \"Request-Promise\" },\n        json: true,\n    };\n    try {\n        // results = await rp(options);\n        results = await Promise.all(setupUrls.map((setupUrl) => {\n            options.uri = setupUrl;\n            return rp(options);\n        }));\n    } catch (err) {\n        console.log(err.message);\n        return fail(res, 401, `Error settingup system ${err.message}`);\n    }\n    return success(res, 201, results, \"System Setup complete!\");\n}\n\nexport async function setCollection(req, res) {\n    const { subsidiary, folder, collection } = req.params;\n    let Model;\n\n    const tablePath = path.join(__dirname, `../../${subsidiary}/${folder}/table`);\n\n    // eslint-disable-next-line import/no-dynamic-require\n    const table = require(`${tablePath}`).default;\n    console.log(table);\n    try {\n        // eslint-disable-next-line default-case\n        switch (collection) {\n        case \"account_class\": Model = AccountClass; break;\n        case \"account_heading\": Model = AccountHeading; break;\n        case \"bank\": Model = Bank; break;\n        case \"bank_account\": Model = BankAccount; break;\n        case \"budget\": Model = Budget; break;\n        case \"category\": Model = Category; break;\n        case \"country\": Model = Country; break;\n        case \"table\": Model = Table; break;\n        case \"vehicle\": Model = Vehicle; break;\n        case \"state\": Model = State; break;\n        case \"setting\": Model = Setting; break;\n        case \"hub\": Model = Hub; break;\n        case \"staff\": Model = Staff; break;\n        case \"office\": Model = Office; break;\n        case \"report\": Model = Report; break;\n        case \"document_type\": Model = DocumentType; break;\n        case \"offence_type\": Model = OffenceType; break;\n        case \"material\": Model = Material; break;\n        case \"stage\": Model = Stage; break;\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\n        }\n        const result = await Model.insertMany(table);\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function downloadCsv(req, res) {\n    const { collection } = req.params;\n    let Model;\n    try {\n        // eslint-disable-next-line default-case\n        switch (collection) {\n            case \"account_class\": Model = AccountClass; break;\n            case \"account_heading\": Model = AccountHeading; break;\n            case \"bank\": Model = Bank; break;\n            case \"bank_account\": Model = BankAccount; break;\n            case \"budget\": Model = Budget; break;\n            case \"category\": Model = Category; break;\n            case \"country\": Model = Country; break;\n            case \"table\": Model = Table; break;\n            case \"vehicle\": Model = Vehicle; break;\n            case \"state\": Model = State; break;\n            case \"setting\": Model = Setting; break;\n            case \"hub\": Model = Hub; break;\n            case \"staff\": Model = Staff; break;\n            case \"office\": Model = Office; break;\n            case \"report\": Model = Report; break;\n            case \"document_type\": Model = DocumentType; break;\n            case \"offence_type\": Model = OffenceType; break;\n            case \"material\": Model = Material; break;\n            case \"stage\": Model = Stage; break;\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\n        }\n        res.writeHead(200, {\n            \"Content-Type\": \"text/csv\",\n            \"Content-Disposition\": `attachment; filename=${collection}.csv`,\n        });\n        // pipe file using mongoose-csv\n        return await Model.find().sort({ _id: 1 }).limit(100).csv(res);\n        // return res.status(200).send(result);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function uploadCsv(req, res) {\n    console.log(\"uploadCsv\");\n    const { collection } = req.params;\n    let Model;\n    try {\n        // eslint-disable-next-line default-case\n        switch (collection) {\n            case \"account_class\": Model = AccountClass; break;\n            case \"account_heading\": Model = AccountHeading; break;\n            case \"bank\": Model = Bank; break;\n            case \"bank_account\": Model = BankAccount; break;\n            case \"budget\": Model = Budget; break;\n            case \"category\": Model = Category; break;\n            case \"country\": Model = Country; break;\n            case \"table\": Model = Table; break;\n            case \"vehicle\": Model = Vehicle; break;\n            case \"state\": Model = State; break;\n            case \"setting\": Model = Setting; break;\n            case \"hub\": Model = Hub; break;\n            case \"staff\": Model = Staff; break;\n            case \"office\": Model = Office; break;\n            case \"report\": Model = Report; break;\n            case \"document_type\": Model = DocumentType; break;\n            case \"offence_type\": Model = OffenceType; break;\n            case \"material\": Model = Material; break;\n            case \"stage\": Model = Stage; break;\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\n        }\n        if (Object.keys(req.files).length === 0) {\n            return res.status(400).send(\"No files were uploaded.\");\n        }\n        const csvFile = req.files.file;\n        const csvString = csvFile.data.toString();\n        const records = [];\n        return csv.fromString(csvString, { headers: true, ignoreEmpty: true })\n            .on(\"data\", (data) => {\n                data._id = new mongoose.Types.ObjectId();\n                records.push(data);\n            })\n            .on(\"end\", () => Model.create(records)\n                .then(newRecord => success(res, 201, records, `${newRecord.length} ${collection} record(s) created successfully!`))\n                .catch(err => fail(res, 422, `${err.message}`)));\n    } catch (error) {\n        logger.error(error);\n        return fail(res, 500, `Error creating record. ${error.message}`);\n    }\n}\n"]}
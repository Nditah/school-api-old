{"version":3,"sources":["../../../../src/api/general/setup/controller.js"],"names":["req","res","accessToken","results","console","log","options","uri","setupUrls","method","auth","bearer","headers","json","Promise","all","map","setupUrl","message","setupSystem","params","subsidiary","folder","collection","Model","tablePath","path","join","__dirname","table","require","default","AccountClass","AccountHeading","Bank","BankAccount","Budget","Category","Table","Vehicle","State","Setting","Staff","Office","Report","DocumentType","OffenceType","Material","insertMany","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","setCollection","writeHead","find","sort","_id","limit","csv","downloadCsv","Object","keys","files","length","status","send","csvFile","file","csvString","data","toString","records","fromString","ignoreEmpty","on","mongoose","Types","ObjectId","push","create","then","newRecord","catch","err","uploadCsv","log4js","getLogger","configure","appenders","type","filename","categories","level","host","process","env","NODE_ENV","SERVER_DEV","SERVER_PROD"],"mappings":"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","file":"controller.js","sourcesContent":["/* eslint-disable global-require */\r\n/* eslint-disable complexity */\r\nimport log4js from \"log4js\";\r\nimport path from \"path\";\r\nimport rp from \"request-promise\";\r\nimport csv from \"fast-csv\";\r\nimport mongoose from \"mongoose\";\r\n\r\nimport AccountHeading from \"../account-heading/model\";\r\nimport AccountClass from \"../account-class/model\";\r\nimport Table from \"../table/model\";\r\nimport Staff from \"../staff/model\";\r\nimport Office from \"../office/model\";\r\nimport Report from \"../report/model\";\r\nimport Vehicle from \"../vehicle/model\";\r\nimport Budget from \"../budget/model\";\r\nimport County from \"../county/model\";\r\nimport State from \"../state/model\";\r\nimport Setting from \"../setting/model\";\r\nimport Bank from \"../bank/model\";\r\nimport DocumentType from \"../document-type/model\";\r\nimport OffenceType from \"../offence-type/model\";\r\nimport BankAccount from \"../bank-account/model\";\r\nimport Material from \"../material/model\";\r\nimport Category from \"../category/model\";\r\nimport { success, fail, notFound } from \"../../../lib\";\r\nimport { STATUS_MSG } from \"../../../constants\";\r\nimport { getToken } from \"../../../middleware/authorization\";\r\n\r\n// Logging\r\nconst logger = log4js.getLogger(\"[setup]\");\r\nlog4js.configure({\r\n    appenders: { file: { type: \"file\", filename: \"logs/setup.log\" } },\r\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\r\n});\r\n\r\nlet host;\r\nif (process.env.NODE_ENV === \"development\") {\r\n    host = process.env.SERVER_DEV;\r\n} else {\r\n    host = process.env.SERVER_PROD;\r\n}\r\n\r\nconst setupUrls = [\r\n    // `${host}/api/setups/preload/{subsidiary}/{folder}/{collection}`,\r\n    `${host}/api/setups/preload/general/account-class/account_class`,\r\n    `${host}/api/setups/preload/general/account-heading/account_heading`,\r\n    `${host}/api/setups/preload/general/staff/staff`,\r\n    `${host}/api/setups/preload/general/office/office`,\r\n    `${host}/api/setups/preload/general/vehicle/vehicle`,\r\n    `${host}/api/setups/preload/general/county/county`,\r\n    `${host}/api/setups/preload/general/state/state`,\r\n    `${host}/api/setups/preload/general/table/table`,\r\n    `${host}/api/setups/preload/general/setting/setting`,\r\n    `${host}/api/setups/preload/general/bank/bank`,\r\n    `${host}/api/setups/preload/general/bank-account/bank_account`,\r\n    `${host}/api/setups/preload/general/document-type/document_type`,\r\n    `${host}/api/setups/preload/general/offence-type/offence_type`,\r\n    `${host}/api/setups/preload/general/stage/stage`,\r\n];\r\n\r\nexport async function setupSystem(req, res) {\r\n    const accessToken = getToken(req);\r\n    let results;\r\n    console.log(\"\\nThis is token \\n\\n\\n\", accessToken);\r\n\r\n    const options = {\r\n        uri: setupUrls[ 0 ],\r\n        method: \"GET\",\r\n        auth: { bearer: accessToken },\r\n        headers: { \"User-Agent\": \"Request-Promise\" },\r\n        json: true,\r\n    };\r\n    try {\r\n        // results = await rp(options);\r\n        results = await Promise.all(setupUrls.map((setupUrl) => {\r\n            options.uri = setupUrl;\r\n            return rp(options);\r\n        }));\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return fail(res, 401, `Error settingup system ${err.message}`);\r\n    }\r\n    return success(res, 201, results, \"System Setup complete!\");\r\n}\r\n\r\nexport async function setCollection(req, res) {\r\n    const { subsidiary, folder, collection } = req.params;\r\n    let Model;\r\n\r\n    const tablePath = path.join(__dirname, `../../${subsidiary}/${folder}/table`);\r\n\r\n    // eslint-disable-next-line import/no-dynamic-require\r\n    const table = require(`${tablePath}`).default;\r\n    console.log(table);\r\n    try {\r\n        // eslint-disable-next-line default-case\r\n        switch (collection) {\r\n        case \"account_class\": Model = AccountClass; break;\r\n        case \"account_heading\": Model = AccountHeading; break;\r\n        case \"bank\": Model = Bank; break;\r\n        case \"bank_account\": Model = BankAccount; break;\r\n        case \"budget\": Model = Budget; break;\r\n        case \"category\": Model = Category; break;\r\n        case \"table\": Model = Table; break;\r\n        case \"vehicle\": Model = Vehicle; break;\r\n        case \"state\": Model = State; break;\r\n        case \"setting\": Model = Setting; break;\r\n        case \"staff\": Model = Staff; break;\r\n        case \"office\": Model = Office; break;\r\n        case \"report\": Model = Report; break;\r\n        case \"document_type\": Model = DocumentType; break;\r\n        case \"offence_type\": Model = OffenceType; break;\r\n        case \"material\": Model = Material; break;\r\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\r\n        }\r\n        const result = await Model.insertMany(table);\r\n        if (!result) {\r\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function downloadCsv(req, res) {\r\n    const { collection } = req.params;\r\n    let Model;\r\n    try {\r\n        // eslint-disable-next-line default-case\r\n        switch (collection) {\r\n        case \"account_class\": Model = AccountClass; break;\r\n        case \"account_heading\": Model = AccountHeading; break;\r\n        case \"bank\": Model = Bank; break;\r\n        case \"bank_account\": Model = BankAccount; break;\r\n        case \"budget\": Model = Budget; break;\r\n        case \"category\": Model = Category; break;\r\n        case \"table\": Model = Table; break;\r\n        case \"vehicle\": Model = Vehicle; break;\r\n        case \"state\": Model = State; break;\r\n        case \"setting\": Model = Setting; break;\r\n        case \"staff\": Model = Staff; break;\r\n        case \"office\": Model = Office; break;\r\n        case \"report\": Model = Report; break;\r\n        case \"document_type\": Model = DocumentType; break;\r\n        case \"offence_type\": Model = OffenceType; break;\r\n        case \"material\": Model = Material; break;\r\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\r\n        }\r\n        res.writeHead(200, {\r\n            \"Content-Type\": \"text/csv\",\r\n            \"Content-Disposition\": `attachment; filename=${collection}.csv`,\r\n        });\r\n        // pipe file using mongoose-csv\r\n        return await Model.find().sort({ _id: 1 }).limit(100).csv(res);\r\n        // return res.status(200).send(result);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function uploadCsv(req, res) {\r\n    console.log(\"uploadCsv\");\r\n    const { collection } = req.params;\r\n    let Model;\r\n    try {\r\n        // eslint-disable-next-line default-case\r\n        switch (collection) {\r\n        case \"account_class\": Model = AccountClass; break;\r\n        case \"account_heading\": Model = AccountHeading; break;\r\n        case \"bank\": Model = Bank; break;\r\n        case \"bank_account\": Model = BankAccount; break;\r\n        case \"budget\": Model = Budget; break;\r\n        case \"category\": Model = Category; break;\r\n        case \"table\": Model = Table; break;\r\n        case \"vehicle\": Model = Vehicle; break;\r\n        case \"state\": Model = State; break;\r\n        case \"setting\": Model = Setting; break;\r\n        case \"staff\": Model = Staff; break;\r\n        case \"office\": Model = Office; break;\r\n        case \"report\": Model = Report; break;\r\n        case \"document_type\": Model = DocumentType; break;\r\n        case \"offence_type\": Model = OffenceType; break;\r\n        case \"material\": Model = Material; break;\r\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\r\n        }\r\n        if (Object.keys(req.files).length === 0) {\r\n            return res.status(400).send(\"No files were uploaded.\");\r\n        }\r\n        const csvFile = req.files.file;\r\n        const csvString = csvFile.data.toString();\r\n        const records = [];\r\n        return csv.fromString(csvString, { headers: true, ignoreEmpty: true })\r\n            .on(\"data\", (data) => {\r\n                data._id = new mongoose.Types.ObjectId();\r\n                records.push(data);\r\n            })\r\n            .on(\"end\", () => Model.create(records)\r\n                .then(newRecord => success(res, 201, records, `${newRecord.length} ${collection} record(s) created successfully!`))\r\n                .catch(err => fail(res, 422, `${err.message}`)));\r\n    } catch (error) {\r\n        logger.error(error);\r\n        return fail(res, 500, `Error creating record. ${error.message}`);\r\n    }\r\n}\r\n"]}
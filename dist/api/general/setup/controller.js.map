{"version":3,"sources":["../../../../src/api/general/setup/controller.js"],"names":["req","res","accessToken","results","console","log","options","uri","setupUrls","method","auth","bearer","headers","json","Promise","all","map","setupUrl","message","setupSystem","params","subsidiary","folder","collection","Model","tablePath","path","join","__dirname","table","require","default","AccountClass","AccountHeading","Bank","BankAccount","Budget","Category","County","Table","Vehicle","State","Setting","Staff","Office","Report","DocumentType","OffenceType","Material","insertMany","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","setCollection","writeHead","find","sort","_id","limit","csv","downloadCsv","Object","keys","files","length","status","send","csvFile","file","csvString","data","toString","records","fromString","ignoreEmpty","on","mongoose","Types","ObjectId","push","create","then","newRecord","catch","err","uploadCsv","log4js","getLogger","configure","appenders","type","filename","categories","level","host","process","env","NODE_ENV","SERVER_DEV","SERVER_PROD"],"mappings":"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","file":"controller.js","sourcesContent":["/* eslint-disable global-require */\n/* eslint-disable complexity */\nimport log4js from \"log4js\";\nimport path from \"path\";\nimport rp from \"request-promise\";\nimport csv from \"fast-csv\";\nimport mongoose from \"mongoose\";\n\nimport { AccountClass, AccountHeading } from \"../accounting/model\";\nimport Table from \"../table/model\";\nimport Staff from \"../staff/model\";\nimport Office from \"../office/model\";\nimport Report from \"../report/model\";\nimport Vehicle from \"../vehicle/model\";\nimport Budget from \"../budget/model\";\nimport County from \"../county/model\";\nimport State from \"../state/model\";\nimport Setting from \"../setting/model\";\nimport Bank from \"../bank/model\";\nimport DocumentType from \"../document-type/model\";\nimport { OffenceType } from \"../offence/model\";\nimport BankAccount from \"../bank-account/model\";\nimport Material from \"../material/model\";\nimport Category from \"../category/model\";\nimport { success, fail, notFound } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport { getToken } from \"../../../middleware/authorization\";\n\n// Logging\nconst logger = log4js.getLogger(\"[setup]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/setup.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nlet host;\nif (process.env.NODE_ENV === \"development\") {\n    host = process.env.SERVER_DEV;\n} else {\n    host = process.env.SERVER_PROD;\n}\n\nconst setupUrls = [\n    // `${host}/api/setups/preload/{subsidiary}/{folder}/{collection}`,\n    `${host}/api/setups/preload/general/accounting/account_heading`,\n    `${host}/api/setups/preload/general/accounting/account_class`,\n    `${host}/api/setups/preload/general/staff/staff`,\n    `${host}/api/setups/preload/general/office/office`,\n    `${host}/api/setups/preload/general/vehicle/vehicle`,\n    `${host}/api/setups/preload/general/county/county`,\n    `${host}/api/setups/preload/general/state/state`,\n    `${host}/api/setups/preload/general/table/table`,\n    `${host}/api/setups/preload/general/setting/setting`,\n    `${host}/api/setups/preload/general/bank/bank`,\n    `${host}/api/setups/preload/general/bank-account/bank_account`,\n    `${host}/api/setups/preload/general/document-type/document_type`,\n    `${host}/api/setups/preload/general/offence/offence_type`,\n    `${host}/api/setups/preload/general/stage/stage`,\n];\n\nexport async function setupSystem(req, res) {\n    const accessToken = getToken(req);\n    let results;\n    console.log(\"\\nThis is token \\n\\n\\n\", accessToken);\n\n    const options = {\n        uri: setupUrls[ 0 ],\n        method: \"GET\",\n        auth: { bearer: accessToken },\n        headers: { \"User-Agent\": \"Request-Promise\" },\n        json: true,\n    };\n    try {\n        // results = await rp(options);\n        results = await Promise.all(setupUrls.map((setupUrl) => {\n            options.uri = setupUrl;\n            return rp(options);\n        }));\n    } catch (err) {\n        console.log(err.message);\n        return fail(res, 401, `Error settingup system ${err.message}`);\n    }\n    return success(res, 201, results, \"System Setup complete!\");\n}\n\nexport async function setCollection(req, res) {\n    const { subsidiary, folder, collection } = req.params;\n    let Model;\n\n    const tablePath = path.join(__dirname, `../../${subsidiary}/${folder}/table`);\n\n    // eslint-disable-next-line import/no-dynamic-require\n    const table = require(`${tablePath}`).default;\n    console.log(table);\n    try {\n        // eslint-disable-next-line default-case\n        switch (collection) {\n        case \"account_class\": Model = AccountClass; break;\n        case \"account_heading\": Model = AccountHeading; break;\n        case \"bank\": Model = Bank; break;\n        case \"bank_account\": Model = BankAccount; break;\n        case \"budget\": Model = Budget; break;\n        case \"category\": Model = Category; break;\n        case \"county\": Model = County; break;\n        case \"table\": Model = Table; break;\n        case \"vehicle\": Model = Vehicle; break;\n        case \"state\": Model = State; break;\n        case \"setting\": Model = Setting; break;\n        case \"staff\": Model = Staff; break;\n        case \"office\": Model = Office; break;\n        case \"report\": Model = Report; break;\n        case \"document_type\": Model = DocumentType; break;\n        case \"offence_type\": Model = OffenceType; break;\n        case \"material\": Model = Material; break;\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\n        }\n        const result = await Model.insertMany(table);\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function downloadCsv(req, res) {\n    const { collection } = req.params;\n    let Model;\n    try {\n        // eslint-disable-next-line default-case\n        switch (collection) {\n        case \"account_class\": Model = AccountClass; break;\n        case \"account_heading\": Model = AccountHeading; break;\n        case \"bank\": Model = Bank; break;\n        case \"bank_account\": Model = BankAccount; break;\n        case \"budget\": Model = Budget; break;\n        case \"category\": Model = Category; break;\n        case \"county\": Model = County; break;\n        case \"table\": Model = Table; break;\n        case \"vehicle\": Model = Vehicle; break;\n        case \"state\": Model = State; break;\n        case \"setting\": Model = Setting; break;\n        case \"staff\": Model = Staff; break;\n        case \"office\": Model = Office; break;\n        case \"report\": Model = Report; break;\n        case \"document_type\": Model = DocumentType; break;\n        case \"offence_type\": Model = OffenceType; break;\n        case \"material\": Model = Material; break;\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\n        }\n        res.writeHead(200, {\n            \"Content-Type\": \"text/csv\",\n            \"Content-Disposition\": `attachment; filename=${collection}.csv`,\n        });\n        // pipe file using mongoose-csv\n        return await Model.find().sort({ _id: 1 }).limit(100).csv(res);\n        // return res.status(200).send(result);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function uploadCsv(req, res) {\n    console.log(\"uploadCsv\");\n    const { collection } = req.params;\n    let Model;\n    try {\n        // eslint-disable-next-line default-case\n        switch (collection) {\n        case \"account_class\": Model = AccountClass; break;\n        case \"account_heading\": Model = AccountHeading; break;\n        case \"bank\": Model = Bank; break;\n        case \"bank_account\": Model = BankAccount; break;\n        case \"budget\": Model = Budget; break;\n        case \"category\": Model = Category; break;\n        case \"county\": Model = County; break;\n        case \"table\": Model = Table; break;\n        case \"vehicle\": Model = Vehicle; break;\n        case \"state\": Model = State; break;\n        case \"setting\": Model = Setting; break;\n        case \"staff\": Model = Staff; break;\n        case \"office\": Model = Office; break;\n        case \"report\": Model = Report; break;\n        case \"document_type\": Model = DocumentType; break;\n        case \"offence_type\": Model = OffenceType; break;\n        case \"material\": Model = Material; break;\n        default: return fail(res, 401, `Error invalid collection: ${collection}`);\n        }\n        if (Object.keys(req.files).length === 0) {\n            return res.status(400).send(\"No files were uploaded.\");\n        }\n        const csvFile = req.files.file;\n        const csvString = csvFile.data.toString();\n        const records = [];\n        return csv.fromString(csvString, { headers: true, ignoreEmpty: true })\n            .on(\"data\", (data) => {\n                data._id = new mongoose.Types.ObjectId();\n                records.push(data);\n            })\n            .on(\"end\", () => Model.create(records)\n                .then(newRecord => success(res, 201, records, `${newRecord.length} ${collection} record(s) created successfully!`))\n                .catch(err => fail(res, 422, `${err.message}`)));\n    } catch (error) {\n        logger.error(error);\n        return fail(res, 500, `Error creating record. ${error.message}`);\n    }\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/notification/routes.js"],"names":["express","checkAuth","isValidStaff","fetchRecord","createRecord","updateRecord","deleteRecord","router","Router","get","post","put","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mCAAxC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,EAAkDC,YAAlD,QAAsE,cAAtE;;AAEA,MAAMC,SAASP,QAAQQ,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAD,OAAOE,GAAP,CAAW,gBAAX,EAA6B,CAACR,SAAD,CAA7B,EAA0CE,WAA1C;;AAEA;;;;;;;;;;;;;;;;;AAiBAI,OAAOG,IAAP,CAAY,gBAAZ,EAA8B,CAACT,SAAD,EAAYC,YAAZ,CAA9B,EAAyDE,YAAzD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAG,OAAOI,GAAP,CAAW,0BAAX,EAAuC,CAACV,SAAD,CAAvC,EAAoDI,YAApD;;AAEA;;;;;;;;;;;AAWAE,OAAOK,MAAP,CAAc,0BAAd,EAA0C,CAACX,SAAD,EAAYC,YAAZ,CAA1C,EAAqEI,YAArE;;AAEA,eAAeC,MAAf","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/notifications?id={recordId} Retrieve Notification records\n * @apiName RetrieveNotification\n * @apiGroup Notification\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/notifications?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/notifications\", [checkAuth], fetchRecord);\n\n/**\n * @api {post} /api/notifications Create a Notification record\n * @apiName CreateNotification\n * @apiGroup Notification\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} user_type Notification user type \"STAFF|PARTNER|PARTNER|CUSTOMER\"\n * @apiParam {ObjectId} staff_id Notification staff ObjectId\n * @apiParam {ObjectId} supplier_id Notification driver ObjectId\n * @apiParam {ObjectId} customer_id Notification customer ObjectId\n * @apiParam {ObjectId} partner_id Notification partner ObjectId\n * @apiParam {String} message Notification message\n * @apiParam {String} notification_status Notification record status \"PENDING|CLOSED\"\n * @apiSuccess {Object} Notification Notification's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Notification not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/notifications\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/notifications/{recordId} Update a Notification record\n * @apiName UpdateNotification\n * @apiGroup Notification\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} user_type Notification user type \"STAFF|PARTNER|PARTNER|CUSTOMER\"\n * @apiParam {ObjectId} staff_id Notification staff ObjectId\n * @apiParam {ObjectId} supplier_id Notification driver ObjectId\n * @apiParam {ObjectId} customer_id Notification customer ObjectId\n * @apiParam {ObjectId} partner_id Notification partner ObjectId\n * @apiParam {String} message Notification message\n * @apiParam {String} notification_status Notification record status \"PENDING|CLOSED\"\n * @apiSuccess {Object} Notification Notification's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Notification not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/notifications/:recordId\", [checkAuth], updateRecord);\n\n/**\n * @api {delete} /api/notifications/{recordId} Delete a Notification record\n * @apiName DeleteNotification\n * @apiGroup Notification\n * @apiPermission master\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Notification not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/notifications/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/sms/controller.js"],"names":["Joi","log4js","aqp","Sms","schemaCreate","success","fail","notFound","generateOtp","hash","stringToArrayPhone","receiveSms","sendSmsAsync","Staff","Student","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecord","req","res","query","filter","skip","limit","sort","projection","result","find","populate","select","exec","info","err","error","message","createOtp","user_type","userType","phone","body","otp","toString","Model","otpHash","update","otp_access","$inc","otp_count","user","findOneAndUpdate","new","console","log","send","sid","record","recipient","direction","newRecord","result1","save","to","createRecord","data","validate","recipientArray","findOne","_id","created_by","sentSms","count","myArray","sendingSms","length","totalSms","sms_units","resolvedFinalArray","Promise","all","map","data2","result2","createWebhook"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Sms, { schemaCreate } from \"./model\";\nimport { success, fail, notFound, generateOtp, hash, stringToArrayPhone } from \"../../../lib\";\nimport { receiveSms, sendSmsAsync } from \"../../../services\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[sms]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/sms.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Sms.find(filter)\n            .populate(\"created_by\", \"id phone email type surname other_name\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createOtp(req, res) {\n    const { user_type: userType, phone } = req.body;\n    if (!(userType && phone)) fail(res, 422, \"Error invalid user_type or phone\");\n\n    try {\n        const otp = generateOtp().toString();\n        let Model;\n        switch (userType) {\n        case \"STAFF\": Model = Staff; break;\n        case \"STUDENT\": Model = Student; break;\n        default: return fail(res, 422, `Invalid user_type ${userType}`);\n        }\n\n        const otpHash = hash(otp);\n        const query = { phone };\n        const update = { otp: otpHash, otp_access: true, $inc: { otp_count: 1 } };\n        const user = await Model.findOneAndUpdate(query, update, { new: true });\n        console.log(\"User =>\", user);\n        if (user == null) {\n            return notFound(res, `User not found with phone number, ${phone}`);\n        }\n        const send = await sendSmsAsync(phone, `Use your phone number and this OTP ${otp} \n        to login as a one-time password`);\n        const { sid } = send;\n        if (!sid) return fail(res, 422, \"Error sending message\");\n        const record = { recipient: phone, message: otp, sid, direction: \"OUTBOUND\" };\n        const newRecord = new Sms(record);\n        const result1 = await newRecord.save();\n        console.log(result1);\n        return success(res, 201, send.to, \"Operation was successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    data.direction = \"OUTBOUND\";\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    // eslint-disable-next-line max-len\n    const { recipient: recipientArray } = data;\n    try {\n        const user = await Staff.findOne({ _id: data.created_by }).exec();\n        const sentSms = await Sms.count({ created_by: data.created_by });\n        const myArray = stringToArrayPhone(recipientArray) || [];\n        const sendingSms = myArray.length;\n        const totalSms = sentSms + sendingSms;\n        if (totalSms > user.sms_units) {\n            return fail(res, 422, `Error! You have ${user.sms_units} units left. You cannot send ${sendingSms}`);\n            // console.log(`You have ${user.sms_units}Units left. You cannot send ${sendingSms}`);\n        }\n        const resolvedFinalArray = await Promise.all(myArray.map(async (phone) => {\n            const send = await sendSmsAsync(phone, data.message);\n            data.sid = send.sid;\n            data.recipient = phone;\n            const newRecord = new Sms(data);\n            const result = await newRecord.save();\n            return result; // important to return the value\n        }));\n\n        const data2 = { sms_units: (user.sms_units - sendingSms) };\n        const result2 = await Staff.findOneAndUpdate({ _id: data.created_by },\n            data2, { new: true });\n        console.log(result2.sms_units);\n        return success(res, 201, resolvedFinalArray, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function createWebhook(req, res) {\n    const data = req.body;\n    receiveSms(req, res);\n    logger.info(\"Operation was successful\", data);\n}\n"]}
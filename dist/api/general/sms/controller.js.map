{"version":3,"sources":["../../../../src/api/general/sms/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Sms","find","populate","select","exec","result","logger","info","error","message","fetchRecord","body","userType","user_type","phone","otp","toString","Model","Staff","Student","otpHash","update","otp_access","$inc","otp_count","findOneAndUpdate","new","user","console","log","send","sid","record","recipient","direction","newRecord","save","result1","to","createOtp","data","Joi","validate","schemaCreate","createRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Sms, { schemaCreate } from \"./model\";\nimport { success, fail, notFound, generateOtp, hash } from \"../../../lib\";\nimport { sendSmsAsync } from \"../../../services\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[sms]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/sms.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Sms.find(filter)\n            .populate(\"created_by\", \"id phone email type surname given_name\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createOtp(req, res) {\n    const { user_type: userType, phone } = req.body;\n    if (!(userType && phone)) fail(res, 422, \"Error invalid user_type or phone\");\n\n    try {\n        const otp = generateOtp().toString();\n        let Model;\n        switch (userType) {\n        case \"STAFF\": Model = Staff; break;\n        case \"STUDENT\": Model = Student; break;\n        default: return fail(res, 422, `Invalid user_type ${userType}`);\n        }\n\n        const otpHash = hash(otp);\n        const query = { phone };\n        const update = { otp: otpHash, otp_access: true, $inc: { otp_count: 1 } };\n        const user = await Model.findOneAndUpdate(query, update, { new: true });\n        console.log(\"User =>\", user);\n        if (user == null) {\n            return notFound(res, `User not found with phone number, ${phone}`);\n        }\n        const send = await sendSmsAsync(phone, `Use your phone number and this OTP ${otp} \n        to login as a one-time password`);\n        const { sid } = send;\n        if (!sid) return fail(res, 422, \"Error sending message\");\n        const record = { recipient: phone, message: otp, sid, direction: \"OUTBOUND\" };\n        const newRecord = new Sms(record);\n        const result1 = await newRecord.save();\n        console.log(result1);\n        return success(res, 201, send.to, \"Operation was successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await sendSmsAsync(data.recipient, data.message);\n        console.log(result);\n        return success(res, 201, result, result.message);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n"]}
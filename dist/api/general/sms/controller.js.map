{"version":3,"sources":["../../../../src/api/general/sms/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Sms","find","populate","select","exec","result","logger","info","error","message","fetchRecord","body","userType","user_type","phone","otp","toString","Model","Staff","Student","otpHash","update","otp_access","$inc","otp_count","findOneAndUpdate","new","user","console","log","send","sid","record","recipient","direction","newRecord","save","result1","to","createOtp","data","Joi","validate","schemaCreate","recipientArray","findOne","_id","created_by","count","sentSms","myArray","sendingSms","length","totalSms","sms_units","Promise","all","map","resolvedFinalArray","data2","result2","createRecord","createWebhook","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Sms, { schemaCreate } from \"./model\";\nimport { success, fail, notFound, generateOtp, hash, stringToArrayPhone } from \"../../../lib\";\nimport { receiveSms, sendSmsAsync } from \"../../../services\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[sms]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/sms.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Sms.find(filter)\n            .populate(\"created_by\", \"id phone email type surname given_name\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(\"Operation was successful\", []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createOtp(req, res) {\n    const { user_type: userType, phone } = req.body;\n    if (!(userType && phone)) fail(res, 422, \"Error invalid user_type or phone\");\n\n    try {\n        const otp = generateOtp().toString();\n        let Model;\n        switch (userType) {\n        case \"STAFF\": Model = Staff; break;\n        case \"STUDENT\": Model = Student; break;\n        default: return fail(res, 422, `Invalid user_type ${userType}`);\n        }\n\n        const otpHash = hash(otp);\n        const query = { phone };\n        const update = { otp: otpHash, otp_access: true, $inc: { otp_count: 1 } };\n        const user = await Model.findOneAndUpdate(query, update, { new: true });\n        console.log(\"User =>\", user);\n        if (user == null) {\n            return notFound(res, `User not found with phone number, ${phone}`);\n        }\n        const send = await sendSmsAsync(phone, `Use your phone number and this OTP ${otp} \n        to login as a one-time password`);\n        const { sid } = send;\n        if (!sid) return fail(res, 422, \"Error sending message\");\n        const record = { recipient: phone, message: otp, sid, direction: \"OUTBOUND\" };\n        const newRecord = new Sms(record);\n        const result1 = await newRecord.save();\n        console.log(result1);\n        return success(res, 201, send.to, \"Operation was successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    data.direction = \"OUTBOUND\";\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    // eslint-disable-next-line max-len\n    const { recipient: recipientArray } = data;\n    try {\n        const user = await Staff.findOne({ _id: data.created_by }).exec();\n        const sentSms = await Sms.count({ created_by: data.created_by });\n        const myArray = stringToArrayPhone(recipientArray) || [];\n        const sendingSms = myArray.length;\n        const totalSms = sentSms + sendingSms;\n        if (totalSms > user.sms_units) {\n            return fail(res, 422, `Error! You have ${user.sms_units} units left. You cannot send ${sendingSms}`);\n            // console.log(`You have ${user.sms_units}Units left. You cannot send ${sendingSms}`);\n        }\n        const resolvedFinalArray = await Promise.all(myArray.map(async (phone) => {\n            const send = await sendSmsAsync(phone, data.message);\n            data.sid = send.sid;\n            data.recipient = phone;\n            const newRecord = new Sms(data);\n            const result = await newRecord.save();\n            return result; // important to return the value\n        }));\n\n        const data2 = { sms_units: (user.sms_units - sendingSms) };\n        const result2 = await Staff.findOneAndUpdate({ _id: data.created_by },\n            data2, { new: true });\n        console.log(result2.sms_units);\n        return success(res, 201, resolvedFinalArray, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function createWebhook(req, res) {\n    const data = req.body;\n    receiveSms(req, res);\n    logger.info(\"Operation was successful\", data);\n}\n"]}
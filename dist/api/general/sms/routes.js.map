{"version":3,"sources":["../../../../src/api/general/sms/routes.js"],"names":["express","checkAuth","isValidStaff","fetchRecord","createRecord","createWebhook","createOtp","router","Router","get","post"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mCAAxC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,aAApC,EAAmDC,SAAnD,QAAoE,cAApE;;AAEA,MAAMC,SAASP,QAAQQ,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAD,OAAOE,GAAP,CAAW,MAAX,EAAmB,CAACR,SAAD,EAAYC,YAAZ,CAAnB,EAA8CC,WAA9C;;AAEA;;;;;;;;;;;;;;;AAeAI,OAAOG,IAAP,CAAY,MAAZ,EAAoB,CAACT,SAAD,EAAYC,YAAZ,CAApB,EAA+CE,YAA/C;;AAEA;;;;;;;;;;;AAWAG,OAAOG,IAAP,CAAY,UAAZ,EAAwBJ,SAAxB;;AAEA;;;;;;;;;;;;;;;AAeAC,OAAOG,IAAP,CAAY,cAAZ,EAA4BL,aAA5B;;AAEA,eAAeE,MAAf","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, createWebhook, createOtp } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/sms?id={recordId} Retrieve SMS records\n * @apiName RetrieveSms\n * @apiGroup Sms\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/sms?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/sms\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/sms Create an SMS record\n * @apiName CreateSms\n * @apiGroup Sms\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recipient Sms recipient\n * @apiParam {String} sender Sms sender phone number\n * @apiParam {String} message Sms message\n * @apiParam {String} direction Sms direction INBOUND|OUTBOUND\n * @apiParam {String} delivery_status Sms delivery status\n * @apiSuccess {Object} Sms Sms's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Sms not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/sms\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {post} /api/sms/otp Create send SMS otp\n * @apiName CreateSmsOtp\n * @apiGroup Sms\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} phone Registered user (office) phone number\n * @apiParam {String} user_type Registered user_type staff|supplier|partner|customer\n * @apiSuccess {Object} Sms Sms's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Sms not found.\n */\nrouter.post(\"/sms/otp\", createOtp);\n\n/**\n * @api {post} /api/sms/webhook Create incoming SMS webhook\n * @apiName CreateSmsWebhook\n * @apiGroup Sms\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} sender Sms sender phone number\n * @apiParam {String} recipient Sms recipient phone number\n * @apiParam {String} message Sms message\n * @apiParam {String} direction Sms direction INBOUND|OUTBOUND\n * @apiParam {String} delivery_status Sms delivery status: queued|failed|sent|delivered|undelivered\n * @apiSuccess {Object} Sms Sms's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Sms not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/sms/webhook\", createWebhook);\n\nexport default router;\n"]}
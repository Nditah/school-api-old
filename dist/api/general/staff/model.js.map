{"version":3,"sources":["../../../../src/api/general/staff/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","serial","category","title","surname","required","other_name","gender","birth_date","date","marital_status","children","number","phone_personal","address","village","state_id","county_id","country_iso2","otp_count","kin","kin_phone","kin_address","guarantor1","guarantor1_phone","guarantor1_address","guarantor2","guarantor2_phone","guarantor2_address","profession","qualification","institution","employment_status","Object","values","EMPLOYMENT_STATUS","tax","basic_salary","bonus","entertainment_allowance","house_allowance","lunch_allowance","medical_allowance","transport_allowance","utility_allowance","welfare_allowance","pension","assurance","bank_id","bank_account_number","bank_account_name","rank","office_id","role","array","superior_id","subsidiary","SUBSIDIARY","terminal_id","vehicle_id","notice","rating_ids","remark","photo","is_salary_payable","boolean","is_document_complete","access_level","approved_by","approved_date","disengaged_by","disengaged_date","created_by","schemaUpdate","updated_by","schema","String","enum","GENDER","default","MALE","Date","MARITAL_STATUS","unique","alias","ref","lowercase","match","Number","otp_access","Boolean","asset_assigment_ids","last_login","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","set","plugin","mongoose_csv","Staff","model","findOne","then","user","console","log","table","newRecord","save","catch","__dirname","err","message","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {String} id Staff ObjectId primaryKey\n * @property {String} serial Staff serial (optional)\n * @property {String} category Staff category (optional)\n * @property {String} title Staff title (optional)\n * @property {String} surname Staff surname (required)\n * @property {String} other_name Staff other_name (required)\n * @property {String} gender Staff gender (required)\n * @property {Date} birth_date Staff birth_date (required)\n * @property {String} marital_status Staff marital_status (required)\n * @property {Number} children Staff Number of children (optional)\n * @property {String} phone Staff office phone (required)\n * @property {String} phone_personal Staff phone_personal (optional)\n * @property {String} address Staff address (optional)\n * @property {String} village Staff village (optional)\n * @property {String} state_id Staff state_id (required)\n * @property {String} county_id Staff county_id (required)\n * @property {String} country_iso2 Staff country_iso2 (optional)\n * @property {String} email Staff email (optional)\n * @property {String} password Staff password (optional)\n * @property {String} otp Staff otp (optional)\n * @property {Number} otp_count Staff otp_count (optional)\n * @property {String} kin Staff kin (required)\n * @property {String} kin_phone Staff kin_phone (required)\n * @property {String} kin_address Staff kin_address (required)\n * @property {String} guarantor1 Staff guarantor1 (required)\n * @property {String} guarantor1_phone Staff guarantor1_phone (required)\n * @property {String} guarantor1_address Staff guarantor1_address (required)\n * @property {String} guarantor2 Staff guarantor2 (optional)\n * @property {String} guarantor2_phone Staff guarantor2_phone (optional)\n * @property {String} guarantor2_address Staff guarantor2_address (optional)\n * @property {String} profession Staff profession (optional)\n * @property {String} qualification Staff qualification (optional)\n * @property {String} institution Staff institution (optional)\n * @property {String} employment_status Staff employment_status (required)\n * @property {Number} tax Staff tax (optional)\n * @property {Number} basic_salary Staff basic_salary (optional)\n * @property {Number} bonus Staff bonus (optional)\n * @property {Number} entertainment_allowance Staff entertainment_allowance (optional)\n * @property {Number} house_allowance Staff house_allowance (optional)\n * @property {Number} lunch_allowance Staff lunch_allowance (optional)\n * @property {Number} medical_allowance Staff medical_allowance (optional)\n * @property {Number} transport_allowance Staff transport_allowance (optional)\n * @property {Number} utility_allowance Staff utility_allowance (optional)\n * @property {Number} welfare_allowance Staff welfare_allowance (optional)\n * @property {Number} pension Staff pension (optional)\n * @property {Number} assurance Staff assurance (optional)\n * @property {String} bank_id Staff bank_id (optional)\n * @property {String} bank_account_number Staff bank_account_number (optional)\n * @property {String} bank_account_name Staff bank_account_name (optional)\n * @property {String} rank Staff rank (optional)\n * @property {String} office_id Staff office_id (required)\n * @property {Array} role Staff role is an array of office duties (required)\n * @property {String} superior_id Staff superior_id (required)\n * @property {String} subsidiary Staff subsidiary (required)\n * @property {String} terminal_id Staff terminal_id (required)\n * @property {String} vehicle_id Staff vehicle_id (optional)\n * @property {Array} asset_assigment_ids array of Objects of Asset Assigmnet History\n * managed my Asset Manager (prohibited)\n * @property {String} notice Staff notice (optional)\n * @property {Array} rating_ids Staff rating_ids (optional)\n * @property {String} remark Staff remark (optional)\n * @property {String} photo Staff photo (optional)\n * @property {Boolean} is_salary_payable Staff is_salary_payable (optional)\n * @property {Boolean} is_document_complete Staff is_document_complete (optional)\n * @property {Number} access_level Staff access_level (optional)\n * @property {String} approved_by Staff approved_by (optional)\n * @property {Date} approved_date Staff approved_date (optional)\n * @property {String} disengaged_by Staff disengaged_by (optional)\n * @property {Date} disengaged_date Staff disengaged_date (optional)\n * @property {String} created_by Staff record created by\n * @property {String} updated_by Staff record modified by\n * @description Staff holds record of all cities with terminal_list\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, GENDER, MARITAL_STATUS, EMPLOYMENT_STATUS, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\nimport State from \"../state/model\";\nimport County from \"../county/model\";\nimport Office from \"../office/model\";\nimport Vehicle from \"../vehicle/model\";\nimport Bank from \"../bank/model\";\nimport Rating from \"../rating/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    serial: Joi.string().optional(),\n    category: Joi.string().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().required(),\n    other_name: Joi.string().required(),\n    gender: Joi.string().required(),\n    birth_date: Joi.date().required(),\n    marital_status: Joi.string().required(),\n    children: Joi.number().optional(),\n    phone: Joi.string().required(),\n    phone_personal: Joi.string().optional(),\n    address: Joi.string().optional(),\n    village: Joi.string().optional(),\n    state_id: Joi.string().required(),\n    county_id: Joi.string().required(),\n    country_iso2: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    kin: Joi.string().required(),\n    kin_phone: Joi.string().required(),\n    kin_address: Joi.string().required(),\n    guarantor1: Joi.string().required(),\n    guarantor1_phone: Joi.string().required(),\n    guarantor1_address: Joi.string().required(),\n    guarantor2: Joi.string().optional(),\n    guarantor2_phone: Joi.string().optional(),\n    guarantor2_address: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    qualification: Joi.string().optional(),\n    institution: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    tax: Joi.number().optional(),\n    basic_salary: Joi.number().optional(),\n    bonus: Joi.number().optional(),\n    entertainment_allowance: Joi.number().optional(),\n    house_allowance: Joi.number().optional(),\n    lunch_allowance: Joi.number().optional(),\n    medical_allowance: Joi.number().optional(),\n    transport_allowance: Joi.number().optional(),\n    utility_allowance: Joi.number().optional(),\n    welfare_allowance: Joi.number().optional(),\n    pension: Joi.number().optional(),\n    assurance: Joi.number().optional(),\n    bank_id: Joi.string().optional(),\n    bank_account_number: Joi.string().optional(),\n    bank_account_name: Joi.string().optional(),\n    rank: Joi.string().optional(),\n    office_id: Joi.string().required(),\n    role: Joi.array().optional(),\n    superior_id: Joi.string().required(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\n    terminal_id: Joi.string().required(),\n    vehicle_id: Joi.string().optional(),\n    notice: Joi.string().optional(),\n    rating_ids: Joi.array().optional(),\n    remark: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    is_salary_payable: Joi.boolean().optional(),\n    is_document_complete: Joi.boolean().optional(),\n    access_level: Joi.string().optional(),\n    approved_by: Joi.string().optional(),\n    approved_date: Joi.date().optional(),\n    disengaged_by: Joi.string().optional(),\n    disengaged_date: Joi.date().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    serial: Joi.string().optional(),\n    category: Joi.string().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    other_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    children: Joi.number().optional(),\n    phone: Joi.string().optional(),\n    phone_personal: Joi.string().optional(),\n    address: Joi.string().optional(),\n    village: Joi.string().optional(),\n    state_id: Joi.string().optional(),\n    county_id: Joi.string().optional(),\n    country_iso2: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    kin: Joi.string().optional(),\n    kin_phone: Joi.string().optional(),\n    kin_address: Joi.string().optional(),\n    guarantor1: Joi.string().optional(),\n    guarantor1_phone: Joi.string().optional(),\n    guarantor1_address: Joi.string().optional(),\n    guarantor2: Joi.string().optional(),\n    guarantor2_phone: Joi.string().optional(),\n    guarantor2_address: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    qualification: Joi.string().optional(),\n    institution: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    tax: Joi.number().optional(),\n    basic_salary: Joi.number().optional(),\n    bonus: Joi.number().optional(),\n    entertainment_allowance: Joi.number().optional(),\n    house_allowance: Joi.number().optional(),\n    lunch_allowance: Joi.number().optional(),\n    medical_allowance: Joi.number().optional(),\n    transport_allowance: Joi.number().optional(),\n    utility_allowance: Joi.number().optional(),\n    welfare_allowance: Joi.number().optional(),\n    pension: Joi.number().optional(),\n    assurance: Joi.number().optional(),\n    bank_id: Joi.string().optional(),\n    bank_account_number: Joi.string().optional(),\n    bank_account_name: Joi.string().optional(),\n    rank: Joi.string().optional(),\n    office_id: Joi.string().optional(),\n    role: Joi.array().optional(),\n    superior_id: Joi.string().optional(),\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\n    terminal_id: Joi.string().optional(),\n    vehicle_id: Joi.string().optional(),\n    notice: Joi.string().optional(),\n    rating_ids: Joi.array().optional(),\n    remark: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    is_salary_payable: Joi.boolean().optional(),\n    is_document_complete: Joi.boolean().optional(),\n    access_level: Joi.string().optional(),\n    approved_by: Joi.string().optional(),\n    approved_date: Joi.date().optional(),\n    disengaged_by: Joi.string().optional(),\n    disengaged_date: Joi.date().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    serial: { type: String },\n    category: { type: String },\n    title: { type: String },\n    surname: { type: String, required: [false, \"Why no surname?\"] },\n    other_name: { type: String, required: [false, \"Why no other_name?\"] },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        default: GENDER.MALE,\n        required: [false, \"Why no gender?\"],\n    },\n    birth_date: { type: Date, required: [false, \"Why no birth_date?\"] },\n    marital_status: {\n        type: String,\n        enum: Object.values(MARITAL_STATUS),\n        required: [false, \"Why no marital_status?\"],\n    },\n    children: { type: String },\n    phone: {\n        type: String,\n        required: [false, \"Why no offical phone?\"],\n        unique: true,\n        alias: \"phone_office\",\n    },\n    phone_personal: {\n        type: String,\n        required: [false, \"Why no personal phone?\"],\n        alias: \"phone_home\",\n    },\n    address: { type: String },\n    village: { type: String },\n    state_id: { type: ObjectId, ref: \"State\", required: [false, \"Why no input?\"] },\n    county_id: { type: ObjectId, ref: \"County\", required: [false, \"Why no input?\"] },\n    country_iso2: { type: String, required: [false, \"Why no input?\"], default: \"ng\" },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    password: { type: String },\n    otp: { type: String },\n    otp_count: { type: Number, required: [false, \"Why no input?\"], default: 0 },\n    otp_access: { type: Boolean, default: false },\n    kin: { type: String, required: [false, \"Why no input?\"] },\n    kin_phone: { type: String, required: [false, \"Why no input?\"] },\n    kin_address: { type: String, required: [false, \"Why no input?\"] },\n    guarantor1: { type: String, required: [false, \"Why no input?\"] },\n    guarantor1_phone: { type: String, required: [false, \"Why no input?\"] },\n    guarantor1_address: { type: String, required: [false, \"Why no input?\"] },\n    guarantor2: { type: String },\n    guarantor2_phone: { type: String },\n    guarantor2_address: { type: String },\n    profession: { type: String },\n    qualification: { type: String },\n    institution: { type: String },\n    employment_status: {\n        type: String,\n        enum: Object.values(EMPLOYMENT_STATUS),\n        required: [false, \"Why no input?\"],\n    },\n    tax: { type: Number, default: 0.0 },\n    basic_salary: { type: Number, default: 0.0 },\n    bonus: { type: Number, default: 0.0 },\n    entertainment_allowance: { type: Number, default: 0.0 },\n    house_allowance: { type: Number, default: 0.0 },\n    lunch_allowance: { type: Number, default: 0.0 },\n    medical_allowance: { type: Number, default: 0.0 },\n    transport_allowance: { type: Number, default: 0.0 },\n    utility_allowance: { type: Number, default: 0.0 },\n    welfare_allowance: { type: Number, default: 0.0 },\n    pension: { type: Number, default: 0.0 },\n    assurance: { type: Number, default: 0.0 },\n    bank_id: { type: ObjectId, ref: \"Bank\" },\n    bank_account_number: { type: String },\n    bank_account_name: { type: String },\n    rank: { type: String },\n    office_id: { type: ObjectId, ref: \"Office\", required: [false, \"Why no input?\"] },\n    role: [{ type: ObjectId, ref: \"Office\", required: true }],\n    superior_id: { type: ObjectId, ref: \"Staff\", required: [false, \"Why no input?\"] },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    terminal_id: { type: ObjectId, ref: \"Terminal\", required: [false, \"Why no input?\"] },\n    vehicle_id: { type: ObjectId, ref: \"Vehicle\" },\n    asset_assigment_ids: [{ type: ObjectId, ref: \"AssetAssignment\" }],\n    notice: { type: String },\n    rating_ids: [{ type: ObjectId, ref: \"Rating\" }],\n    remark: { type: String },\n    photo: { type: String },\n    is_salary_payable: { type: Boolean, default: false, required: [false, \"Why no input?\"] },\n    is_document_complete: { type: Boolean, default: false, required: [false, \"Why no input?\"] },\n    access_level: { type: String, default: \"0\", required: [false, \"Why no input?\"] },\n    approved_by: { type: ObjectId, ref: \"Staff\" },\n    approved_date: { type: Date },\n    disengaged_by: { type: ObjectId, ref: \"Staff\" },\n    disengaged_date: { type: Date },\n    last_login: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.index({ phone: 1, email: 1 }, { unique: true });\nnewSchema.set(\"collection\", \"staff\");\nnewSchema.plugin(mongoose_csv);\n\nconst Staff = mongoose.model(\"Staff\", newSchema);\n\nStaff.findOne({ email: \"admin@royalacademy.ng\" })\n    .then((user) => {\n        if (!user) {\n            console.log(table[ 0 ]);\n            const newRecord = new Staff(table[ 0 ]);\n            newRecord.save();\n            delete table[ 0 ];\n        }\n    })\n    .catch(err => console.log(__dirname, err.message));\n\nif (preload) { Staff.insertMany(table); }\n\nexport default Staff;\n"]}
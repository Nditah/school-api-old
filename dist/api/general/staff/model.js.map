{"version":3,"sources":["../../../../src/api/general/staff/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","title","surname","given_name","gender","birth_date","date","marital_status","phone_personal","address","state","county","staff_type","classe","subject","kin","kin_phone","kin_address","guarantor1","guarantor1_phone","guarantor1_address","guarantor2","guarantor2_phone","guarantor2_address","profession","qualification","employment_status","Object","values","EMPLOYMENT_STATUS","tax","number","basic_salary","bonus","entertainment_allowance","house_allowance","lunch_allowance","medical_allowance","transport_allowance","utility_allowance","welfare_allowance","pension","bank_name","bank_account_number","bank_account_name","rank","office","role","array","subsidiary","SUBSIDIARY","remark","photo","is_salary_payable","boolean","is_document_complete","approved_by","approved_date","disengaged_by","disengaged_date","created_by","required","schemaUpdate","updated_by","schema","String","enum","GENDER","default","MALE","Date","MARITAL_STATUS","unique","alias","lowercase","match","EMPLOYEE_TYPE","ref","Number","Boolean","last_login","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","set","plugin","mongoose_csv","Staff","model","findOne","then","user","console","log","table","newRecord","save","catch","__dirname","err","message","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\r\n/**\r\n * @author 4Decoder\r\n * @property {ObjectId} id Staff ObjectId primaryKey\r\n * @property {String} title Staff title (optional)\r\n * @property {String} surname Staff surname (optional)\r\n * @property {String} given_name Staff surname (optional)\r\n * @property {String} gender Staff gender (optional)\r\n * @property {Date} birth_date Staff birth_date (optional)\r\n * @property {String} marital_status Staff marital_status (optional)\r\n * @property {String} phone Staff office phone (optional)\r\n * @property {String} phone_personal Staff phone_personal (optional)\r\n * @property {String} address Staff address (optional)\r\n * @property {ObjectId} state Staff state (optional)\r\n * @property {ObjectId} county Staff county (optional)\r\n * @property {String} email Staff email (optional)\r\n * @property {String} staff_type Staff staff_type (optional)\r\n * @property {ObjectId} classe Staff classe (optional)\r\n * @property {ObjectId} subject Staff subject (optional)\r\n * @property {String} password Staff password (optional)\r\n * @property {String} kin Staff kin (required)\r\n * @property {String} kin_phone Staff kin_phone (required)\r\n * @property {String} kin_address Staff kin_address (required)\r\n * @property {String} guarantor1 Staff guarantor1 (required)\r\n * @property {String} guarantor1_phone Staff guarantor1_phone (required)\r\n * @property {String} guarantor1_address Staff guarantor1_address (required)\r\n * @property {String} guarantor2 Staff guarantor2 (optional)\r\n * @property {String} guarantor2_phone Staff guarantor2_phone (optional)\r\n * @property {String} guarantor2_address Staff guarantor2_address (optional)\r\n * @property {String} profession Staff profession (optional)\r\n * @property {String} qualification Staff qualification (optional)\r\n * @property {String} employment_status Staff employment_status (required)\r\n * @property {Number} tax Staff tax (optional)\r\n * @property {Number} basic_salary Staff basic_salary (optional)\r\n * @property {Number} bonus Staff bonus (optional)\r\n * @property {Number} entertainment_allowance Staff entertainment_allowance (optional)\r\n * @property {Number} house_allowance Staff house_allowance (optional)\r\n * @property {Number} lunch_allowance Staff lunch_allowance (optional)\r\n * @property {Number} medical_allowance Staff medical_allowance (optional)\r\n * @property {Number} transport_allowance Staff transport_allowance (optional)\r\n * @property {Number} utility_allowance Staff utility_allowance (optional)\r\n * @property {Number} welfare_allowance Staff welfare_allowance (optional)\r\n * @property {Number} pension Staff pension (optional)\r\n * @property {Number} assurance Staff assurance (optional)\r\n * @property {String} bank_name Staff bank_name (optional)\r\n * @property {String} bank_account_number Staff bank_account_number (optional)\r\n * @property {String} bank_account_name Staff bank_account_name (optional)\r\n * @property {String} rank Staff rank (optional)\r\n * @property {ObjectId} office Staff office (required)\r\n * @property {ObjectId} role Staff role is an array of office duties (required)\r\n * @property {String} subsidiary Staff subsidiary (required)\r\n * @property {String} remark Staff remark (optional)\r\n * @property {String} photo Staff photo (optional)\r\n * @property {Boolean} is_salary_payable Staff is_salary_payable (optional)\r\n * @property {Boolean} is_document_complete Staff is_document_complete (optional)\r\n * @property {ObjectId} approved_by Staff approved_by (optional)\r\n * @property {Date} approved_date Staff approved_date (optional)\r\n * @property {ObjectId} disengaged_by Staff disengaged_by (optional)\r\n * @property {Date} disengaged_date Staff disengaged_date (optional)\r\n * @property {ObjectId} created_by Staff record created by\r\n * @property {ObjectId} updated_by Staff record modified by\r\n * @description Staff holds record of all staffs in the school\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE, GENDER, MARITAL_STATUS, EMPLOYMENT_STATUS, SUBSIDIARY, EMPLOYEE_TYPE } from \"../../../constants\";\r\nimport table from \"./table\";\r\nimport State from \"../state/model\";\r\nimport County from \"../county/model\";\r\nimport Office from \"../office/model\";\r\nimport Classe from \"../classe/model\";\r\nimport Subject from \"../subject/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaLogin = {\r\n    email: Joi.string().trim().email().optional(),\r\n    phone: Joi.string().optional(),\r\n    otp: Joi.string().optional(),\r\n    password: Joi.string().optional(),\r\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\r\n};\r\n\r\nexport const schemaCreate = {\r\n    title: Joi.string().optional(),\r\n    surname: Joi.string().optional(),\r\n    given_name: Joi.string().optional(),\r\n    gender: Joi.string().optional(),\r\n    birth_date: Joi.date().optional(),\r\n    marital_status: Joi.string().optional(),\r\n    phone: Joi.string().optional(),\r\n    phone_personal: Joi.string().optional(),\r\n    address: Joi.string().optional(),\r\n    state: Joi.string().optional(),\r\n    county: Joi.string().optional(),\r\n    email: Joi.string().trim().email().optional(),\r\n    staff_type: Joi.string().trim().optional(),\r\n    classe: Joi.string().trim().optional(),\r\n    subject: Joi.string().trim().optional(),\r\n    password: Joi.string().optional(),\r\n    kin: Joi.string().optional(),\r\n    kin_phone: Joi.string().optional(),\r\n    kin_address: Joi.string().optional(),\r\n    guarantor1: Joi.string().optional(),\r\n    guarantor1_phone: Joi.string().optional(),\r\n    guarantor1_address: Joi.string().optional(),\r\n    guarantor2: Joi.string().optional(),\r\n    guarantor2_phone: Joi.string().optional(),\r\n    guarantor2_address: Joi.string().optional(),\r\n    profession: Joi.string().optional(),\r\n    qualification: Joi.string().optional(),\r\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\r\n    tax: Joi.number().optional(),\r\n    basic_salary: Joi.number().optional(),\r\n    bonus: Joi.number().optional(),\r\n    entertainment_allowance: Joi.number().optional(),\r\n    house_allowance: Joi.number().optional(),\r\n    lunch_allowance: Joi.number().optional(),\r\n    medical_allowance: Joi.number().optional(),\r\n    transport_allowance: Joi.number().optional(),\r\n    utility_allowance: Joi.number().optional(),\r\n    welfare_allowance: Joi.number().optional(),\r\n    pension: Joi.number().optional(),\r\n    bank_name: Joi.string().trim().optional(),\r\n    bank_account_number: Joi.number().optional(),\r\n    bank_account_name: Joi.string().optional(),\r\n    rank: Joi.string().optional(),\r\n    office: Joi.string().optional(),\r\n    role: Joi.array().optional(),\r\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\r\n    remark: Joi.string().optional(),\r\n    photo: Joi.string().optional(),\r\n    is_salary_payable: Joi.boolean().optional(),\r\n    is_document_complete: Joi.boolean().optional(),\r\n    approved_by: Joi.string().optional(),\r\n    approved_date: Joi.date().optional(),\r\n    disengaged_by: Joi.string().optional(),\r\n    disengaged_date: Joi.date().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    title: Joi.string().optional(),\r\n    surname: Joi.string().optional(),\r\n    given_name: Joi.string().optional(),\r\n    gender: Joi.string().optional(),\r\n    birth_date: Joi.date().optional(),\r\n    marital_status: Joi.string().optional(),\r\n    phone: Joi.string().optional(),\r\n    phone_personal: Joi.string().optional(),\r\n    address: Joi.string().optional(),\r\n    state: Joi.string().optional(),\r\n    county: Joi.string().optional(),\r\n    email: Joi.string().trim().email().optional(),\r\n    staff_type: Joi.string().trim().optional(),\r\n    classe: Joi.string().trim().optional(),\r\n    subject: Joi.string().trim().optional(),\r\n    password: Joi.string().optional(),\r\n    kin: Joi.string().optional(),\r\n    kin_phone: Joi.string().optional(),\r\n    kin_address: Joi.string().optional(),\r\n    guarantor1: Joi.string().optional(),\r\n    guarantor1_phone: Joi.string().optional(),\r\n    guarantor1_address: Joi.string().optional(),\r\n    guarantor2: Joi.string().optional(),\r\n    guarantor2_phone: Joi.string().optional(),\r\n    guarantor2_address: Joi.string().optional(),\r\n    profession: Joi.string().optional(),\r\n    qualification: Joi.string().optional(),\r\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\r\n    tax: Joi.number().optional(),\r\n    basic_salary: Joi.number().optional(),\r\n    bonus: Joi.number().optional(),\r\n    entertainment_allowance: Joi.number().optional(),\r\n    house_allowance: Joi.number().optional(),\r\n    lunch_allowance: Joi.number().optional(),\r\n    medical_allowance: Joi.number().optional(),\r\n    transport_allowance: Joi.number().optional(),\r\n    utility_allowance: Joi.number().optional(),\r\n    welfare_allowance: Joi.number().optional(),\r\n    pension: Joi.number().optional(),\r\n    bank_name: Joi.string().trim().optional(),\r\n    bank_account_number: Joi.number().optional(),\r\n    bank_account_name: Joi.string().optional(),\r\n    rank: Joi.string().optional(),\r\n    office: Joi.string().optional(),\r\n    role: Joi.array().optional(),\r\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\r\n    remark: Joi.string().optional(),\r\n    photo: Joi.string().optional(),\r\n    is_salary_payable: Joi.boolean().optional(),\r\n    is_document_complete: Joi.boolean().optional(),\r\n    approved_by: Joi.string().optional(),\r\n    approved_date: Joi.date().optional(),\r\n    disengaged_by: Joi.string().optional(),\r\n    disengaged_date: Joi.date().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    title: { type: String },\r\n    surname: { type: String, required: true },\r\n    given_name: { type: String, required: true },\r\n    gender: {\r\n        type: String,\r\n        enum: Object.values(GENDER),\r\n        default: GENDER.MALE,\r\n        required: [false, \"Why no gender?\"],\r\n    },\r\n    birth_date: { type: Date, required: [false, \"Why no birth_date?\"] },\r\n    marital_status: {\r\n        type: String,\r\n        enum: Object.values(MARITAL_STATUS),\r\n        required: [false, \"Why no marital_status?\"],\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: [false, \"Why no offical phone?\"],\r\n        unique: true,\r\n        alias: \"phone_office\",\r\n    },\r\n    phone_personal: {\r\n        type: String,\r\n        required: [false, \"Why no personal phone?\"],\r\n        alias: \"phone_home\",\r\n    },\r\n    address: { type: String },\r\n    state: { type: String, required: [false, \"Why no State?\"] },\r\n    county: { type: String, required: [false, \"Why no Country?\"] },\r\n    email: {\r\n        type: String,\r\n        trim: true,\r\n        lowercase: true,\r\n        unique: true,\r\n        // eslint-disable-next-line no-useless-escape\r\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n            \"Please fill a valid email address\"],\r\n    },\r\n    staff_type: {\r\n        type: String,\r\n        enum: Object.values(EMPLOYEE_TYPE),\r\n        required: [false, \"Why no Type?\"],\r\n    },\r\n    classe: { type: ObjectId, ref: \"Classe\" },\r\n    subject: { type: ObjectId, ref: \"Subject\" },\r\n    password: { type: String },\r\n    kin: { type: String, required: [false, \"Why no input?\"] },\r\n    kin_phone: { type: String, required: [false, \"Why no input?\"] },\r\n    kin_address: { type: String, required: [false, \"Why no input?\"] },\r\n    guarantor1: { type: String, required: [false, \"Why no input?\"] },\r\n    guarantor1_phone: { type: String, required: [false, \"Why no input?\"] },\r\n    guarantor1_address: { type: String, required: [false, \"Why no input?\"] },\r\n    guarantor2: { type: String },\r\n    guarantor2_phone: { type: String },\r\n    guarantor2_address: { type: String },\r\n    profession: { type: String },\r\n    qualification: { type: String },\r\n    employment_status: {\r\n        type: String,\r\n        enum: Object.values(EMPLOYMENT_STATUS),\r\n        required: [false, \"Why no input?\"],\r\n    },\r\n    tax: { type: Number, default: 0.0 },\r\n    basic_salary: { type: Number, default: 0.0 },\r\n    bonus: { type: Number, default: 0.0 },\r\n    entertainment_allowance: { type: Number, default: 0.0 },\r\n    house_allowance: { type: Number, default: 0.0 },\r\n    lunch_allowance: { type: Number, default: 0.0 },\r\n    medical_allowance: { type: Number, default: 0.0 },\r\n    transport_allowance: { type: Number, default: 0.0 },\r\n    utility_allowance: { type: Number, default: 0.0 },\r\n    welfare_allowance: { type: Number, default: 0.0 },\r\n    pension: { type: Number, default: 0.0 },\r\n    bank_name: { type: String },\r\n    bank_account_number: { type: Number },\r\n    bank_account_name: { type: String },\r\n    rank: { type: String },\r\n    office: { type: ObjectId, ref: \"Office\", required: [false, \"Why no input?\"] },\r\n    role: [{ type: ObjectId, ref: \"Office\", required: [false, \"Why no input?\"] }],\r\n    subsidiary: {\r\n        type: String,\r\n        enum: Object.values(SUBSIDIARY),\r\n        required: [false, \"Why no input?\"],\r\n    },\r\n    remark: { type: String },\r\n    photo: { type: String },\r\n    is_salary_payable: { type: Boolean, default: false, required: [false, \"Why no input?\"] },\r\n    is_document_complete: { type: Boolean, default: false, required: [false, \"Why no input?\"] },\r\n    approved_by: { type: ObjectId, ref: \"Staff\" },\r\n    approved_date: { type: Date },\r\n    disengaged_by: { type: ObjectId, ref: \"Staff\" },\r\n    disengaged_date: { type: Date },\r\n    last_login: { type: Date },\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.index({ phone: 1, email: 1 }, { unique: true });\r\nnewSchema.set(\"collection\", \"staff\");\r\nnewSchema.plugin(mongoose_csv);\r\n\r\nconst Staff = mongoose.model(\"Staff\", newSchema);\r\n\r\nStaff.findOne({ email: \"admin@royalacademy.ng\" })\r\n    .then((user) => {\r\n        if (!user) {\r\n            console.log(table[ 0 ]);\r\n            const newRecord = new Staff(table[ 0 ]);\r\n            newRecord.save();\r\n            delete table[ 0 ];\r\n        }\r\n    })\r\n    .catch(err => console.log(__dirname, err.message));\r\n\r\nif (preload) { Staff.insertMany(table); }\r\n\r\nexport default Staff;\r\n"]}
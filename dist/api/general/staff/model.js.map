{"version":3,"sources":["../../../../src/api/general/staff/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","title","surname","middle_name","given_name","gender","birth_date","date","marital_status","phone_personal","address","state","county","staff_type","classe","subject","kin","kin_phone","kin_address","guarantor1","guarantor1_phone","guarantor1_address","guarantor2","guarantor2_phone","guarantor2_address","profession","qualification","employment_status","Object","values","EMPLOYMENT_STATUS","tax","number","basic_salary","bonus","entertainment_allowance","house_allowance","lunch_allowance","medical_allowance","transport_allowance","utility_allowance","welfare_allowance","pension","bank_name","bank_account_number","bank_account_name","rank","office_id","role","array","subsidiary","SUBSIDIARY","remark","photo","is_salary_payable","boolean","is_document_complete","approved_by","approved_date","disengaged_by","disengaged_date","created_by","required","schemaUpdate","updated_by","schema","String","enum","GENDER","default","MALE","Date","MARITAL_STATUS","unique","alias","lowercase","match","EMPLOYEE_TYPE","ref","Number","Boolean","last_login","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","set","plugin","mongoose_csv","Staff","model","findOne","then","user","console","log","table","newRecord","save","catch","__dirname","err","message","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {String} id Staff ObjectId primaryKey\n * @property {String} title Staff title (optional)\n * @property {String} surname Staff surname (optional)\n * @property {String} middle_name Staff middle_name (optional)\n * @property {String} given_name Staff surname (optional)\n * @property {String} gender Staff gender (optional)\n * @property {Date} birth_date Staff birth_date (optional)\n * @property {String} marital_status Staff marital_status (optional)\n * @property {String} phone Staff office phone (optional)\n * @property {String} phone_personal Staff phone_personal (optional)\n * @property {String} address Staff address (optional)\n * @property {String} state Staff state (optional)\n * @property {String} county Staff county (optional)\n * @property {String} email Staff email (optional)\n * @property {String} staff_type Staff staff_type (optional)\n * @property {String} classe Staff classe (optional)\n * @property {String} subject Staff subject (optional)\n * @property {String} password Staff password (optional)\n * @property {String} kin Staff kin (required)\n * @property {String} kin_phone Staff kin_phone (required)\n * @property {String} kin_address Staff kin_address (required)\n * @property {String} guarantor1 Staff guarantor1 (required)\n * @property {String} guarantor1_phone Staff guarantor1_phone (required)\n * @property {String} guarantor1_address Staff guarantor1_address (required)\n * @property {String} guarantor2 Staff guarantor2 (optional)\n * @property {String} guarantor2_phone Staff guarantor2_phone (optional)\n * @property {String} guarantor2_address Staff guarantor2_address (optional)\n * @property {String} profession Staff profession (optional)\n * @property {String} qualification Staff qualification (optional)\n * @property {String} employment_status Staff employment_status (required)\n * @property {Number} tax Staff tax (optional)\n * @property {Number} basic_salary Staff basic_salary (optional)\n * @property {Number} bonus Staff bonus (optional)\n * @property {Number} entertainment_allowance Staff entertainment_allowance (optional)\n * @property {Number} house_allowance Staff house_allowance (optional)\n * @property {Number} lunch_allowance Staff lunch_allowance (optional)\n * @property {Number} medical_allowance Staff medical_allowance (optional)\n * @property {Number} transport_allowance Staff transport_allowance (optional)\n * @property {Number} utility_allowance Staff utility_allowance (optional)\n * @property {Number} welfare_allowance Staff welfare_allowance (optional)\n * @property {Number} pension Staff pension (optional)\n * @property {Number} assurance Staff assurance (optional)\n * @property {String} bank_name Staff bank_name (optional)\n * @property {String} bank_account_number Staff bank_account_number (optional)\n * @property {String} bank_account_name Staff bank_account_name (optional)\n * @property {String} rank Staff rank (optional)\n * @property {String} office_id Staff office_id (required)\n * @property {Array} role Staff role is an array of office duties (required)\n * @property {String} subsidiary Staff subsidiary (required)\n * @property {String} remark Staff remark (optional)\n * @property {String} photo Staff photo (optional)\n * @property {Boolean} is_salary_payable Staff is_salary_payable (optional)\n * @property {Boolean} is_document_complete Staff is_document_complete (optional)\n * @property {String} approved_by Staff approved_by (optional)\n * @property {Date} approved_date Staff approved_date (optional)\n * @property {String} disengaged_by Staff disengaged_by (optional)\n * @property {Date} disengaged_date Staff disengaged_date (optional)\n * @property {String} created_by Staff record created by\n * @property {String} updated_by Staff record modified by\n * @description Staff holds record of all staffs in the school\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, GENDER, MARITAL_STATUS, EMPLOYMENT_STATUS, SUBSIDIARY, EMPLOYEE_TYPE } from \"../../../constants\";\nimport table from \"./table\";\nimport State from \"../state/model\";\nimport County from \"../county/model\";\nimport Office from \"../office/model\";\nimport Classe from \"../classe/model\";\nimport Subject from \"../subject/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    middle_name: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    phone_personal: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    staff_type: Joi.string().trim().optional(),\n    classe: Joi.string().trim().optional(),\n    subject: Joi.string().trim().optional(),\n    password: Joi.string().optional(),\n    kin: Joi.string().optional(),\n    kin_phone: Joi.string().optional(),\n    kin_address: Joi.string().optional(),\n    guarantor1: Joi.string().optional(),\n    guarantor1_phone: Joi.string().optional(),\n    guarantor1_address: Joi.string().optional(),\n    guarantor2: Joi.string().optional(),\n    guarantor2_phone: Joi.string().optional(),\n    guarantor2_address: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    qualification: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    tax: Joi.number().optional(),\n    basic_salary: Joi.number().optional(),\n    bonus: Joi.number().optional(),\n    entertainment_allowance: Joi.number().optional(),\n    house_allowance: Joi.number().optional(),\n    lunch_allowance: Joi.number().optional(),\n    medical_allowance: Joi.number().optional(),\n    transport_allowance: Joi.number().optional(),\n    utility_allowance: Joi.number().optional(),\n    welfare_allowance: Joi.number().optional(),\n    pension: Joi.number().optional(),\n    bank_name: Joi.string().trim().optional(),\n    bank_account_number: Joi.number().optional(),\n    bank_account_name: Joi.string().optional(),\n    rank: Joi.string().optional(),\n    office_id: Joi.string().optional(),\n    role: Joi.array().optional(),\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\n    remark: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    is_salary_payable: Joi.boolean().optional(),\n    is_document_complete: Joi.boolean().optional(),\n    approved_by: Joi.string().optional(),\n    approved_date: Joi.date().optional(),\n    disengaged_by: Joi.string().optional(),\n    disengaged_date: Joi.date().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    middle_name: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    phone_personal: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    staff_type: Joi.string().trim().optional(),\n    classe: Joi.string().trim().optional(),\n    subject: Joi.string().trim().optional(),\n    password: Joi.string().optional(),\n    kin: Joi.string().optional(),\n    kin_phone: Joi.string().optional(),\n    kin_address: Joi.string().optional(),\n    guarantor1: Joi.string().optional(),\n    guarantor1_phone: Joi.string().optional(),\n    guarantor1_address: Joi.string().optional(),\n    guarantor2: Joi.string().optional(),\n    guarantor2_phone: Joi.string().optional(),\n    guarantor2_address: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    qualification: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    tax: Joi.number().optional(),\n    basic_salary: Joi.number().optional(),\n    bonus: Joi.number().optional(),\n    entertainment_allowance: Joi.number().optional(),\n    house_allowance: Joi.number().optional(),\n    lunch_allowance: Joi.number().optional(),\n    medical_allowance: Joi.number().optional(),\n    transport_allowance: Joi.number().optional(),\n    utility_allowance: Joi.number().optional(),\n    welfare_allowance: Joi.number().optional(),\n    pension: Joi.number().optional(),\n    bank_name: Joi.string().trim().optional(),\n    bank_account_number: Joi.number().optional(),\n    bank_account_name: Joi.string().optional(),\n    rank: Joi.string().optional(),\n    office_id: Joi.string().optional(),\n    role: Joi.array().optional(),\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\n    remark: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    is_salary_payable: Joi.boolean().optional(),\n    is_document_complete: Joi.boolean().optional(),\n    approved_by: Joi.string().optional(),\n    approved_date: Joi.date().optional(),\n    disengaged_by: Joi.string().optional(),\n    disengaged_date: Joi.date().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    title: { type: String },\n    surname: { type: String, required: true },\n    given_name: { type: String, required: true },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        default: GENDER.MALE,\n        required: [false, \"Why no gender?\"],\n    },\n    birth_date: { type: Date, required: [false, \"Why no birth_date?\"] },\n    marital_status: {\n        type: String,\n        enum: Object.values(MARITAL_STATUS),\n        required: [false, \"Why no marital_status?\"],\n    },\n    phone: {\n        type: String,\n        required: [false, \"Why no offical phone?\"],\n        unique: true,\n        alias: \"phone_office\",\n    },\n    phone_personal: {\n        type: String,\n        required: [false, \"Why no personal phone?\"],\n        alias: \"phone_home\",\n    },\n    address: { type: String },\n    state: { type: String, required: [false, \"Why no State?\"] },\n    county: { type: String, required: [false, \"Why no Country?\"] },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    staff_type: {\n        type: String,\n        enum: Object.values(EMPLOYEE_TYPE),\n        required: [false, \"Why no Type?\"],\n    },\n    classe: { type: ObjectId, ref: \"Classe\" },\n    subject: { type: ObjectId, ref: \"Subject\" },\n    password: { type: String },\n    kin: { type: String, required: [false, \"Why no input?\"] },\n    kin_phone: { type: String, required: [false, \"Why no input?\"] },\n    kin_address: { type: String, required: [false, \"Why no input?\"] },\n    guarantor1: { type: String, required: [false, \"Why no input?\"] },\n    guarantor1_phone: { type: String, required: [false, \"Why no input?\"] },\n    guarantor1_address: { type: String, required: [false, \"Why no input?\"] },\n    guarantor2: { type: String },\n    guarantor2_phone: { type: String },\n    guarantor2_address: { type: String },\n    profession: { type: String },\n    qualification: { type: String },\n    employment_status: {\n        type: String,\n        enum: Object.values(EMPLOYMENT_STATUS),\n        required: [false, \"Why no input?\"],\n    },\n    tax: { type: Number, default: 0.0 },\n    basic_salary: { type: Number, default: 0.0 },\n    bonus: { type: Number, default: 0.0 },\n    entertainment_allowance: { type: Number, default: 0.0 },\n    house_allowance: { type: Number, default: 0.0 },\n    lunch_allowance: { type: Number, default: 0.0 },\n    medical_allowance: { type: Number, default: 0.0 },\n    transport_allowance: { type: Number, default: 0.0 },\n    utility_allowance: { type: Number, default: 0.0 },\n    welfare_allowance: { type: Number, default: 0.0 },\n    pension: { type: Number, default: 0.0 },\n    bank_name: { type: String },\n    bank_account_number: { type: Number },\n    bank_account_name: { type: String },\n    rank: { type: String },\n    office_id: { type: ObjectId, ref: \"Office\", required: [false, \"Why no input?\"] },\n    role: [{ type: ObjectId, ref: \"Office\", required: [false, \"Why no input?\"] }],\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    remark: { type: String },\n    photo: { type: String },\n    is_salary_payable: { type: Boolean, default: false, required: [false, \"Why no input?\"] },\n    is_document_complete: { type: Boolean, default: false, required: [false, \"Why no input?\"] },\n    approved_by: { type: ObjectId, ref: \"Staff\" },\n    approved_date: { type: Date },\n    disengaged_by: { type: ObjectId, ref: \"Staff\" },\n    disengaged_date: { type: Date },\n    last_login: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.index({ phone: 1, email: 1 }, { unique: true });\nnewSchema.set(\"collection\", \"staff\");\nnewSchema.plugin(mongoose_csv);\n\nconst Staff = mongoose.model(\"Staff\", newSchema);\n\nStaff.findOne({ email: \"admin@royalacademy.ng\" })\n    .then((user) => {\n        if (!user) {\n            console.log(table[ 0 ]);\n            const newRecord = new Staff(table[ 0 ]);\n            newRecord.save();\n            delete table[ 0 ];\n        }\n    })\n    .catch(err => console.log(__dirname, err.message));\n\nif (preload) { Staff.insertMany(table); }\n\nexport default Staff;\n"]}
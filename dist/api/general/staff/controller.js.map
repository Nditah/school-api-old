{"version":3,"sources":["../../../../src/api/general/staff/controller.js"],"names":["Joi","log4js","aqp","Staff","schemaCreate","schemaUpdate","schemaLogin","success","fail","notFound","isObjecId","hasProp","hash","STATUS_MSG","staffAuthenticate","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecord","req","res","query","filter","skip","limit","sort","projection","searchString","q","$text","$search","result","find","populate","select","exec","info","SUCCESS","DEFAULT","err","error","message","createRecord","data","body","password","validate","email","phone","duplicate","findOne","$or","newRecord","save","updateRecord","recordId","id","params","findOneAndUpdate","_id","new","deleteRecord","findOneAndRemove","login","then","token","user","catch"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Staff, { schemaCreate, schemaUpdate, schemaLogin } from \"./model\";\nimport { success, fail, notFound, isObjecId, hasProp, hash } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport { staffAuthenticate } from \"../../../services\";\n\n// Logging\nconst logger = log4js.getLogger(\"[staff]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/staff.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Staff.find(filter)\n            .populate(\"terminal_id\")\n            .populate(\"office_id\")\n            .populate(\"role\")\n            .populate(\"bank_id\")\n            .populate(\"vehicle_id\")\n            .populate(\"asset_assigment_ids\")\n            .populate(\"rating_ids\")\n            .populate(\"state_id\")\n            .populate(\"county_id\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    if (hasProp(data, \"password\")) data.password = hash(req.body.password);\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const { email, phone } = data;\n    const duplicate = await Staff.findOne({ $or: [{ email }, { phone }] }).exec();\n    if (duplicate) {\n        return fail(res, 422, `Error! Record already exist for ${email} or ${phone}`);\n    }\n    const newRecord = new Staff(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    if (hasProp(data, \"password\")) data.password = hash(req.body.password);\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Staff.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Staff.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 204, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\nexport async function login(req, res) {\n    const { error } = Joi.validate(req.body, schemaLogin);\n    if (error) return fail(res, 222, `Error validating request data. ${error.message}`);\n    return staffAuthenticate(req.body)\n        .then(({ token, user }) => success(res, 201, { token, user }, \"Login was successful!\"))\n        .catch(err => fail(res, 500, err.message));\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/assessment/routes.js"],"names":["router","express","Router","get","checkAuth","fetchRecord","post","isValidCustomer","createRecord","put","isValidStaff","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,cAAX,EAA2B,CAACC,wBAAD,CAA3B,EAAwCC,uBAAxC;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAL,OAAOM,IAAP,CAAY,cAAZ,EAA4B,CAACF,wBAAD,EAAYG,8BAAZ,CAA5B,EAA0DC,wBAA1D;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBAR,OAAOS,GAAP,CAAW,wBAAX,EAAqC,CAACL,wBAAD,EAAYM,2BAAZ,CAArC,EAAgEC,wBAAhE;;AAEA;;;;;;;;;;AAUAX,OAAOY,MAAP,CAAc,wBAAd,EAAwC,CAACR,wBAAD,EAAYM,2BAAZ,CAAxC,EAAmEG,wBAAnE;;kBAEeb,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff, isValidCustomer } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/assessments?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveAssessments\r\n * @apiGroup Assessment\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/assessments?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records  of permissible api routes staff can access\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/assessments\", [checkAuth], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/assessments Create assessments\r\n * @apiName CreateAssessment\r\n * @apiGroup Assessment\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} code Assessment code\r\n * @apiParam {String} code Assessment code \"TEST|CA|EXAM\"\r\n * @apiParam {String} mode Assessment mode \"ORAL|PAPER|CBT|DEMO\"\r\n * @apiParam {Date} written_date Assessment written_date\r\n * @apiParam {Date} started_at Assessment started dateime\r\n * @apiParam {Date} ended_at Assessment ended dateime\r\n * @apiParam {Number} duration Assessment duration\r\n * @apiParam {ObjectId} course Assessment course\r\n * @apiParam {ObjectId} examiner Assessment examiner ObjectId\r\n * @apiParam {Array} questionnaires Assessment questionnaires array of ObjectId\r\n * @apiParam {ObjectId} classroom Assessmentclassroom or venue ObjectId\r\n * @apiParam {String} students Assessment students or candidates array ObjectId\r\n * @apiParam {String} status Assessment status \"PENDING|DONE|CLOSED\"\r\n * @apiSuccess {Object} Assessment Assessment's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Assessment not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/assessments\", [checkAuth, isValidCustomer], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/assessments/{recordId} Update assessments\r\n * @apiName UpdateAssessment\r\n * @apiGroup Assessment\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {ObjectId} recordId record ObjectId.\r\n * @apiParam {String} code Assessment code\r\n * @apiParam {String} code Assessment code \"TEST|CA|EXAM\"\r\n * @apiParam {String} mode Assessment mode \"ORAL|PAPER|CBT|DEMO\"\r\n * @apiParam {Date} written_date Assessment written_date\r\n * @apiParam {Date} started_at Assessment started dateime\r\n * @apiParam {Date} ended_at Assessment ended dateime\r\n * @apiParam {Number} duration Assessment duration\r\n * @apiParam {ObjectId} course Assessment course\r\n * @apiParam {ObjectId} examiner Assessment examiner ObjectId\r\n * @apiParam {Array} questionnaires Assessment questionnaires array of ObjectId\r\n * @apiParam {ObjectId} classroom Assessmentclassroom or venue ObjectId\r\n * @apiParam {String} students Assessment students or candidates array ObjectId\r\n * @apiParam {String} status Assessment status \"PENDING|DONE|CLOSED\"\r\n * @apiSuccess {Object} Assessment Assessment's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Assessment not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/assessments/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/assessments/{recordId} Delete assessments\r\n * @apiName DeleteAssessment\r\n * @apiGroup Assessment\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {ObjectId} recordId record ObjectId.\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Assessment not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.delete(\"/assessments/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
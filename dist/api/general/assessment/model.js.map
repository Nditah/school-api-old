{"version":3,"sources":["../../../../src/api/general/assessment/model.js"],"names":["Schema","mongoose","ObjectId","Types","assessmentSchemaCreate","code","Joi","string","required","type","valid","mode","written_date","date","optional","started_at","ended_at","duration","number","course","examiner","questionnaires","classroom","created_by","assessmentSchemaUpdate","students","array","status","updated_by","assessmentSchema","String","enum","Date","Number","comment","ref","default","deleted","Boolean","deleted_at","options","DATABASE","OPTIONS","newAssessmentSchema","set","Assessment","model","assessmentSittingSchemaCreate","student","assessment","assessmentSittingSchemaUpdate","responses","score","assessmentSittingSchema","now","question","answer","correct","time","newAssessmentSittingSchema","AssessmentSitting"],"mappings":"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","file":"model.js","sourcesContent":["/**\r\n * @author 4Dcoder\r\n * @property {ObjectId} id Assessment primaryKey\r\n * @property {String} code Assessment code\r\n * @property {String} code Assessment code \"TEST|CA|EXAM\"\r\n * @property {String} mode Assessment mode \"ORAL|PAPER|CBT|DEMO\"\r\n * @property {Date} written_date Assessment written_date\r\n * @property {Date} started_at Assessment started dateime\r\n * @property {Date} ended_at Assessment ended dateime\r\n * @property {Number} duration Assessment duration\r\n * @property {ObjectId} course Assessment course\r\n * @property {ObjectId} examiner Assessment examiner ObjectId\r\n * @property {Array} questionnaires Assessment questionnaires array of ObjectId\r\n * @property {ObjectId} classroom Assessmentclassroom or venue ObjectId\r\n * @property {String} students Assessment students or candidates array ObjectId\r\n * @property {String} status Assessment status \"PENDING|OPEN|CLOSED\"\r\n * @property {Boolean} deleted Assessment delete status\r\n * @property {ObjectId} created_by Assessment created Staff\r\n * @property {ObjectId} updated_by Assessment updated Staff\r\n * @description Assessment records evaluation of students for courses\r\n */\r\n\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE } from \"../../../constants\";\r\nimport Staff from \"../staff/model\";\r\nimport Student from \"../student/model\";\r\nimport Course from \"../course/model\";\r\nimport Questionnaire from \"../questionnaire/model\";\r\nimport Classroom from \"../classroom/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const assessmentSchemaCreate = {\r\n    code: Joi.string().required(),\r\n    type: Joi.string().valid([\"TEST\", \"CA\", \"EXAM\"]).required(),\r\n    mode: Joi.string().valid([\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"]).required(),\r\n    written_date: Joi.date().optional(),\r\n    started_at: Joi.date().optional(),\r\n    ended_at: Joi.date().optional(),\r\n    duration: Joi.number().optional(),\r\n    course: Joi.string().required(),\r\n    examiner: Joi.string().required(),\r\n    questionnaires: Joi.string().optional(),\r\n    classroom: Joi.string().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const assessmentSchemaUpdate = {\r\n    code: Joi.string().optional(),\r\n    type: Joi.string().valid([\"TEST\", \"CA\", \"EXAM\"]).optional(),\r\n    mode: Joi.string().valid([\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"]).optional(),\r\n    written_date: Joi.date().optional(),\r\n    started_at: Joi.date().optional(),\r\n    ended_at: Joi.date().optional(),\r\n    duration: Joi.number().optional(),\r\n    course: Joi.string().optional(),\r\n    examiner: Joi.string().optional(),\r\n    questionnaires: Joi.string().optional(),\r\n    classroom: Joi.string().optional(),\r\n    students: Joi.array().optional(),\r\n    status: Joi.string().valid([\"PENDING\", \"OPEN\", \"CLOSED\"]).optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const assessmentSchema = {\r\n    code: { type: String, required: true },\r\n    type: { type: String, enum: [\"TEST\", \"CA\", \"EXAM\"], required: true },\r\n    mode: { type: String, enum: [\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"], required: true },\r\n    written_date: { type: Date },\r\n    started_at: { type: Date },\r\n    ended_at: { type: Date },\r\n    duration: { type: Number, comment: \"Minutes\" },\r\n    course: { type: ObjectId, ref: \"Course\", required: true },\r\n    examiner: { type: ObjectId, ref: \"Staff\" },\r\n    questionnaires: [{ type: ObjectId, ref: \"Questionnaire\" }],\r\n    classroom: { type: ObjectId, ref: \"Classroom\", comment: \"Venue\" },\r\n    students: [{ type: ObjectId, ref: \"Student\" }],\r\n    status: { type: String, enum: [\"PENDING\", \"OPEN\", \"CLOSED\"], default: \"PENDING\" },\r\n    deleted: { type: Boolean, default: false, required: true },\r\n    deleted_at: { type: Date },\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newAssessmentSchema = new Schema(assessmentSchema, options);\r\nnewAssessmentSchema.set(\"collection\", \"assessment\");\r\nconst Assessment = mongoose.model(\"Assessment\", newAssessmentSchema);\r\n\r\n//* ASSESSMENT-SITTING\r\n\r\nexport const assessmentSittingSchemaCreate = {\r\n    student: Joi.string().optional(),\r\n    assessment: Joi.string().optional(),\r\n    started_at: Joi.date().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const assessmentSittingSchemaUpdate = {\r\n    student: Joi.string().optional(),\r\n    assessment: Joi.string().optional(),\r\n    started_at: Joi.date().optional(),\r\n    ended_at: Joi.date().optional(),\r\n    responses: Joi.string().valid([\"answer1\", \"answer2\", \"answer3\", \"answer4\", \"answer5\"]).optional(),\r\n    score: Joi.number().optional(),\r\n    status: Joi.string().valid([\"OPEN\", \"CLOSED\"]).optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const assessmentSittingSchema = {\r\n    student: { type: ObjectId, ref: \"Student\", required: true },\r\n    assessment: { type: ObjectId, ref: \"Assessment\" },\r\n    started_at: { type: Date, default: Date.now },\r\n    ended_at: { type: Date },\r\n    responses: [{\r\n        question: { type: ObjectId, ref: \"Question\" },\r\n        answer: [{ type: String, enum: [\"answer1\", \"answer2\", \"answer3\", \"answer4\", \"answer5\"] }],\r\n        correct: { type: Boolean },\r\n        time: { type: Date },\r\n    }],\r\n    score: { type: Number },\r\n    status: { type: String, enum: [\"OPEN\", \"CLOSED\"], default: \"OPEN\" },\r\n    deleted: { type: Boolean, default: false, required: true },\r\n    deleted_at: { type: Date },\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst newAssessmentSittingSchema = new Schema(assessmentSittingSchema, options);\r\nnewAssessmentSittingSchema.set(\"collection\", \"assessment_sitting\");\r\nconst AssessmentSitting = mongoose.model(\"AssessmentSitting\", newAssessmentSittingSchema);\r\n\r\nexport { Assessment, AssessmentSitting };\r\nexport default Assessment;\r\n"]}
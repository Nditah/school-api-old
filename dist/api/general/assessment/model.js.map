{"version":3,"sources":["../../../../src/api/general/assessment/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","code","Joi","string","required","user_type","valid","written_date","date","optional","course","course_id","assessment_type","mode","examiner","question","venue","staff_id","student_id","assessment_status","deleted","boolean","created_by","updated_by","schemaUpdate","schema","type","String","enum","Date","ref","default","Boolean","options","DATABASE","OPTIONS","newSchema","set","Assessment","model"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {String} id Assessment primaryKey\n * @property {String} code Assessment code\n * @property {String} user_type Assessment user type \"STAFF|STUDENT\"\n * @property {Date} written_date Assessment written_date \n * @property {String} course Assessment course \n * @property {String} course_id Assessment course_id \n * @property {String} assessment_type Assessment assessment_type \n * @property {String} mode Assessment mode \n * @property {String} examiner Assessment examiner ObjectId\n * @property {String} question Assessment question ObjectId\n * @property {String} venue Assessment venue ObjectId\n * @property {String} mode Assessment mode ObjectId\n * @property {String} staff_id Assessment staff ObjectId\n * @property {String} student_id Assessment student ObjectId\n * @property {String} assessment_status Assessment assessment_status \"PENDING|CLOSED\"\n * @property {String} deleted Assessment deleted Boolean\n * @property {String} created_by Assessment created_by\n * @property {String} updated_by Assessment updated_by \n * @description Assessment model holds record of all Assessment\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    code:  Joi.string().required(),\n    user_type: Joi.string().valid([\"STAFF\", \"STUDENT\"]).required(),\n    written_date: Joi.date().optional(),\n    course: Joi.string().required(),\n    course_id: Joi.string().optional(),\n    assessment_type: Joi.string().valid([\"TEST\", \"CA\", \"EXAM\"]).required(),\n    mode: Joi.string().valid([\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"]).required(),\n    examiner:  Joi.string().optional(),\n    question:  Joi.string().optional(),\n    venue: Joi.string().optional(),\n    staff_id: Joi.string().optional(),\n    student_id: Joi.string().optional(),\n    assessment_status: Joi.string().valid([\"PENDING\", \"DONE\", \"CLOSED\"]).optional(),\n    deleted: Joi.boolean().required(),\n    created_by: Joi.string().required(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    code: Joi.string().required(),\n    user_type: Joi.string().valid([\"STAFF\", \"STUDENT\"]).optional(),\n    written_date: Joi.date().optional(),\n    course: Joi.string().required(),\n    course_id: Joi.string().optional(),\n    assessment_type: Joi.string().valid([\"TEST\", \"CA\", \"EXAM\"]).required(),\n    mode: Joi.string().valid([\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"]).required(),\n    examiner:  Joi.string().optional(),\n    question:  Joi.string().optional(),\n    venue: Joi.string().optional(),\n    staff_id: Joi.string().optional(),\n    student_id: Joi.string().optional(),\n    assessment_status: Joi.string().valid([\"PENDING\", \"DONE\", \"CLOSED\"]).optional(),\n    deleted: Joi.boolean().required(),\n    created_by: Joi.string().required(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    code: { type: String, required: [true, \"Why no input?\"], required: true },\n    user_type: { type: String, enum: [\"STAFF\", \"STUDENT\",]},\n    written_date: { type: Date },\n    course: { type: ObjectId, ref: \"course\", required: true },\n    course_id: { type: ObjectId, ref: \"course\"  },\n    assessment_type: { type: String, enum: [\"TEST\", \"CA\", \"EXAM\"], required: true },\n    mode: { type: String, enum:[ \"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"], required: true },\n    examiner: { type: ObjectId, ref: \"staff\" },\n    question: [ {  type: ObjectId, ref: \"Questionaire\"}  ],\n    venue: { type: ObjectId, ref: \"classroom\" },\n    staff_id: { type: ObjectId, ref: \"Staff\" },\n    student_id: { type: ObjectId, ref: \"Student\" },\n    assessment_status: { type: String, enum: [\"PENDING\", \"DONE\", \"CLOSED\"], default: \"PENDING\" },\n    deleted: { type: Boolean, default: false, required: true },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"assessment\");\n\nconst Assessment = mongoose.model(\"Assessment\", newSchema);\n\nexport default Assessment;\n"]}
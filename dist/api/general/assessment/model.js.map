{"version":3,"sources":["../../../../src/api/general/assessment/model.js"],"names":["Schema","mongoose","ObjectId","Types","assessmentCreate","code","Joi","string","required","type","valid","mode","written_date","date","optional","started_at","ended_at","duration","number","course","examiner","questionnaires","classroom","created_by","assessmentUpdate","students","array","status","updated_by","assessmentSchema","String","enum","Date","Number","comment","ref","default","deleted","Boolean","deleted_at","options","DATABASE","OPTIONS","newAssessmentSchema","set","Assessment","model","assessmentSittingCreate","student","assessment","assessmentSittingUpdate","responses","score","assessmentSittingSchema","now","question","answer","correct","time","newAssessmentSittingSchema","AssessmentSitting"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Assessment primaryKey\n * @property {String} code Assessment code\n * @property {String} type Assessment type \"TEST|CA|EXAM\"\n * @property {String} mode Assessment mode \"ORAL|PAPER|CBT|DEMO\"\n * @property {Date} written_date Assessment written_date\n * @property {Date} started_at Assessment started dateime\n * @property {Date} ended_at Assessment ended dateime\n * @property {Number} duration Assessment duration\n * @property {ObjectId} course Assessment course\n * @property {ObjectId} examiner Assessment examiner ObjectId\n * @property {Array} questionnaires Assessment questionnaires array of ObjectId\n * @property {ObjectId} classroom Assessmentclassroom or venue ObjectId\n * @property {String} students Assessment students or candidates array ObjectId\n * @property {String} status Assessment status \"PENDING|OPEN|CLOSED\"\n * @property {Boolean} deleted Assessment delete status\n * @property {ObjectId} created_by Assessment created Staff\n * @property {ObjectId} updated_by Assessment updated Staff\n * @description Assessment records evaluation of students for courses\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\nimport { Course } from \"../subject/model\";\nimport Questionnaire from \"../questionnaire/model\";\nimport Classroom from \"../classroom/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const assessmentCreate = {\n    code: Joi.string().required(),\n    type: Joi.string().valid([\"TEST\", \"CA\", \"EXAM\"]).required(),\n    mode: Joi.string().valid([\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"]).required(),\n    written_date: Joi.date().optional(),\n    started_at: Joi.date().optional(),\n    ended_at: Joi.date().optional(),\n    duration: Joi.number().optional(),\n    course: Joi.string().required(),\n    examiner: Joi.string().required(),\n    questionnaires: Joi.string().optional(),\n    classroom: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const assessmentUpdate = {\n    code: Joi.string().optional(),\n    type: Joi.string().valid([\"TEST\", \"CA\", \"EXAM\"]).optional(),\n    mode: Joi.string().valid([\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"]).optional(),\n    written_date: Joi.date().optional(),\n    started_at: Joi.date().optional(),\n    ended_at: Joi.date().optional(),\n    duration: Joi.number().optional(),\n    course: Joi.string().optional(),\n    examiner: Joi.string().optional(),\n    questionnaires: Joi.string().optional(),\n    classroom: Joi.string().optional(),\n    students: Joi.array().optional(),\n    status: Joi.string().valid([\"PENDING\", \"OPEN\", \"CLOSED\"]).optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const assessmentSchema = {\n    code: { type: String, required: true },\n    type: { type: String, enum: [\"TEST\", \"CA\", \"EXAM\"], required: true },\n    mode: { type: String, enum: [\"ORAL\", \"PAPER\", \"CBT\", \"DEMO\"], required: true },\n    written_date: { type: Date },\n    started_at: { type: Date },\n    ended_at: { type: Date },\n    duration: { type: Number, comment: \"Minutes\" },\n    course: { type: ObjectId, ref: \"Course\", required: true },\n    examiner: { type: ObjectId, ref: \"Staff\" },\n    questionnaires: [{ type: ObjectId, ref: \"Questionnaire\" }],\n    classroom: { type: ObjectId, ref: \"Classroom\", comment: \"Venue\" },\n    students: [{ type: ObjectId, ref: \"Student\" }],\n    status: { type: String, enum: [\"PENDING\", \"OPEN\", \"CLOSED\"], default: \"PENDING\" },\n    deleted: { type: Boolean, default: false, required: true },\n    deleted_at: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newAssessmentSchema = new Schema(assessmentSchema, options);\nnewAssessmentSchema.set(\"collection\", \"assessment\");\nconst Assessment = mongoose.model(\"Assessment\", newAssessmentSchema);\n\n//* ASSESSMENT-SITTING\n\n/**\n * @author 4Dcoder\n * @property {ObjectId} id AssessmentSitting primaryKey\n * @property {String} student AssessmentSitting student\n * @property {String} assessment AssessmentSitting assessment\n * @property {Date} started_at AssessmentSitting started_at dateime\n * @property {Date} ended_at AssessmentSitting ended dateime\n * @property {String} responses AssessmentSitting responses\n *  \"answer1|answer2|answer3|answer4|answer5\"\n * @property {Number} score AssessmentSitting score\n * @property {String} status AssessmentSitting status \"OPEN|CLOSED\"\n *  Open - when the students starts and Close - when stopped.\n * @property {Boolean} deleted Assessment delete status\n * @property {ObjectId} created_by Assessment created Staff\n * @property {ObjectId} updated_by Assessment updated Staff\n * @description Assessment records evaluation of students for courses\n */\n\nexport const assessmentSittingCreate = {\n    student: Joi.string().optional(),\n    assessment: Joi.string().optional(),\n    started_at: Joi.date().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const assessmentSittingUpdate = {\n    student: Joi.string().optional(),\n    assessment: Joi.string().optional(),\n    started_at: Joi.date().optional(),\n    ended_at: Joi.date().optional(),\n    responses: Joi.string().valid([\"answer1\", \"answer2\", \"answer3\", \"answer4\", \"answer5\"]).optional(),\n    score: Joi.number().optional(),\n    status: Joi.string().valid([\"OPEN\", \"CLOSED\"]).optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const assessmentSittingSchema = {\n    student: { type: ObjectId, ref: \"Student\", required: true },\n    assessment: { type: ObjectId, ref: \"Assessment\" },\n    started_at: { type: Date, default: Date.now },\n    ended_at: { type: Date },\n    responses: [{\n        question: { type: ObjectId, ref: \"Question\" },\n        answer: [{ type: String, enum: [\"answer1\", \"answer2\", \"answer3\", \"answer4\", \"answer5\"] }],\n        correct: { type: Boolean },\n        time: { type: Date },\n    }],\n    score: { type: Number },\n    status: { type: String, enum: [\"OPEN\", \"CLOSED\"], default: \"OPEN\" },\n    deleted: { type: Boolean, default: false, required: true },\n    deleted_at: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst newAssessmentSittingSchema = new Schema(assessmentSittingSchema, options);\nnewAssessmentSittingSchema.set(\"collection\", \"assessment_sitting\");\nconst AssessmentSitting = mongoose.model(\"AssessmentSitting\", newAssessmentSittingSchema);\n\nexport { Assessment, AssessmentSitting };\n"]}
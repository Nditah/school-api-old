{"version":3,"sources":["../../../../src/api/general/assessment/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Assessment","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchAssessment","data","body","Joi","validate","assessmentCreate","newAssessment","save","createAssessment","id","params","recordId","assessmentUpdate","findOneAndUpdate","_id","new","updateAssessment","findOneAndRemove","deleteAssessment","AssessmentSitting","fetchAssessmentSitting","assessmentSittingCreate","newAssessmentSitting","createAssessmentSitting","assessmentSittingUpdate","updateAssessmentSitting","deleteAssessmentSitting","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport {\n    Assessment, assessmentCreate, assessmentUpdate,\n    AssessmentSitting, assessmentSittingCreate, assessmentSittingUpdate,\n} from \"./model\";\nimport { success, fail, notFound } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[assessment]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/assessment.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchAssessment(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Assessment.find(filter)\n            .populate(\"course\")\n            .populate(\"questionnaires\")\n            .populate(\"classrom\")\n            .populate(\"students\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createAssessment(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, assessmentCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newAssessment = new Assessment(data);\n    try {\n        const result = await newAssessment.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Assessment created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateAssessment(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, assessmentUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Assessment.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Assessment updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteAssessment(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Assessment.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Assessment deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\n//* =============ASSIGNMENT-SITTING==================\n\nexport async function fetchAssessmentSitting(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await AssessmentSitting.find(filter)\n            .populate(\"course\")\n            .populate(\"questionnaires\")\n            .populate(\"classrom\")\n            .populate(\"students\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createAssessmentSitting(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, assessmentSittingCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newAssessmentSitting = new AssessmentSitting(data);\n    try {\n        const result = await newAssessmentSitting.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"AssessmentSitting created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateAssessmentSitting(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, assessmentSittingUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await AssessmentSitting.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"AssessmentSitting updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteAssessmentSitting(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await AssessmentSitting.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"AssessmentSitting deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
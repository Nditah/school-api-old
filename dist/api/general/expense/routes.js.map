{"version":3,"sources":["../../../../src/api/general/expense/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDC,uBAAnD;;AAEA;;;;;;;;;;;;AAYAN,OAAOO,IAAP,CAAY,WAAZ,EAAyB,CAACH,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDG,wBAApD;;AAEA;;;;;;;;;;;;AAYAR,OAAOS,GAAP,CAAW,qBAAX,EAAkC,CAACL,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DK,wBAA7D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACP,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEO,wBAAhE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/expenses?id={recordId} Retrieve one or all records\n * @apiName RetrieveExpense\n * @apiGroup Expense\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/expenses?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of Corporate commercial expenses operating Groups expense account(s)\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/expenses\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/expenses Create expenses\n * @apiName CreateExpense\n * @apiGroup Expense\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} amount Expense amount (required)\n * @apiParam {String} description Expense description (required)\n * @apiSuccess {Object} Expense Expense's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Expense not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/expenses\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/expenses/{recordId} Update expenses\n * @apiName UpdateExpense\n * @apiGroup Expense\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} amount Expense amount (required)\n * @apiParam {String} description Expense description (required)\n * @apiSuccess {Object} Expense Expense's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Expense not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/expenses/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/expenses/{recordId} Delete expenses\n * @apiName DeleteExpense\n * @apiGroup Expense\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Expense not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/expenses/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/category/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","SUBSIDIARY","table","Staff","Schema","ObjectId","Types","schemaCreate","name","string","required","type","trim","valid","description","optional","subsidiary","Object","values","created_by","schemaUpdate","updated_by","schema","String","enum","ref","preload","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Category","model","insertMany"],"mappings":"AAAA;;;;;;;;;;;AAWA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,oBAArC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAM,EAAEC,MAAF,KAAaN,QAAnB;AACA,MAAM,EAAEO,QAAF,KAAeD,OAAOE,KAA5B;;AAEA,OAAO,MAAMC,eAAe;AACxBC,UAAMX,IAAIY,MAAJ,GAAaC,QAAb,EADkB;AAExBC,UAAMd,IAAIY,MAAJ,GAAaG,IAAb,GAAoBC,KAApB,CAA0B,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,OAAvD,CAA1B,EAA2FH,QAA3F,EAFkB;AAGxBI,iBAAajB,IAAIY,MAAJ,GAAaM,QAAb,EAHW;AAIxBC,gBAAYnB,IAAIY,MAAJ,GAAaI,KAAb,CAAmBI,OAAOC,MAAP,CAAcjB,UAAd,CAAnB,EAA8CS,QAA9C,EAJY;AAKxBS,gBAAYtB,IAAIY,MAAJ,GAAaC,QAAb;AALY,CAArB;;AAQP,OAAO,MAAMU,eAAe;AACxBZ,UAAMX,IAAIY,MAAJ,GAAaM,QAAb,EADkB;AAExBJ,UAAMd,IAAIY,MAAJ,GAAaG,IAAb,GAAoBC,KAApB,CAA0B,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,OAAvD,CAA1B,EAA2FE,QAA3F,EAFkB;AAGxBD,iBAAajB,IAAIY,MAAJ,GAAaM,QAAb,EAHW;AAIxBC,gBAAYnB,IAAIY,MAAJ,GAAaI,KAAb,CAAmBI,OAAOC,MAAP,CAAcjB,UAAd,CAAnB,EAA8Cc,QAA9C,EAJY;AAKxBM,gBAAYxB,IAAIY,MAAJ,GAAaC,QAAb;AALY,CAArB;;AAQP,OAAO,MAAMY,SAAS;AAClBd,UAAM,EAAEG,MAAMY,MAAR,EAAgBb,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EADY;AAElBC,UAAM;AACFA,cAAMY,MADJ;AAEFC,cAAM,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,OAAvD,CAFJ;AAGFd,kBAAU,CAAC,KAAD,EAAQ,eAAR;AAHR,KAFY;AAOlBI,iBAAa,EAAEH,MAAMY,MAAR,EAAgBb,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAPK;AAQlBM,gBAAY;AACRL,cAAMY,MADE;AAERC,cAAMP,OAAOC,MAAP,CAAcjB,UAAd,CAFE;AAGRS,kBAAU,CAAC,IAAD,EAAO,oBAAP;AAHF,KARM;AAalBS,gBAAY,EAAER,MAAMN,QAAR,EAAkBoB,KAAK,OAAvB,EAAgCf,UAAU,IAA1C,EAbM;AAclBW,gBAAY,EAAEV,MAAMN,QAAR,EAAkBoB,KAAK,OAAvB;AAdM,CAAf;;AAiBP,MAAMC,UAAU1B,SAAS2B,kBAAT,CAA4BC,OAA5C;AACA,MAAMC,UAAU7B,SAAS8B,OAAzB;;AAEA,MAAMC,YAAY,IAAI3B,MAAJ,CAAWkB,MAAX,EAAmBO,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,UAA5B;;AAEA,MAAMC,WAAWnC,SAASoC,KAAT,CAAe,UAAf,EAA2BH,SAA3B,CAAjB;;AAEA,IAAIL,OAAJ,EAAa;AAAEO,aAASE,UAAT,CAAoBjC,KAApB;AAA6B;;AAE5C,eAAe+B,QAAf","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {String} id Category primaryKey\n * @property {String} type Category type of category (required)\n *  \"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"\n * @property {String} name Category name (required)\n * @property {String} description Category description (required)\n * @property {String} subsidiary Category PET|CHEM|PLANT|ENGR (required)\n * @description Category model holds categories for raw materials, projects,\n * finished products for all the subsidiaries.\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\n// eslint-disable-next-line import/no-cycle\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().required(),\n    type: Joi.string().trim().valid([\"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"]).required(),\n    description: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().optional(),\n    type: Joi.string().trim().valid([\"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"]).optional(),\n    description: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: [true, \"Why no input?\"] },\n    type: {\n        type: String,\n        enum: [\"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"],\n        required: [false, \"Why no input?\"],\n    },\n    description: { type: String, required: [true, \"Why no input?\"] },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [true, \"Why no subsidiary?\"],\n    },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"category\");\n\nconst Category = mongoose.model(\"Category\", newSchema);\n\nif (preload) { Category.insertMany(table); }\n\nexport default Category;\n"]}
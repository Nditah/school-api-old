{"version":3,"sources":["../../../../src/api/general/category/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","required","type","trim","valid","description","optional","subsidiary","Object","values","SUBSIDIARY","created_by","schemaUpdate","updated_by","schema","String","enum","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Category","model","insertMany","table"],"mappings":";;;;;;;AAWA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;;;AALA;AAbA;;;;;;;;;;;IAoBQA,M,GAAWC,kB,CAAXD,M;AAHR;;IAIQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,UAAMH,cAAIC,MAAJ,GAAaG,IAAb,GAAoBC,KAApB,CAA0B,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,OAAvD,CAA1B,EAA2FH,QAA3F,EAFkB;AAGxBI,iBAAaN,cAAIC,MAAJ,GAAaM,QAAb,EAHW;AAIxBC,gBAAYR,cAAIC,MAAJ,GAAaI,KAAb,CAAmBI,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CT,QAA9C,EAJY;AAKxBU,gBAAYZ,cAAIC,MAAJ,GAAaC,QAAb;AALY,CAArB;;AAQA,IAAMW,sCAAe;AACxBd,UAAMC,cAAIC,MAAJ,GAAaM,QAAb,EADkB;AAExBJ,UAAMH,cAAIC,MAAJ,GAAaG,IAAb,GAAoBC,KAApB,CAA0B,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,OAAvD,CAA1B,EAA2FE,QAA3F,EAFkB;AAGxBD,iBAAaN,cAAIC,MAAJ,GAAaM,QAAb,EAHW;AAIxBC,gBAAYR,cAAIC,MAAJ,GAAaI,KAAb,CAAmBI,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CJ,QAA9C,EAJY;AAKxBO,gBAAYd,cAAIC,MAAJ,GAAaC,QAAb;AALY,CAArB;;AAQA,IAAMa,0BAAS;AAClBhB,UAAM,EAAEI,MAAMa,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EADY;AAElBC,UAAM;AACFA,cAAMa,MADJ;AAEFC,cAAM,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,OAAnC,EAA4C,SAA5C,EAAuD,OAAvD,CAFJ;AAGFf,kBAAU,CAAC,KAAD,EAAQ,eAAR;AAHR,KAFY;AAOlBI,iBAAa,EAAEH,MAAMa,MAAR,EAAgBd,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAPK;AAQlBM,gBAAY;AACRL,cAAMa,MADE;AAERC,cAAMR,OAAOC,MAAP,CAAcC,qBAAd,CAFE;AAGRT,kBAAU,CAAC,IAAD,EAAO,oBAAP;AAHF,KARM;AAalBU,gBAAY,EAAET,MAAMP,QAAR,EAAkBsB,KAAK,OAAvB,EAAgChB,UAAU,IAA1C,EAbM;AAclBY,gBAAY,EAAEX,MAAMP,QAAR,EAAkBsB,KAAK,OAAvB;AAdM,CAAf;;AAiBP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI/B,MAAJ,CAAWqB,MAAX,EAAmBQ,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,UAA5B;;AAEA,IAAMC,WAAWhC,mBAASiC,KAAT,CAAe,UAAf,EAA2BH,SAA3B,CAAjB;;AAEA,IAAIN,OAAJ,EAAa;AAAEQ,aAASE,UAAT,CAAoBC,eAApB;AAA6B;;kBAE7BH,Q","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {String} id Category primaryKey\n * @property {String} type Category type of category (required)\n *  \"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"\n * @property {String} name Category name (required)\n * @property {String} description Category description (required)\n * @property {String} subsidiary Category PET|CHEM|PLANT|ENGR (required)\n * @description Category model holds categories for raw materials, projects,\n * finished products for all the subsidiaries.\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\n// eslint-disable-next-line import/no-cycle\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().required(),\n    type: Joi.string().trim().valid([\"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"]).required(),\n    description: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().optional(),\n    type: Joi.string().trim().valid([\"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"]).optional(),\n    description: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: [true, \"Why no input?\"] },\n    type: {\n        type: String,\n        enum: [\"MATERIAL\", \"PRODUCT\", \"VEHICLE\", \"STAFF\", \"PARTNER\", \"ASSET\"],\n        required: [false, \"Why no input?\"],\n    },\n    description: { type: String, required: [true, \"Why no input?\"] },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [true, \"Why no subsidiary?\"],\n    },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"category\");\n\nconst Category = mongoose.model(\"Category\", newSchema);\n\nif (preload) { Category.insertMany(table); }\n\nexport default Category;\n"]}
{"version":3,"sources":["../../../../src/api/general/setting/routes.js"],"names":["router","express","Router","get","fetchRecordPublic","checkAuth","fetchRecord","put","isValidStaff","updateRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,kBAAX,EAA+BC,6BAA/B;;AAEA;;;;;;;;;AASAJ,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACE,wBAAD,CAAxB,EAAqCC,uBAArC;;AAEA;;;;;;;;;;;;;;;;AAgBAN,OAAOO,GAAP,CAAW,qBAAX,EAAkC,CAACF,wBAAD,EAAYG,2BAAZ,CAAlC,EAA6DC,wBAA7D;;kBAEeT,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecordPublic, fetchRecord, updateRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/settings/public Retrieve Public Settings record(s)\r\n * @apiName RetrievePublicSetting\r\n * @apiGroup Setting\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/settings?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records of Software adjustable and default parameters.\r\n * Labels and contents for the website are kept here.\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/settings/public\", fetchRecordPublic);\r\n\r\n/**\r\n * @api {get} /api/v1/settings?id={recordId} Retrieve Settings record(s)\r\n * @apiName RetrieveSetting\r\n * @apiGroup Setting\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/settings\", [checkAuth], fetchRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/settings/{recordId} Update Settings record\r\n * @apiName UpdateSetting\r\n * @apiGroup Setting\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiParam {String} name Setting varaible name\r\n * @apiParam {String} access Setting \"public\", \"private\"\r\n * @apiParam {String} category Setting category of domains affected\r\n * @apiParam {String} control Setting control value\r\n * @apiParam {String} description Setting description\r\n * @apiSuccess {Object} Setting Setting's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Setting not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/settings/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\nexport default router;\r\n"]}
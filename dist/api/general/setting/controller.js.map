{"version":3,"sources":["../../../../src/api/general/setting/controller.js"],"names":["req","res","query","findSetting","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecordPublic","filter","skip","limit","sort","projection","Setting","find","select","exec","fetchRecord","data","body","id","params","recordId","Joi","validate","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Setting, { schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport table from \"./table\";\n\n// Logging\nconst logger = log4js.getLogger(\"[setting]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/setting.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecordPublic(req, res) {\n    const { query } = req;\n    try {\n        const result = await findSetting(query);\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Setting Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function findSetting(query) {\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    const result = await Setting.find(filter)\n        .skip(skip)\n        .limit(limit)\n        .sort(sort)\n        .select(projection)\n        .exec();\n    return result;\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Setting.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Setting.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n"]}
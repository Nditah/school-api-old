{"version":3,"sources":["../../../../src/api/general/setting/controller.js"],"names":["Joi","log4js","aqp","Setting","schemaUpdate","success","fail","notFound","isObjecId","STATUS_MSG","table","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecordPublic","req","res","query","result","findSetting","info","SUCCESS","DEFAULT","err","error","message","filter","skip","limit","sort","projection","find","select","exec","fetchRecord","updateRecord","data","body","recordId","id","params","validate","findOneAndUpdate","_id","new"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Setting, { schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport table from \"./table\";\n\n// Logging\nconst logger = log4js.getLogger(\"[setting]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/setting.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecordPublic(req, res) {\n    const { query } = req;\n    try {\n        const result = await findSetting(query);\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Setting Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function findSetting(query) {\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    const result = await Setting.find(filter)\n        .skip(skip)\n        .limit(limit)\n        .sort(sort)\n        .select(projection)\n        .exec();\n    return result;\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Setting.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Setting.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/announcement/routes.js"],"names":["router","express","Router","get","checkAuth","fetchRecord","post","isValidStaff","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,gBAAX,EAA6B,CAACC,wBAAD,CAA7B,EAA0CC,uBAA1C;;AAEA;;;;;;;;;;;;;;;;;AAiBAL,OAAOM,IAAP,CAAY,gBAAZ,EAA8B,CAACF,wBAAD,EAAYG,2BAAZ,CAA9B,EAAyDC,wBAAzD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAR,OAAOS,GAAP,CAAW,0BAAX,EAAuC,CAACL,wBAAD,CAAvC,EAAoDM,wBAApD;;AAEA;;;;;;;;;;;AAWAV,OAAOW,MAAP,CAAc,0BAAd,EAA0C,CAACP,wBAAD,EAAYG,2BAAZ,CAA1C,EAAqEK,wBAArE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/announcements?id={recordId} Retrieve Announcement records\n * @apiName RetrieveAnnouncement\n * @apiGroup Announcement\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/announcements?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/announcements\", [checkAuth], fetchRecord);\n\n/**\n * @api {post} /api/v1/announcements Create a Announcement record\n * @apiName CreateAnnouncement\n * @apiGroup Announcement\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} user_type Announcement user type \"STAFF|PARTNER|PARTNER|CUSTOMER\"\n * @apiParam {ObjectId} staff_id Announcement staff ObjectId\n * @apiParam {ObjectId} supplier_id Announcement driver ObjectId\n * @apiParam {ObjectId} customer_id Announcement customer ObjectId\n * @apiParam {ObjectId} partner_id Announcement partner ObjectId\n * @apiParam {String} message Announcement message\n * @apiParam {String} announcement_status Announcement record status \"PENDING|CLOSED\"\n * @apiSuccess {Object} Announcement Announcement's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Announcement not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/announcements\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/announcements/{recordId} Update a Announcement record\n * @apiName UpdateAnnouncement\n * @apiGroup Announcement\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} user_type Announcement user type \"STAFF|PARTNER|PARTNER|CUSTOMER\"\n * @apiParam {ObjectId} staff_id Announcement staff ObjectId\n * @apiParam {ObjectId} supplier_id Announcement driver ObjectId\n * @apiParam {ObjectId} customer_id Announcement customer ObjectId\n * @apiParam {ObjectId} partner_id Announcement partner ObjectId\n * @apiParam {String} message Announcement message\n * @apiParam {String} announcement_status Announcement record status \"PENDING|CLOSED\"\n * @apiSuccess {Object} Announcement Announcement's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Announcement not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/announcements/:recordId\", [checkAuth], updateRecord);\n\n/**\n * @api {delete} /api/v1/announcements/{recordId} Delete a Announcement record\n * @apiName DeleteAnnouncement\n * @apiGroup Announcement\n * @apiPermission master\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Announcement not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/announcements/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/rating/controller.js"],"names":["Joi","log4js","aqp","Rating","schemaCreate","schemaUpdate","success","fail","notFound","isObjecId","STATUS_MSG","Staff","Vehicle","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecord","req","res","query","filter","skip","limit","sort","projection","result","find","populate","select","exec","info","SUCCESS","DEFAULT","err","error","message","createRecord","data","body","validate","newRecord","save","ERROR","Model","subjectId","subject","result2","update","_id","$push","rating_ids","updateRecord","recordId","id","params","findOneAndUpdate","new","deleteRecord","findOneAndRemove","$pull"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Rating, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Vehicle from \"../vehicle/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[rating]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/rating.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Rating.find(filter)\n            .populate(\"staff_id\", \"id, surname, other_name\")\n            .populate(\"partner_id\", \"id, surname, other_name, phone, email\")\n            .populate(\"vehicle_id\", \"id, name\")\n            .populate(\"terminal_id\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Rating(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.error(STATUS_MSG.ERROR.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        let Model;\n        let subjectId;\n        switch (result.subject) {\n        case \"STAFF\": Model = Staff; subjectId = \"staff_id\";\n            break;\n        case \"VEHICLE\": Model = Vehicle; subjectId = \"vehicle_id\";\n            break;\n        default: return fail(res, 422, `Unknown subject. ${result.subject}`);\n        }\n        const result2 = await Model.update({ _id: result[ subjectId ] },\n            { $push: { rating_ids: result._id } }).exec();\n        return success(res, 201, result2, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Rating.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Rating.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        let Model;\n        let subjectId;\n        switch (result.subject) {\n        case \"STAFF\": Model = Staff; subjectId = \"staff_id\";\n            break;\n        case \"VEHICLE\": Model = Vehicle; subjectId = \"vehicle_id\";\n            break;\n        default: return fail(res, 422, `Unknown subject. ${result.subject}`);\n        }\n        const result2 = await Model.update({ _id: result[ subjectId ] },\n            { $pull: { rating_ids: result._id } }).exec();\n        return success(res, 200, result2, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
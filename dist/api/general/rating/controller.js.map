{"version":3,"sources":["../../../../src/api/general/rating/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Rating","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","newRecord","save","ERROR","Model","subjectId","subject","Staff","Vehicle","update","_id","$push","rating_ids","result2","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","new","updateRecord","findOneAndRemove","$pull","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Rating, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Vehicle from \"../vehicle/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[rating]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/rating.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Rating.find(filter)\n            .populate(\"staff_id\", \"id, surname, given_name\")\n            .populate(\"partner_id\", \"id, surname, given_name, phone, email\")\n            .populate(\"vehicle_id\", \"id, name\")\n            .populate(\"terminal_id\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Rating(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.error(STATUS_MSG.ERROR.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        let Model;\n        let subjectId;\n        switch (result.subject) {\n        case \"STAFF\": Model = Staff; subjectId = \"staff_id\";\n            break;\n        case \"VEHICLE\": Model = Vehicle; subjectId = \"vehicle_id\";\n            break;\n        default: return fail(res, 422, `Unknown subject. ${result.subject}`);\n        }\n        const result2 = await Model.update({ _id: result[ subjectId ] },\n            { $push: { rating_ids: result._id } }).exec();\n        return success(res, 201, result2, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Rating.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Rating.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        let Model;\n        let subjectId;\n        switch (result.subject) {\n        case \"STAFF\": Model = Staff; subjectId = \"staff_id\";\n            break;\n        case \"VEHICLE\": Model = Vehicle; subjectId = \"vehicle_id\";\n            break;\n        default: return fail(res, 422, `Unknown subject. ${result.subject}`);\n        }\n        const result2 = await Model.update({ _id: result[ subjectId ] },\n            { $pull: { rating_ids: result._id } }).exec();\n        return success(res, 200, result2, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
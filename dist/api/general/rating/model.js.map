{"version":3,"sources":["../../../../src/api/general/rating/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","RATING","table","Staff","Vehicle","Schema","ObjectId","Types","schemaCreate","star","number","required","subject","string","valid","SUBJECT","optional","staff_id","partner_id","terminal_id","vehicle_id","review","created_by","schemaUpdate","updated_by","schema","type","Number","min","max","String","enum","ref","preload","options","OPTIONS","newSchema","set","Rating","model","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {ObjectId} id Rating primaryKey\n * @property {Number} star Rating star from 0 to 5 (required)\n * @property {String} subject Rating subject [\"STAFF\", \"PARTNER\", \"TERMINAL\", \"VEHICLE\"] (required)\n * @property {String} staff_id Rated Staff subject ObjectId\n * @property {String} partner_id Rated Partner subject ObjectId\n * @property {String} terminal_id Rated Terminal subject ObjectId\n * @property {String} vehicle_id Rated Vehicle subject ObjectId\n * @property {String} review Rating review comment\n * @description Rating model holds record of customer feedback about serveice rendered\n * by Staff, Partner or experience about a Terminal or Vehicle\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, RATING } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Vehicle from \"../vehicle/model\";\n// import Hostel from \"../hostel/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    star: Joi.number().required(),\n    subject: Joi.string().valid(RATING.SUBJECT).optional(),\n    staff_id: Joi.string().optional(),\n    partner_id: Joi.string().optional(),\n    terminal_id: Joi.string().optional(),\n    vehicle_id: Joi.string().optional(),\n    review: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    star: Joi.number().optional(),\n    subject: Joi.string().valid(RATING.SUBJECT).optional(),\n    staff_id: Joi.string().optional(),\n    partner_id: Joi.string().optional(),\n    terminal_id: Joi.string().optional(),\n    vehicle_id: Joi.string().optional(),\n    review: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    star: { type: Number, min: 0, max: 5, required: [true, \"Why no star?\"] },\n    subject: { type: String, enum: RATING.SUBJECT, required: [true, \"Why no subject?\"] },\n    staff_id: { type: ObjectId, ref: \"Staff\" },\n    partner_id: { type: ObjectId, ref: \"Partner\" },\n    terminal_id: { type: ObjectId, ref: \"Terminal\" },\n    vehicle_id: { type: ObjectId, ref: \"Vehicle\" },\n    review: { type: String },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = true; // DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"rating\");\n\nconst Rating = mongoose.model(\"Rating\", newSchema);\n\nif (preload) { Rating.insertMany(table); }\n\nexport default Rating;\n"]}
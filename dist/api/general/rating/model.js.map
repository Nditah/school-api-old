{"version":3,"sources":["../../../../src/api/general/rating/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","star","Joi","number","required","subject","string","valid","RATING","SUBJECT","optional","staff_id","partner_id","terminal_id","vehicle_id","review","created_by","schemaUpdate","updated_by","schema","type","Number","min","max","String","enum","ref","preload","options","DATABASE","OPTIONS","newSchema","set","Rating","model","insertMany","table"],"mappings":";;;;;;;AAcA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;IAEQA,M,GAAWC,kB,CAAXD,M;AARR;AAhBA;AACA;;;;;;;;;;;;;;IAwBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,aAASH,cAAII,MAAJ,GAAaC,KAAb,CAAmBC,kBAAOC,OAA1B,EAAmCC,QAAnC,EAFe;AAGxBC,cAAUT,cAAII,MAAJ,GAAaI,QAAb,EAHc;AAIxBE,gBAAYV,cAAII,MAAJ,GAAaI,QAAb,EAJY;AAKxBG,iBAAaX,cAAII,MAAJ,GAAaI,QAAb,EALW;AAMxBI,gBAAYZ,cAAII,MAAJ,GAAaI,QAAb,EANY;AAOxBK,YAAQb,cAAII,MAAJ,GAAaI,QAAb,EAPgB;AAQxBM,gBAAYd,cAAII,MAAJ,GAAaF,QAAb;AARY,CAArB;;AAWA,IAAMa,sCAAe;AACxBhB,UAAMC,cAAIC,MAAJ,GAAaO,QAAb,EADkB;AAExBL,aAASH,cAAII,MAAJ,GAAaC,KAAb,CAAmBC,kBAAOC,OAA1B,EAAmCC,QAAnC,EAFe;AAGxBC,cAAUT,cAAII,MAAJ,GAAaI,QAAb,EAHc;AAIxBE,gBAAYV,cAAII,MAAJ,GAAaI,QAAb,EAJY;AAKxBG,iBAAaX,cAAII,MAAJ,GAAaI,QAAb,EALW;AAMxBI,gBAAYZ,cAAII,MAAJ,GAAaI,QAAb,EANY;AAOxBK,YAAQb,cAAII,MAAJ,GAAaI,QAAb,EAPgB;AAQxBQ,gBAAYhB,cAAII,MAAJ,GAAaF,QAAb;AARY,CAArB;;AAWA,IAAMe,0BAAS;AAClBlB,UAAM,EAAEmB,MAAMC,MAAR,EAAgBC,KAAK,CAArB,EAAwBC,KAAK,CAA7B,EAAgCnB,UAAU,CAAC,IAAD,EAAO,cAAP,CAA1C,EADY;AAElBC,aAAS,EAAEe,MAAMI,MAAR,EAAgBC,MAAMjB,kBAAOC,OAA7B,EAAsCL,UAAU,CAAC,IAAD,EAAO,iBAAP,CAAhD,EAFS;AAGlBO,cAAU,EAAES,MAAMtB,QAAR,EAAkB4B,KAAK,OAAvB,EAHQ;AAIlBd,gBAAY,EAAEQ,MAAMtB,QAAR,EAAkB4B,KAAK,SAAvB,EAJM;AAKlBb,iBAAa,EAAEO,MAAMtB,QAAR,EAAkB4B,KAAK,UAAvB,EALK;AAMlBZ,gBAAY,EAAEM,MAAMtB,QAAR,EAAkB4B,KAAK,SAAvB,EANM;AAOlBX,YAAQ,EAAEK,MAAMI,MAAR,EAPU;AAQlBR,gBAAY,EAAEI,MAAMtB,QAAR,EAAkB4B,KAAK,OAAvB,EAAgCtB,UAAU,IAA1C,EARM;AASlBc,gBAAY,EAAEE,MAAMtB,QAAR,EAAkB4B,KAAK,OAAvB;AATM,CAAf;;AAYP,IAAMC,UAAU,IAAhB,C,CAAsB;AACtB,IAAMC,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAInC,MAAJ,CAAWuB,MAAX,EAAmBS,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,QAA5B;;AAEA,IAAMC,SAASpC,mBAASqC,KAAT,CAAe,QAAf,EAAyBH,SAAzB,CAAf;;AAEA,IAAIJ,OAAJ,EAAa;AAAEM,WAAOE,UAAP,CAAkBC,eAAlB;AAA2B;;kBAE3BH,M","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\r\n/**\r\n * @author 4Dcoder\r\n * @property {ObjectId} id Rating primaryKey\r\n * @property {Number} star Rating star from 0 to 5 (required)\r\n * @property {String} subject Rating subject [\"STAFF\", \"PARTNER\", \"TERMINAL\", \"VEHICLE\"] (required)\r\n * @property {String} staff_id Rated Staff subject ObjectId\r\n * @property {String} partner_id Rated Partner subject ObjectId\r\n * @property {String} terminal_id Rated Terminal subject ObjectId\r\n * @property {String} vehicle_id Rated Vehicle subject ObjectId\r\n * @property {String} review Rating review comment\r\n * @description Rating model holds record of customer feedback about serveice rendered\r\n * by Staff, Partner or experience about a Terminal or Vehicle\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE, RATING } from \"../../../constants\";\r\nimport table from \"./table\";\r\nimport Staff from \"../staff/model\";\r\nimport Vehicle from \"../vehicle/model\";\r\n// import Hostel from \"../hostel/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaCreate = {\r\n    star: Joi.number().required(),\r\n    subject: Joi.string().valid(RATING.SUBJECT).optional(),\r\n    staff_id: Joi.string().optional(),\r\n    partner_id: Joi.string().optional(),\r\n    terminal_id: Joi.string().optional(),\r\n    vehicle_id: Joi.string().optional(),\r\n    review: Joi.string().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    star: Joi.number().optional(),\r\n    subject: Joi.string().valid(RATING.SUBJECT).optional(),\r\n    staff_id: Joi.string().optional(),\r\n    partner_id: Joi.string().optional(),\r\n    terminal_id: Joi.string().optional(),\r\n    vehicle_id: Joi.string().optional(),\r\n    review: Joi.string().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    star: { type: Number, min: 0, max: 5, required: [true, \"Why no star?\"] },\r\n    subject: { type: String, enum: RATING.SUBJECT, required: [true, \"Why no subject?\"] },\r\n    staff_id: { type: ObjectId, ref: \"Staff\" },\r\n    partner_id: { type: ObjectId, ref: \"Partner\" },\r\n    terminal_id: { type: ObjectId, ref: \"Terminal\" },\r\n    vehicle_id: { type: ObjectId, ref: \"Vehicle\" },\r\n    review: { type: String },\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst preload = true; // DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.set(\"collection\", \"rating\");\r\n\r\nconst Rating = mongoose.model(\"Rating\", newSchema);\r\n\r\nif (preload) { Rating.insertMany(table); }\r\n\r\nexport default Rating;\r\n"]}
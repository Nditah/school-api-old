{"version":3,"sources":["../../../../src/api/general/marksheet/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","subject_id","Joi","string","required","student_id","teacher_id","ca_id","exam_id","classe_id","create_by","type","ref","schemaUpdate","updated_by","schema","created_by","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Marksheet","model","insertMany","table"],"mappings":";;;;;;;AAWA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AATR;AAbA;;;;;;;;;;;;IAuBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,gBAAYC,cAAIC,MAAJ,GAAaC,QAAb,EADY;AAExBC,gBAAYH,cAAIC,MAAJ,GAAaC,QAAb,EAFY;AAGxBE,gBAAYJ,cAAIC,MAAJ,GAAaC,QAAb,EAHY;AAIxBG,WAAOL,cAAIC,MAAJ,GAAaC,QAAb,EAJiB;AAKxBI,aAASN,cAAIC,MAAJ,GAAaC,QAAb,EALe;AAMxBK,eAAWP,cAAIC,MAAJ,GAAaC,QAAb,EANa;AAOxBM,eAAW,EAAEC,MAAMb,QAAR,EAAkBc,KAAK,OAAvB;AAPa,CAArB;;AAUA,IAAMC,sCAAe;AACxBZ,gBAAYC,cAAIC,MAAJ,GAAaC,QAAb,EADY;AAExBC,gBAAYH,cAAIC,MAAJ,GAAaC,QAAb,EAFY;AAGxBE,gBAAYJ,cAAIC,MAAJ,GAAaC,QAAb,EAHY;AAIxBG,WAAOL,cAAIC,MAAJ,GAAaC,QAAb,EAJiB;AAKxBI,aAASN,cAAIC,MAAJ,GAAaC,QAAb,EALe;AAMxBK,eAAWP,cAAIC,MAAJ,GAAaC,QAAb,EANa;AAOxBU,gBAAYZ,cAAIC,MAAJ,GAAaC,QAAb;AAPY,CAArB;;AAUA,IAAMW,0BAAS;AAClBd,gBAAY,EAAEU,MAAMb,QAAR,EADM;AAElBO,gBAAY,EAAEM,MAAMb,QAAR,EAFM;AAGlBQ,gBAAY,EAAEK,MAAMb,QAAR,EAHM;AAIlBS,WAAO,EAAEI,MAAMb,QAAR,EAJW;AAKlBU,aAAS,EAAEG,MAAMb,QAAR,EALS;AAMlBW,eAAW,EAAEE,MAAMb,QAAR,EANO;AAOlBkB,gBAAY,EAAEL,MAAMb,QAAR,EAAkBM,UAAU,IAA5B,EAPM;AAQlBU,gBAAY,EAAEH,MAAMb,QAAR,EAAkBc,KAAK,OAAvB;AARM,CAAf;;AAWP,IAAMK,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI3B,MAAJ,CAAWmB,MAAX,EAAmBM,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,YAA5B;;AAEA,IAAMC,YAAY5B,mBAAS6B,KAAT,CAAe,WAAf,EAA4BH,SAA5B,CAAlB;;AAEA,IAAIN,OAAJ,EAAa;AAAEQ,cAAUE,UAAV,CAAqBC,eAArB;AAA8B;;kBAE9BH,S","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Report primaryKey\n * @property {ObjectId} subject_id Subject name\n * @property {ObjectId} ca_id Continous Assessment\n * @property {ObjectId} exam_id Examination detail\n * @property {ObjectId} student_id Student name\n * @property {ObjectId} classe_id Student class\n * @property {ObjectId} teacher_id Teacher's name\n * @description Exam Sheet holds the model for generating student result sheet.\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\nimport Subject from \"../subject/model\";\nimport Assessment from \"../assessment/model\";\nimport Staff from \"../staff/model\";\nimport Classe from \"../classe/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    subject_id: Joi.string().required(),\n    student_id: Joi.string().required(),\n    teacher_id: Joi.string().required(),\n    ca_id: Joi.string().required(),\n    exam_id: Joi.string().required(),\n    classe_id: Joi.string().required(),\n    create_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nexport const schemaUpdate = {\n    subject_id: Joi.string().required(),\n    student_id: Joi.string().required(),\n    teacher_id: Joi.string().required(),\n    ca_id: Joi.string().required(),\n    exam_id: Joi.string().required(),\n    classe_id: Joi.string().required(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    subject_id: { type: ObjectId },\n    student_id: { type: ObjectId },\n    teacher_id: { type: ObjectId },\n    ca_id: { type: ObjectId },\n    exam_id: { type: ObjectId },\n    classe_id: { type: ObjectId },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"mark_sheet\");\n\nconst Marksheet = mongoose.model(\"Marksheet\", newSchema);\n\nif (preload) { Marksheet.insertMany(table); }\n\nexport default Marksheet;\n"]}
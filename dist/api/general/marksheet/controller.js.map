{"version":3,"sources":["../../../../src/api/general/marksheet/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Marksheet","find","populate","path","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchMarksheet","data","body","Joi","validate","marksheetCreate","newMarksheet","save","generateMarksheet","id","params","recordId","marksheetUpdate","findOneAndUpdate","_id","new","updateMarksheet","Result","fetchResult","resultCreate","newResult","createResult","resultUpdate","updateResult","findOneAndRemove","deleteResult","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport {\n    Marksheet, marksheetCreate, marksheetUpdate,\n    Result, resultCreate, resultUpdate,\n} from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[marksheet]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/marksheet.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchMarksheet(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Marksheet.find(filter)\n            .populate({ path: \"created_by\", select: \"surname given_name email phone\" })\n            .populate({ path: \"updated_by\", select: \"surname given_name email phone\" })\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function generateMarksheet(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, marksheetCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newMarksheet = new Marksheet(data);\n    try {\n        const result = await newMarksheet.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Marksheet created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateMarksheet(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, marksheetUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Marksheet.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Marksheet updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\n//* ===== RESULT =======\n\nexport async function fetchResult(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Result.find(filter)\n            .populate(\"result\")\n            .populate(\"student\")\n            .populate(\"marksheet\")\n            .populate({ path: \"created_by\", select: \"surname given_name email phone\" })\n            .populate({ path: \"updated_by\", select: \"surname given_name email phone\" })\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createResult(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, resultCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newResult = new Result(data);\n    try {\n        const result = await newResult.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Result created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateResult(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, resultUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Result.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Result updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteResult(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Result.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 204, result, \"Result deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
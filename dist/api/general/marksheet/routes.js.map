{"version":3,"sources":["../../../../src/api/general/marksheet/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchMarksheet","post","generateMarksheet","put","updateMarksheet","fetchResult","createResult","updateResult","delete","deleteResult"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,aAAX,EAA0B,CAACC,wBAAD,EAAYC,2BAAZ,CAA1B,EAAqDC,0BAArD;;AAEA;;;;;;;;;;;;;;;AAeAN,OAAOO,IAAP,CAAY,aAAZ,EAA2B,CAACH,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDG,6BAAtD;;AAEA;;;;;;;;;;;;;;;;AAgBAR,OAAOS,GAAP,CAAW,uBAAX,EAAoC,CAACL,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DK,2BAA/D;;AAEA;;AAEA;;;;;;;;;;;;;;;;AAgBAV,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDM,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAX,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDO,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAZ,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DQ,wBAA5D;;AAEAb,OAAOc,MAAP,CAAc,oBAAd,EAAoC,CAACV,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DU,wBAA/D;;kBAEef,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchMarksheet, generateMarksheet, updateMarksheet,\n    fetchResult, createResult, updateResult, deleteResult,\n} from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/marksheets?id={recordId} Retrieve Marksheet records\n * @apiName RetrieveMarksheet\n * @apiGroup Marksheet\n * @apiHeader {String} Authorization Bearer token\n  * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/marksheets?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Markheet records score per student per course\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/marksheets\", [checkAuth, isValidStaff], fetchMarksheet);\n\n/**\n * @api {post} /api/v1/marksheets Create a Marksheet record\n * @apiName CreateMarksheet\n * @apiGroup Marksheet\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} type Marksheet type \"PAPER|CBT\"\n * @apiParam {ObjectId} course Marksheet course\n * @apiParam {ObjectId} student Marksheet student\n * @apiParam {Number} score Marksheet score\n * @apiParam {ObjectId} assessment_sitting Marksheet AssessmentSitting\n * @apiSuccess {Object} Marksheet Marksheet's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Marksheet not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/marksheets\", [checkAuth, isValidStaff], generateMarksheet);\n\n/**\n * @api {put} /api/v1/marksheets/{recordId} Update a Marksheet record\n * @apiName UpdateMarksheet\n * @apiGroup Marksheet\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} type Marksheet type \"PAPER|CBT\"\n * @apiParam {ObjectId} course Marksheet course\n * @apiParam {ObjectId} student Marksheet student\n * @apiParam {Number} score Marksheet score\n * @apiParam {ObjectId} assessment_sitting Marksheet AssessmentSitting\n * @apiSuccess {Object} Marksheet Marksheet's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Marksheet not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/marksheets/:recordId\", [checkAuth, isValidStaff], updateMarksheet);\n\n//* ====== RESULT =============\n\n/**\n * @api {get} /api/v1/results?id={recordId} Retrieve Report records\n * @apiName RetrieveReport\n * @apiGroup Report\n * @apiHeader {String} Authorization Bearer token\n  * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/results?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Results  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/results\", [checkAuth, isValidStaff], fetchResult);\n\n/**\n * @api {post} /api/v1/results Create a Report record\n * @apiName CreateReport\n * @apiGroup Report\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} type Report type \"EVALUATION|TERMLY|ANNUAL\" required\n * @apiParam {String} term Report type \"FIRST|SECOND|THRID|ANNUAL\" required\n * @apiParam {Array} cumulated Report cumulated Result Array\n * @apiParam {ObjectId} student Report student ObjectId\n * @apiParam {Array} marksheets Report marksheets Array<Marksheet>\n * @apiParam {Number} evaluation Report evaluation [1, 2, 3, 4]\n * @apiParam {Number} total Report total\n * @apiParam {Number} rank Report rank for that report\n * @apiSuccess {Object} Report Report's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Marksheet not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/results\", [checkAuth, isValidStaff], createResult);\n\n/**\n * @api {put} /api/v1/results/{recordId} Update a Report record\n * @apiName UpdateReport\n * @apiGroup Report\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} type Report type \"EVALUATION|TERMLY|ANNUAL\" required\n * @apiParam {String} term Report type \"FIRST|SECOND|THRID|ANNUAL\" required\n * @apiParam {Array} cumulated Report cumulated Result Array\n * @apiParam {ObjectId} student Report student ObjectId\n * @apiParam {Array} marksheets Report marksheets Array<Marksheet>\n * @apiParam {Number} evaluation Report evaluation [1, 2, 3, 4]\n * @apiParam {Number} total Report total\n * @apiParam {Number} rank Report rank for that report\n * @apiSuccess {Object} Report Report's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Marksheet not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/results/:recordId\", [checkAuth, isValidStaff], updateResult);\n\nrouter.delete(\"/results/:recordId\", [checkAuth, isValidStaff], deleteResult);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/marksheet/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchMarksheet","post","generateMarksheet","put","updateMarksheet","fetchResult","createResult","updateResult","delete","deleteResult"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,aAAX,EAA0B,CAACC,wBAAD,EAAYC,2BAAZ,CAA1B,EAAqDC,0BAArD;;AAEA;;;;;;;;;;;;;;;AAeAN,OAAOO,IAAP,CAAY,aAAZ,EAA2B,CAACH,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDG,6BAAtD;;AAEA;;;;;;;;;;;;;;;;AAgBAR,OAAOS,GAAP,CAAW,uBAAX,EAAoC,CAACL,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DK,2BAA/D;;AAEA;;AAEA;;;;;;;;;;;;;;;;AAgBAV,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDM,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAX,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDO,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAZ,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DQ,wBAA5D;;AAEAb,OAAOc,MAAP,CAAc,oBAAd,EAAoC,CAACV,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DU,wBAA/D;;kBAEef,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport {\r\n    fetchMarksheet, generateMarksheet, updateMarksheet,\r\n    fetchResult, createResult, updateResult, deleteResult,\r\n} from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/marksheets?id={recordId} Retrieve Marksheet records\r\n * @apiName RetrieveMarksheet\r\n * @apiGroup Marksheet\r\n * @apiHeader {String} Authorization Bearer token\r\n  * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/marksheets?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Markheet records score per student per course\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/marksheets\", [checkAuth, isValidStaff], fetchMarksheet);\r\n\r\n/**\r\n * @api {post} /api/v1/marksheets Create a Marksheet record\r\n * @apiName CreateMarksheet\r\n * @apiGroup Marksheet\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} type Marksheet type \"PAPER|CBT\"\r\n * @apiParam {ObjectId} course Marksheet course\r\n * @apiParam {ObjectId} student Marksheet student\r\n * @apiParam {Number} score Marksheet score\r\n * @apiParam {ObjectId} assessment_sitting Marksheet AssessmentSitting\r\n * @apiSuccess {Object} Marksheet Marksheet's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Marksheet not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/marksheets\", [checkAuth, isValidStaff], generateMarksheet);\r\n\r\n/**\r\n * @api {put} /api/v1/marksheets/{recordId} Update a Marksheet record\r\n * @apiName UpdateMarksheet\r\n * @apiGroup Marksheet\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiParam {String} type Marksheet type \"PAPER|CBT\"\r\n * @apiParam {ObjectId} course Marksheet course\r\n * @apiParam {ObjectId} student Marksheet student\r\n * @apiParam {Number} score Marksheet score\r\n * @apiParam {ObjectId} assessment_sitting Marksheet AssessmentSitting\r\n * @apiSuccess {Object} Marksheet Marksheet's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Marksheet not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/marksheets/:recordId\", [checkAuth, isValidStaff], updateMarksheet);\r\n\r\n//* ====== RESULT =============\r\n\r\n/**\r\n * @api {get} /api/v1/results?id={recordId} Retrieve Report records\r\n * @apiName RetrieveReport\r\n * @apiGroup Report\r\n * @apiHeader {String} Authorization Bearer token\r\n  * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/results?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Results  of account headings belonging to one classification\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/results\", [checkAuth, isValidStaff], fetchResult);\r\n\r\n/**\r\n * @api {post} /api/v1/results Create a Report record\r\n * @apiName CreateReport\r\n * @apiGroup Report\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} type Report type \"EVALUATION|TERMLY|ANNUAL\" required\r\n * @apiParam {String} term Report type \"FIRST|SECOND|THRID|ANNUAL\" required\r\n * @apiParam {Array} cumulated Report cumulated Result Array\r\n * @apiParam {ObjectId} student Report student ObjectId\r\n * @apiParam {Array} marksheets Report marksheets Array<Marksheet>\r\n * @apiParam {Number} evaluation Report evaluation [1, 2, 3, 4]\r\n * @apiParam {Number} total Report total\r\n * @apiParam {Number} rank Report rank for that report\r\n * @apiSuccess {Object} Report Report's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Marksheet not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/results\", [checkAuth, isValidStaff], createResult);\r\n\r\n/**\r\n * @api {put} /api/v1/results/{recordId} Update a Report record\r\n * @apiName UpdateReport\r\n * @apiGroup Report\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiParam {String} type Report type \"EVALUATION|TERMLY|ANNUAL\" required\r\n * @apiParam {String} term Report type \"FIRST|SECOND|THRID|ANNUAL\" required\r\n * @apiParam {Array} cumulated Report cumulated Result Array\r\n * @apiParam {ObjectId} student Report student ObjectId\r\n * @apiParam {Array} marksheets Report marksheets Array<Marksheet>\r\n * @apiParam {Number} evaluation Report evaluation [1, 2, 3, 4]\r\n * @apiParam {Number} total Report total\r\n * @apiParam {Number} rank Report rank for that report\r\n * @apiSuccess {Object} Report Report's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Marksheet not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/results/:recordId\", [checkAuth, isValidStaff], updateResult);\r\n\r\nrouter.delete(\"/results/:recordId\", [checkAuth, isValidStaff], deleteResult);\r\n\r\nexport default router;\r\n"]}
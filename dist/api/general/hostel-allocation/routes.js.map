{"version":3,"sources":["../../../../src/api/general/hostel-allocation/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchHostelAllocation","post","createHostelAllocation","put","updateHostelAllocation","delete","deleteHostelAllocation","fetchHostel","createHostel","updateHostel","deleteHostel","fetchHostelRoom","createHostelRoom","updateHostelRoom","deleteHostelRoom","fetchHostelBedspace","createHostelBedspace","updateHostelBedspace","deleteHostelBedspace"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAmBA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,qBAAX,EAAkC,CAACC,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DC,iCAA7D;;AAEA;;;;;;;;;;;;;;;AAeAN,OAAOO,IAAP,CAAY,qBAAZ,EAAmC,CAACH,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DG,kCAA9D;;AAEA;;;;;;;;;;;;;;;AAeAR,OAAOS,GAAP,CAAW,+BAAX,EAA4C,CAACL,wBAAD,EAAYC,2BAAZ,CAA5C,EAAuEK,kCAAvE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,+BAAd,EAA+C,CAACP,wBAAD,EAAYC,2BAAZ,CAA/C,EAA0EO,kCAA1E;;AAGA;;AAEA;;;;;;;;;;;;;;;AAeAZ,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDQ,uBAAlD;;AAEA;;;;;;;;;;;;;;AAcAb,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDS,wBAAnD;;AAEA;;;;;;;;;;;;;;;AAeAd,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DU,wBAA5D;;AAEA;;;;;;;;;;AAUAf,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DW,wBAA/D;;AAEA;;AAEA;;;;;;;;;;;;;;;AAeAhB,OAAOG,GAAP,CAAW,eAAX,EAA4B,CAACC,wBAAD,EAAYC,2BAAZ,CAA5B,EAAuDY,2BAAvD;;AAEA;;;;;;;;;;;;;;AAcAjB,OAAOO,IAAP,CAAY,eAAZ,EAA6B,CAACH,wBAAD,EAAYC,2BAAZ,CAA7B,EAAwDa,4BAAxD;;AAEA;;;;;;;;;;;;;;;AAeAlB,OAAOS,GAAP,CAAW,yBAAX,EAAsC,CAACL,wBAAD,EAAYC,2BAAZ,CAAtC,EAAiEc,4BAAjE;;AAEA;;;;;;;;;;AAUAnB,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+De,4BAA/D;;AAGA;;AAEA;;;;;;;;;;;;;;;AAeApB,OAAOG,GAAP,CAAW,mBAAX,EAAgC,CAACC,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DgB,+BAA3D;;AAEA;;;;;;;;;;;;;;AAcArB,OAAOO,IAAP,CAAY,mBAAZ,EAAiC,CAACH,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DiB,gCAA5D;;AAEA;;;;;;;;;;;;;;AAcAtB,OAAOS,GAAP,CAAW,6BAAX,EAA0C,CAACL,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEkB,gCAArE;;AAEA;;;;;;;;;;AAUAvB,OAAOW,MAAP,CAAc,6BAAd,EAA6C,CAACP,wBAAD,EAAYC,2BAAZ,CAA7C,EAAwEmB,gCAAxE;;kBAEexB,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchHostelAllocation,\n    createHostelAllocation,\n    updateHostelAllocation,\n    deleteHostelAllocation,\n    fetchHostelRoom,\n    createHostelRoom,\n    updateHostelRoom,\n    deleteHostelRoom,\n    fetchHostelBedspace,\n    createHostelBedspace,\n    updateHostelBedspace,\n    deleteHostelBedspace,\n    fetchHostel,\n    createHostel,\n    updateHostel,\n    deleteHostel,\n} from \"./controller\";\n\nconst router = express.Router();\n\n///////////////////// HOSTEL ALLOCATIONS /////////////////////////\n\n/**\n * @api {get} /api/v1/hostel-allocations?id={recordId} Retrieve one or all records\n * @apiName RetrieveHostelAllocation\n * @apiGroup HostelAllocation\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/hostel-allocations?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of HostelAllocation the school.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/hostel-allocations\", [checkAuth, isValidStaff], fetchHostelAllocation);\n\n/**\n * @api {post} /api/v1/hostel-allocations Create hostel-allocations\n * @apiName CreateHostelAllocation\n * @apiGroup HostelAllocation\n * @apiHeader {String} Authorization Bearer token\n* @apiParam {Number} id hostelAllocation primaryKey\n * @apiParam {String} bedspace hostelAllocation room name (required)\n * @apiParam {String} fees_payment hostelAllocation code name (required)\n * @apiParam {ObjectId} occupant hostelAllocation occupant (required)\n * @apiParam {String} description hostelAllocation description (optional)\n * @apiParam {String} status hostelAllocation Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 HostelAllocation not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/hostel-allocations\", [checkAuth, isValidStaff], createHostelAllocation);\n\n/**\n * @api {put} /api/v1/hostel-allocations/{recordId} Update hostel-allocations\n * @apiName UpdateHostelAllocation\n * @apiGroup HostelAllocation\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {Number} id hostelAllocation primaryKey\n * @apiParam {String} bedspace hostelAllocation room name (required)\n * @apiParam {String} fees_payment hostelAllocation code name (required)\n * @apiParam {ObjectId} occupant hostelAllocation occupant (required)\n * @apiParam {String} description hostelAllocation description (optional)\n * @apiParam {String} status hostelAllocation Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 HostelAllocation not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/hostel-allocations/:recordId\", [checkAuth, isValidStaff], updateHostelAllocation);\n\n/**\n * @api {delete} /api/v1/hostel-allocations/{recordId} Delete hostel-allocations\n * @apiName DeleteHostelAllocation\n * @apiGroup HostelAllocation\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 HostelAllocation not found.\n * @apiError 401 master HostelAllocation only.\n */\nrouter.delete(\"/hostel-allocations/:recordId\", [checkAuth, isValidStaff], deleteHostelAllocation);\n\n\n///////////////////// HOSTEL /////////////////////////\n\n/**\n * @api {get} /api/v1/hostels?id={recordId} Retrieve one or all records\n * @apiName RetrieveHostel\n * @apiGroup Hostel\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/hostels?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of Hostel the school.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/hostels\", [checkAuth, isValidStaff], fetchHostel);\n\n/**\n * @api {post} /api/v1/hostels Create hostels\n * @apiName CreateHostel\n * @apiGroup Hostel\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} hall Hostel hall name (required)\n * @apiParam {String} block Hostel block name (required)\n * @apiParam {Number} hostel_fees Hostel fees (required)\n * @apiParam {String} description Hostel description (optional)\n * @apiParam {String} status Hostel Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 HostelAllocation not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/hostels\", [checkAuth, isValidStaff], createHostel);\n\n/**\n * @api {put} /api/v1/hostels/{recordId} Update hostels\n * @apiName UpdateHostel\n * @apiGroup Hostel\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} hall Hostel hall name (required)\n * @apiParam {String} block Hostel block name (required)\n * @apiParam {Number} hostel_rooms Hostel Rooms (required)\n * @apiParam {Number} hostel_fees Hostel fees (required)\n * @apiParam {String} description Hostel description (optional)\n * @apiParam {String} status Hostel Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Hostel not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/hostels/:recordId\", [checkAuth, isValidStaff], updateHostel);\n\n/**\n * @api {delete} /api/v1/hostels/{recordId} Delete hostel-allocations\n * @apiName DeleteHostel\n * @apiGroup Hostel\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Hostel not found.\n * @apiError 401 master Hostel only.\n */\nrouter.delete(\"/hostels/:recordId\", [checkAuth, isValidStaff], deleteHostel);\n\n///////////////////// HOSTEL- ROOM /////////////////////////\n\n/**\n * @api {get} /api/v1/hostel-rooms?id={recordId} Retrieve one or all records\n * @apiName RetrieveHostelRoom\n * @apiGroup HostelRoom\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/hostel-rooms?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of HostelRoom the school.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/hostel-rooms\", [checkAuth, isValidStaff], fetchHostelRoom);\n\n/**\n * @api {post} /api/v1/hostel-rooms Create hostel-rooms\n * @apiName CreateHostelRoom\n * @apiGroup HostelRoom\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} hostel hostelRoom hostel name (required)\n * @apiParam {String} code hostelRoom code name (required)\n * @apiParam {Number} floor hostelRoom floor (required)\n * @apiParam {String} description hostelRoom description (optional)\n * @apiParam {String} status hostelRoom Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 HostelRoom not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/hostel-rooms\", [checkAuth, isValidStaff], createHostelRoom);\n\n/**\n * @api {put} /api/v1/hostel-rooms/{recordId} Update hostel-rooms\n * @apiName UpdateHostelRoom\n * @apiGroup HostelRoom\n * @apiHeader {String} Authorization Bearer token\n* @apiParam {String} hostel hostelRoom hostel name (required)\n * @apiParam {String} code hostelRoom code name (required)\n * @apiParam {Number} floor hostelRoom floor (required)\n * @apiParam {Number} hostel_bedspaces hostelRoom floor (required)\n * @apiParam {String} description hostelRoom description (optional)\n * @apiParam {String} status hostelRoom Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Hostel not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/hostel-rooms/:recordId\", [checkAuth, isValidStaff], updateHostelRoom);\n\n/**\n * @api {delete} /api/v1/hostel-rooms/{recordId} Delete hostel-rooms\n * @apiName DeleteHostelRoom\n * @apiGroup HostelRoom\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 HostelRoom not found.\n * @apiError 401 master HostelRoom only.\n */\nrouter.delete(\"/hostels/:recordId\", [checkAuth, isValidStaff], deleteHostelRoom);\n\n\n///////////////////// HOSTEL- BEDSPACE /////////////////////////\n\n/**\n * @api {get} /api/v1/hostel-bedspaces?id={recordId} Retrieve one or all records\n * @apiName RetrieveHostelBedspace\n * @apiGroup HostelBedspace\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/hostel-bedspaces?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of HostelBedspace the school.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/hostel-bedspaces\", [checkAuth, isValidStaff], fetchHostelBedspace);\n\n/**\n * @api {post} /api/v1/hostel-bedspaces Create hostel-bedspaces\n * @apiName CreateHostelBedspace\n * @apiGroup HostelBedspace\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} room hostelBedspace room name (required)\n * @apiParam {String} code hostelBedspace code name (required)\n * @apiParam {Number} occupant hostelBedspace occupant (required)\n * @apiParam {String} description hostelBedspace description (optional)\n * @apiParam {String} status hostelBedspace Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 HostelBedspace not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/hostel-bedspaces\", [checkAuth, isValidStaff], createHostelBedspace);\n\n/**\n * @api {put} /api/v1/hostel-bedspaces/{recordId} Update hostel-bedspaces\n * @apiName UpdateHostelBedspace\n * @apiGroup HostelBedspace\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} room hostelBedspace room name (required)\n * @apiParam {String} code hostelBedspace code name (required)\n * @apiParam {Number} occupant hostelBedspace occupant (required)\n * @apiParam {String} description hostelBedspace description (optional)\n * @apiParam {String} status hostelBedspace Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 HostelBedspace not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/hostel-bedspaces/:recordId\", [checkAuth, isValidStaff], updateHostelBedspace);\n\n/**\n * @api {delete} /api/v1/hostel-bedspaces/{recordId} Delete hostel-bedspaces\n * @apiName DeleteHostelBedspace\n * @apiGroup HostelBedspace\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 HostelBedspace not found.\n * @apiError 401 master HostelBedspace only.\n */\nrouter.delete(\"/hostel-bedspaces/:recordId\", [checkAuth, isValidStaff], deleteHostelBedspace);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/hostel-allocation/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","HostelAllocation","find","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchHostelAllocation","data","body","Joi","validate","hostelAllocationCreate","newRecord","save","createHostelAllocation","id","params","recordId","hostelAllocationUpdate","findOneAndUpdate","_id","new","updateHostelAllocation","findOneAndRemove","deleteHostelAllocation","Hostel","fetchHostel","hostelCreate","createHostel","hostelUpdate","updateHostel","deleteHostel","HostelRoom","fetchHostelRoom","hostelRoomCreate","createHostelRoom","hostelRoomUpdate","updateHostelRoom","deleteHostelRoom","HostelBedspace","fetchHostelBedspace","hostelBedspaceCreate","createHostelBedspace","hostelBedspaceUpdate","updateHostelBedspace","deleteHostelBedspace","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\r\nimport log4js from \"log4js\";\r\nimport aqp from \"api-query-params\";\r\nimport HostelAllocation,\r\n{\r\n    Hostel, hostelCreate, hostelUpdate,\r\n    HostelRoom, hostelRoomCreate, hostelRoomUpdate,\r\n    HostelBedspace, hostelBedspaceCreate, hostelBedspaceUpdate,\r\n    hostelAllocationCreate, hostelAllocationUpdate,\r\n} from \"./model\";\r\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\r\nimport { STATUS_MSG } from \"../../../constants\";\r\n\r\n// Logging\r\nconst logger = log4js.getLogger(\"[hostel-allocation]\");\r\nlog4js.configure({\r\n    appenders: { file: { type: \"file\", filename: \"logs/hostel-allocation.log\" } },\r\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\r\n});\r\n\r\nexport async function fetchHostelAllocation(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await HostelAllocation.find(filter)\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function createHostelAllocation(req, res) {\r\n    const data = req.body;\r\n    const { error } = Joi.validate(data, hostelAllocationCreate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    const newRecord = new HostelAllocation(data);\r\n    try {\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateHostelAllocation(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, hostelAllocationUpdate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await HostelAllocation.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteHostelAllocation(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await HostelAllocation.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}\r\n\r\n\r\n/////////////// HOSTEL CONTROLLER ///////////////\r\n\r\n\r\nexport async function fetchHostel(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await Hostel.find(filter)\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function createHostel(req, res) {\r\n    const data = req.body;\r\n    const { error } = Joi.validate(data, hostelCreate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    const newRecord = new Hostel(data);\r\n    try {\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateHostel(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, hostelUpdate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await Hostel.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteHostel(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await Hostel.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}\r\n\r\n/////////////// HOSTEL-ROOM CONTROLLER ///////////////\r\n\r\nexport async function fetchHostelRoom(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await HostelRoom.find(filter)\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function createHostelRoom(req, res) {\r\n    const data = req.body;\r\n    const { error } = Joi.validate(data, hostelRoomCreate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    const newRecord = new HostelRoom(data);\r\n    try {\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateHostelRoom(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, hostelRoomUpdate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await HostelRoom.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteHostelRoom(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await HostelRoom.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}\r\n\r\n/////////////// HOSTEL-BEDSPACE CONTROLLER ///////////////\r\n\r\n\r\nexport async function fetchHostelBedspace(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await HostelBedspace.find(filter)\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function createHostelBedspace(req, res) {\r\n    const data = req.body;\r\n    const { error } = Joi.validate(data, hostelBedspaceCreate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    const newRecord = new HostelBedspace(data);\r\n    try {\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateHostelBedspace(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, hostelBedspaceUpdate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await HostelBedspace.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteHostelBedspace(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await HostelBedspace.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}"]}
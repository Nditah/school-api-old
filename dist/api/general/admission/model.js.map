{"version":3,"sources":["../../../../src/api/general/admission/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","OFFICE_TYPE","SUBSIDIARY","table","Staff","Schema","ObjectId","Types","schemaCreate","name","string","trim","required","code","optional","email","phone","functions","description","hierarchy","number","subsidiary","valid","Object","values","admission_type","admission_above","head","assistant","created_by","schemaUpdate","updated_by","schema","type","String","lowercase","unique","match","Number","enum","default","PEACEGROUP","ref","preload","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","Admission","model","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id admission primaryKey\n * @property {String} passport Admission Surname (required)\n * @property {String} surname Admission Surname (required)\n * @property {String} first_name Admission First Name\n * @property {String} middle_name Admission Middle Name\n * @property {String} home_town Admission phone number\n * @property {String} village Admission list tasks the admission performs\n * @property {String} county Admission job-description staff performs\n * @property {Number} state Admission hierarchy [1-7]\n * @property {Enum} birth_date Admission admission_type \"PRINCIPAL|VICE-PRINCIPAL|ACADEMIC|ADMINISTRATIVE\"\n * @property {Enum} religion Admission subsidiary \"NURSRY|PRIMARY|SECONDARY|PRE-NURSRY\"\n * @property {ObjectId} denomination Admission above this.\n * @property {ObjectId} last_class Admission Head Staff Id\n * @property {ObjectId} intending_class Admission Assistant Head Staff Id\n * @property {ObjectId} last_school Admission Assistant Head Staff Id\n * @property {ObjectId} father_name Admission Assistant Head Staff Id\n * @property {ObjectId} mother_name Admission Assistant Head Staff Id\n * @property {ObjectId} home_address Admission Assistant Head Staff Id\n * @property {ObjectId} phone_number Admission Assistant Head Staff Id\n * @description Admission model holds record of all admissions in Peace Group\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, OFFICE_TYPE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\n// eslint-disable-next-line import/no-cycle\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    code: Joi.string().trim().optional(),\n    email: Joi.string().trim().optional(),\n    phone: Joi.string().trim().optional(),\n    functions: Joi.string().optional(),\n    description: Joi.string().optional(),\n    hierarchy: Joi.number().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    admission_type: Joi.string().valid(Object.values(OFFICE_TYPE)).optional(),\n    admission_above: Joi.string().optional(),\n    head: Joi.string().optional(),\n    assistant: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    code: Joi.string().trim().optional(),\n    email: Joi.string().trim().optional(),\n    phone: Joi.string().trim().optional(),\n    functions: Joi.string().optional(),\n    description: Joi.string().optional(),\n    hierarchy: Joi.number().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    admission_type: Joi.string().valid(Object.values(OFFICE_TYPE)).optional(),\n    admission_above: Joi.string().optional(),\n    head: Joi.string().optional(),\n    assistant: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: [true, \"Why no input?\"] },\n    code: { type: String },\n    phone: { type: String },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    functions: { type: String },\n    description: { type: String },\n    hierarchy: { type: Number },\n    admission_type: {\n        type: String,\n        enum: Object.values(OFFICE_TYPE),\n        required: [true, \"Why no input?\"],\n    },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [true, \"Why no input?\"],\n        default: SUBSIDIARY.PEACEGROUP,\n    },\n    admission_above: { type: ObjectId, ref: \"Admission\" },\n    head: { type: ObjectId, ref: \"Staff\" },\n    assistant: { type: ObjectId, ref: \"Staff\" },\n    created_by: { type: ObjectId, required: true, ref: \"Staff\" },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"admission\");\nnewSchema.plugin(mongoose_csv);\n\nconst Admission = mongoose.model(\"Admission\", newSchema);\n\nif (preload) { Admission.insertMany(table); }\n\nexport default Admission;\n"]}
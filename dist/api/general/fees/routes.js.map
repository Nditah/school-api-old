{"version":3,"sources":["../../../../src/api/general/fees/routes.js"],"names":["router","express","Router","get","fetchFees","post","checkAuth","isValidStaff","createFees","put","updateFees","delete","deleteFees","fetchFeesPayment","createFeesPayment","updateFeesPayment","deleteFeesPayment"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;;AAiBAF,OAAOG,GAAP,CAAW,OAAX,EAAoBC,qBAApB;;AAEA;;;;;;;;;;;;;;AAcAJ,OAAOK,IAAP,CAAY,OAAZ,EAAqB,CAACC,wBAAD,EAAYC,2BAAZ,CAArB,EAAgDC,sBAAhD;;AAEA;;;;;;;;;;;;;;AAcAR,OAAOS,GAAP,CAAW,iBAAX,EAA8B,CAACH,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDG,sBAAzD;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,iBAAd,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DK,sBAA5D;;AAEA;;AAEA;;;;;;;;;;;;;;;;;AAiBAZ,OAAOG,GAAP,CAAW,gBAAX,EAA6BU,4BAA7B;;AAEA;;;;;;;;;;;;;;;;;AAiBAb,OAAOK,IAAP,CAAY,gBAAZ,EAA8B,CAACC,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDO,6BAAzD;;AAEA;;;;;;;;;;;;;;;;;AAiBAd,OAAOS,GAAP,CAAW,0BAAX,EAAuC,CAACH,wBAAD,EAAYC,2BAAZ,CAAvC,EAAkEQ,6BAAlE;;AAEA;;;;;;;;;;AAUAf,OAAOW,MAAP,CAAc,0BAAd,EAA0C,CAACL,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqES,6BAArE;;kBAEehB,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchFees, createFees, updateFees, deleteFees,\n    fetchFeesPayment, createFeesPayment, updateFeesPayment, deleteFeesPayment,\n} from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/fees?id={recordId} Retrieve Fees records\n * @apiName RetrieveFees filter, skip, limit, sort, projection\n * @apiGroup Fees\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/Feess?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Feess of all Feess and branches worldwide.\n * Routes are established as links between Feess. Certain Feess are Hubs.\n * Read more from https://www.npmjs.com/package/api-query-params\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/fees\", fetchFees);\n\n/**\n * @api {post} /api/v1/fees Create a Fees record\n * @apiName CreateFees\n * @apiGroup Fees\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} type Fees type String,\n * @apiParam {ObjectId} classe_id Fees classe_id (required)\n * @apiParam {String} amount Fees amount (required),\n * @apiParam {String} description Fees description String\n * @apiSuccess {Object} Fees Fees's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Fees not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/fees\", [checkAuth, isValidStaff], createFees);\n\n/**\n * @api {put} /api/v1/fees/{recordId} Update a Fees record\n * @apiName UpdateFees\n * @apiGroup Fees\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} type Fees type String,\n * @apiParam {ObjectId} classe_id Fees classe_id (required)\n * @apiParam {String} amount Fees amount (required),\n * @apiParam {String} description Fees description String\n * @apiSuccess {Object} Fees Fees's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Fees not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/fees/:recordId\", [checkAuth, isValidStaff], updateFees);\n\n/**\n * @api {delete} /api/v1/fees/{recordId} Delete a Fees record\n * @apiName DeleteFees\n * @apiGroup Fees\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Fees not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/fees/:recordId\", [checkAuth, isValidStaff], deleteFees);\n\n//* ======FEES-PAYMENT ========\n\n/**\n * @api {get} /api/v1/fees-payments?id={recordId} Retrieve FeesPayment records\n * @apiName RetrieveFeesPayment filter, skip, limit, sort, projection\n * @apiGroup FeesPayment\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/fees-payments?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription FeesPayments of all Fees Payments and branches worldwide.\n * Routes are established as links between FeesPayment. Certain Fees Payments are Hubs.\n * Read more from https://www.npmjs.com/package/api-query-params\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/fees-payments\", fetchFeesPayment);\n\n/**\n * @api {post} /api/v1/fees-payments Create a fees payments record\n * @apiName CreateFeesPayments\n * @apiGroup FeesPayments\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} fees_type_id Fees Payments ,\n * @apiParam {String} student_id Fees Payments student_id (required)\n * @apiParam {String} payment_method Fees Payments payment_method (required),\n * @apiParam {Number} amount Fees Payments amount number\n * @apiParam {String} deposition Fees Payments deposition String\n * @apiParam {Date} pay_date Fees Payments pay_date Date\n * @apiParam {String} remark Fees Payments remark String\n * @apiSuccess {Object} FeesPayments FeesPayments's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Fees Payments not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/fees-payments\", [checkAuth, isValidStaff], createFeesPayment);\n\n/**\n * @api {put} /api/v1/fees-payments/{recordId} Update a FeesPayments record\n * @apiName UpdateFeesPayments\n * @apiGroup FeesPayments\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} fees_type_id Fees Payments ,\n * @apiParam {String} student_id Fees Payments student_id (required)\n * @apiParam {String} payment_method Fees Payments payment_method (required),\n * @apiParam {Number} amount Fees Payments amount number\n * @apiParam {String} deposition Fees Payments deposition String\n * @apiParam {Date} pay_date Fees Payments pay_date Date\n * @apiParam {String} remark Fees Payments remark String\n * @apiSuccess {Object} FeesPayments FeesPayments's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 FeesPayments not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/fees-payments/:recordId\", [checkAuth, isValidStaff], updateFeesPayment);\n\n/**\n * @api {delete} /api/v1/fees-payments/{recordId} Delete a FeesPayments record\n * @apiName DeleteFeesPayment\n * @apiGroup FeesPayments\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 FeesPayments not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/fees-payments/:recordId\", [checkAuth, isValidStaff], deleteFeesPayment);\n\nexport default router;\n"]}
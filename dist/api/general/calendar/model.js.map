{"version":3,"sources":["../../../../src/api/general/calendar/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","start_date","Joi","date","required","end_date","optional","title","string","notification","created_by","schemaUpdate","updated_by","schema","type","Date","String","default","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Calendar","model","insertMany","table"],"mappings":";;;;;;;AASA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;AAJA;AAXA;;;;;;;;;IAiBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,gBAAYC,cAAIC,IAAJ,GAAWC,QAAX,EADY;AAExBC,cAAUH,cAAIC,IAAJ,GAAWG,QAAX,EAFc;AAGxBC,WAAOL,cAAIM,MAAJ,GAAaJ,QAAb,EAHiB;AAIxBK,kBAAcP,cAAIM,MAAJ,GAAaF,QAAb,EAJU;AAKxBI,gBAAYR,cAAIM,MAAJ,GAAaJ,QAAb;AALY,CAArB;;AAQA,IAAMO,sCAAe;AACxBV,gBAAYC,cAAIC,IAAJ,GAAWG,QAAX,EADY;AAExBD,cAAUH,cAAIC,IAAJ,GAAWG,QAAX,EAFc;AAGxBC,WAAOL,cAAIM,MAAJ,GAAaF,QAAb,EAHiB;AAIxBG,kBAAcP,cAAIM,MAAJ,GAAaF,QAAb,EAJU;AAKxBM,gBAAYV,cAAIM,MAAJ,GAAaJ,QAAb;AALY,CAArB;;AAQA,IAAMS,0BAAS;AAClBZ,gBAAY,EAAEa,MAAMC,IAAR,EAAcX,UAAU,CAAC,IAAD,EAAO,eAAP,CAAxB,EADM;AAElBC,cAAU,EAAES,MAAMC,IAAR,EAFQ;AAGlBR,WAAO,EAAEO,MAAME,MAAR,EAAgBZ,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAHW;AAIlBK,kBAAc,EAAEK,MAAME,MAAR,EAJI;AAKlBN,gBAAY,EAAEI,MAAMhB,QAAR,EAAkBM,UAAU,CAAC,IAAD,EAAO,eAAP,CAA5B,EAAqDa,SAAS,CAA9D,EALM;AAMlBL,gBAAY,EAAEE,MAAMhB,QAAR,EAAkBoB,KAAK,OAAvB;AANM,CAAf;AAQP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWiB,MAAX,EAAmBU,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,UAA5B;;AAEA,IAAMC,WAAW9B,mBAAS+B,KAAT,CAAe,UAAf,EAA2BH,SAA3B,CAAjB;;AAEA,IAAIN,OAAJ,EAAa;AAAEQ,aAASE,UAAT,CAAoBC,eAApB;AAA6B;;kBAE7BH,Q","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} id Calendar primaryKey\n * @property {Date} start_date Calender event start_date\n * @property {Date} end_date Calender event end_date\n * @property {String} title Calender appointment title\n * @property {String} notification Calender appointment notification description\n * @description Calendar holds records of appointment to be sent out via sms\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    start_date: Joi.date().required(),\n    end_date: Joi.date().optional(),\n    title: Joi.string().required(),\n    notification: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    start_date: Joi.date().optional(),\n    end_date: Joi.date().optional(),\n    title: Joi.string().optional(),\n    notification: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    start_date: { type: Date, required: [true, \"Why no input?\"] },\n    end_date: { type: Date },\n    title: { type: String, required: [true, \"Why no input?\"] },\n    notification: { type: String },\n    created_by: { type: ObjectId, required: [true, \"Why no input?\"], default: 1 },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"calendar\");\n\nconst Calendar = mongoose.model(\"Calendar\", newSchema);\n\nif (preload) { Calendar.insertMany(table); }\n\nexport default Calendar;\n"]}
{"version":3,"sources":["../../../../src/api/general/office/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","trim","required","code","optional","email","phone","functions","description","hierarchy","number","subsidiary","valid","Object","values","SUBSIDIARY","office_type","OFFICE_TYPE","office_above","head","assistant","created_by","schemaUpdate","updated_by","schema","type","String","lowercase","unique","match","Number","enum","default","SCHOOL","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","Office","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id office primaryKey\n * @property {String} name Office name (required)\n * @property {String} code Office code\n * @property {String} email Office email\n * @property {String} phone Office phone number\n * @property {String} functions Office list tasks the office performs\n * @property {String} description Office job-description staff performs\n * @property {Number} hierarchy Office hierarchy [1-7]\n * @property {Enum} office_type Office office_type \"PRINCIPAL|VICE-PRINCIPAL|ACADEMIC|ADMINISTRATIVE\"\n * @property {Enum} subsidiary Office subsidiary \"NURSRY|PRIMARY|SECONDARY|PRE-NURSRY\"\n * @property {ObjectId} office_above Office above this.\n * @property {ObjectId} head Office Head Staff Id\n * @property {ObjectId} assistant Office Assistant Head Staff Id\n * @description Office model holds record of all offices in Peace Group\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, OFFICE_TYPE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\n// eslint-disable-next-line import/no-cycle\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    code: Joi.string().trim().optional(),\n    email: Joi.string().trim().optional(),\n    phone: Joi.string().trim().optional(),\n    functions: Joi.string().optional(),\n    description: Joi.string().optional(),\n    hierarchy: Joi.number().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    office_type: Joi.string().valid(Object.values(OFFICE_TYPE)).optional(),\n    office_above: Joi.string().optional(),\n    head: Joi.string().optional(),\n    assistant: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    code: Joi.string().trim().optional(),\n    email: Joi.string().trim().optional(),\n    phone: Joi.string().trim().optional(),\n    functions: Joi.string().optional(),\n    description: Joi.string().optional(),\n    hierarchy: Joi.number().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    office_type: Joi.string().valid(Object.values(OFFICE_TYPE)).optional(),\n    office_above: Joi.string().optional(),\n    head: Joi.string().optional(),\n    assistant: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: [true, \"Why no input?\"] },\n    code: { type: String },\n    phone: { type: String },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    functions: { type: String },\n    description: { type: String },\n    hierarchy: { type: Number },\n    office_type: {\n        type: String,\n        enum: Object.values(OFFICE_TYPE),\n        required: [true, \"Why no input?\"],\n    },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [true, \"Why no input?\"],\n        default: SUBSIDIARY.SCHOOL,\n    },\n    office_above: { type: ObjectId, ref: \"Office\" },\n    head: { type: ObjectId, ref: \"Staff\" },\n    assistant: { type: ObjectId, ref: \"Staff\" },\n    created_by: { type: ObjectId, required: true, ref: \"Staff\" },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"office\");\nnewSchema.plugin(mongoose_csv);\n\nconst Office = mongoose.model(\"Office\", newSchema);\n\nif (preload) { Office.insertMany(table); }\n\nexport default Office;\n"]}
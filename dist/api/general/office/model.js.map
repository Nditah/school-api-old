{"version":3,"sources":["../../../../src/api/general/office/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","trim","required","code","optional","email","phone","functions","description","hierarchy","number","subsidiary","valid","Object","values","SUBSIDIARY","office_type","OFFICE_TYPE","office_above","head","assistant","created_by","schemaUpdate","updated_by","schema","type","String","lowercase","unique","match","Number","enum","default","SCHOOL","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","Office","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\r\n * @author 4Dcoder\r\n * @property {ObjectId} id office primaryKey\r\n * @property {String} name Office name (required)\r\n * @property {String} code Office code\r\n * @property {String} email Office email\r\n * @property {String} phone Office phone number\r\n * @property {String} functions Office list tasks the office performs\r\n * @property {String} description Office job-description staff performs\r\n * @property {Number} hierarchy Office hierarchy [1-7]\r\n * @property {Enum} office_type Office office_type \"PRINCIPAL|VICE-PRINCIPAL|ACADEMIC|ADMINISTRATIVE\"\r\n * @property {Enum} subsidiary Office subsidiary \"NURSRY|PRIMARY|SECONDARY|PRE-NURSRY\"\r\n * @property {ObjectId} office_above Office above this.\r\n * @property {ObjectId} head Office Head Staff Id\r\n * @property {ObjectId} assistant Office Assistant Head Staff Id\r\n * @description Office model holds record of all offices in Peace Group\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE, OFFICE_TYPE, SUBSIDIARY } from \"../../../constants\";\r\nimport table from \"./table\";\r\n// eslint-disable-next-line import/no-cycle\r\nimport Staff from \"../staff/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaCreate = {\r\n    name: Joi.string().trim().required(),\r\n    code: Joi.string().trim().optional(),\r\n    email: Joi.string().trim().optional(),\r\n    phone: Joi.string().trim().optional(),\r\n    functions: Joi.string().optional(),\r\n    description: Joi.string().optional(),\r\n    hierarchy: Joi.number().optional(),\r\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\r\n    office_type: Joi.string().valid(Object.values(OFFICE_TYPE)).optional(),\r\n    office_above: Joi.string().optional(),\r\n    head: Joi.string().optional(),\r\n    assistant: Joi.string().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    name: Joi.string().trim().optional(),\r\n    code: Joi.string().trim().optional(),\r\n    email: Joi.string().trim().optional(),\r\n    phone: Joi.string().trim().optional(),\r\n    functions: Joi.string().optional(),\r\n    description: Joi.string().optional(),\r\n    hierarchy: Joi.number().optional(),\r\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\r\n    office_type: Joi.string().valid(Object.values(OFFICE_TYPE)).optional(),\r\n    office_above: Joi.string().optional(),\r\n    head: Joi.string().optional(),\r\n    assistant: Joi.string().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    name: { type: String, required: [true, \"Why no input?\"] },\r\n    code: { type: String },\r\n    phone: { type: String },\r\n    email: {\r\n        type: String,\r\n        trim: true,\r\n        lowercase: true,\r\n        unique: true,\r\n        // eslint-disable-next-line no-useless-escape\r\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n            \"Please fill a valid email address\"],\r\n    },\r\n    functions: { type: String },\r\n    description: { type: String },\r\n    hierarchy: { type: Number },\r\n    office_type: {\r\n        type: String,\r\n        enum: Object.values(OFFICE_TYPE),\r\n        required: [true, \"Why no input?\"],\r\n    },\r\n    subsidiary: {\r\n        type: String,\r\n        enum: Object.values(SUBSIDIARY),\r\n        required: [true, \"Why no input?\"],\r\n        default: SUBSIDIARY.SCHOOL,\r\n    },\r\n    office_above: { type: ObjectId, ref: \"Office\" },\r\n    head: { type: ObjectId, ref: \"Staff\" },\r\n    assistant: { type: ObjectId, ref: \"Staff\" },\r\n    created_by: { type: ObjectId, required: true, ref: \"Staff\" },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.set(\"collection\", \"office\");\r\nnewSchema.plugin(mongoose_csv);\r\n\r\nconst Office = mongoose.model(\"Office\", newSchema);\r\n\r\nif (preload) { Office.insertMany(table); }\r\n\r\nexport default Office;\r\n"]}
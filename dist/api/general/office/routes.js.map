{"version":3,"sources":["../../../../src/api/general/office/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAN,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDG,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DK,wBAA5D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DO,wBAA/D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/offices?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveOffice\r\n * @apiGroup Office\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/offices?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records of Staff Office in a hierarchy that give staff certain privileges.\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/offices\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/offices Create offices\r\n * @apiName CreateOffice\r\n * @apiGroup Office\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} name Office name (required)\r\n * @apiParam {String} code Office code\r\n * @apiParam {String} email Office email\r\n * @apiParam {String} phone Office phone number\r\n * @apiParam {String} functions Office list tasks the office performs\r\n * @apiParam {String} description Office job-description staff performs\r\n * @apiParam {Number} hierarchy Office hierarchy [1-7]\r\n * @apiParam {Enum} office_type Office office_type\r\n * \"PRINCIPAL|VICE-PRINCIPAL|ACADEMIC|ADMINISTRATIVE\"\r\n * @apiParam {Enum} subsidiary Office subsidiary \"NURSRY|PRIMARY|SECONDARY|PRE-NURSRY\"\r\n * @apiParam {ObjectId} office_above Office above this.\r\n * @apiParam {ObjectId} head Office Head Staff Id\r\n * @apiParam {ObjectId} assistant Office Assistant Head Staff Id\r\n * @apiSuccess {Object} Office Office's data.\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 Office not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.post(\"/offices\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/offices/{recordId} Update offices\r\n * @apiName UpdateOffice\r\n * @apiGroup Office\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} name Office name (required)\r\n * @apiParam {String} code Office code\r\n * @apiParam {String} email Office email\r\n * @apiParam {String} phone Office phone number\r\n * @apiParam {String} functions Office list tasks the office performs\r\n * @apiParam {String} description Office job-description staff performs\r\n * @apiParam {Number} hierarchy Office hierarchy [1-7]\r\n * @apiParam {Enum} office_type Office office_type\r\n *  \"PRINCIPAL|VICE-PRINCIPAL|ACADEMIC|ADMINISTRATIVE\"\r\n * @apiParam {Enum} subsidiary Office subsidiary \"NURSRY|PRIMARY|SECONDARY|PRE-NURSRY\"\r\n * @apiParam {ObjectId} office_above Office above this.\r\n * @apiParam {ObjectId} head Office Head Staff Id\r\n * @apiParam {ObjectId} assistant Office Assistant Head Staff Id\r\n * @apiSuccess {Object} Office Office's data.\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 Office not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.put(\"/offices/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/offices/{recordId} Delete offices\r\n * @apiName DeleteOffice\r\n * @apiGroup Office\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Office not found.\r\n * @apiError 401 master office only.\r\n */\r\nrouter.delete(\"/offices/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
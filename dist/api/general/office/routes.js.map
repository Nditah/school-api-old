{"version":3,"sources":["../../../../src/api/general/office/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAN,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDG,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DK,wBAA5D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DO,wBAA/D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/offices?id={recordId} Retrieve one or all records\n * @apiName RetrieveOffice\n * @apiGroup Office\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/offices?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of Staff Office in a hierarchy that give staff certain privileges.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/offices\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/offices Create offices\n * @apiName CreateOffice\n * @apiGroup Office\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Office name (required)\n * @apiParam {String} code Office code\n * @apiParam {String} email Office email\n * @apiParam {String} phone Office phone number\n * @apiParam {String} functions Office list tasks the office performs\n * @apiParam {String} description Office job-description staff performs\n * @apiParam {Number} hierarchy Office hierarchy [1-7]\n * @apiParam {Enum} office_type Office office_type\n * \"PRINCIPAL|VICE-PRINCIPAL|ACADEMIC|ADMINISTRATIVE\"\n * @apiParam {Enum} subsidiary Office subsidiary \"NURSRY|PRIMARY|SECONDARY|PRE-NURSRY\"\n * @apiParam {ObjectId} office_above Office above this.\n * @apiParam {ObjectId} head Office Head Staff Id\n * @apiParam {ObjectId} assistant Office Assistant Head Staff Id\n * @apiSuccess {Object} Office Office's data.\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Office not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/offices\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/offices/{recordId} Update offices\n * @apiName UpdateOffice\n * @apiGroup Office\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Office name (required)\n * @apiParam {String} code Office code\n * @apiParam {String} email Office email\n * @apiParam {String} phone Office phone number\n * @apiParam {String} functions Office list tasks the office performs\n * @apiParam {String} description Office job-description staff performs\n * @apiParam {Number} hierarchy Office hierarchy [1-7]\n * @apiParam {Enum} office_type Office office_type\n *  \"PRINCIPAL|VICE-PRINCIPAL|ACADEMIC|ADMINISTRATIVE\"\n * @apiParam {Enum} subsidiary Office subsidiary \"NURSRY|PRIMARY|SECONDARY|PRE-NURSRY\"\n * @apiParam {ObjectId} office_above Office above this.\n * @apiParam {ObjectId} head Office Head Staff Id\n * @apiParam {ObjectId} assistant Office Assistant Head Staff Id\n * @apiSuccess {Object} Office Office's data.\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Office not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/offices/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/offices/{recordId} Delete offices\n * @apiName DeleteOffice\n * @apiGroup Office\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Office not found.\n * @apiError 401 master office only.\n */\nrouter.delete(\"/offices/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
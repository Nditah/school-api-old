{"version":3,"sources":["../../../../src/api/general/curriculum/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;AAcAF,OAAOG,GAAP,CAAW,cAAX,EAA2B,CAACC,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDC,uBAAtD;;AAEA;;;;;;;;;;;;;;AAcAN,OAAOO,IAAP,CAAY,cAAZ,EAA4B,CAACH,wBAAD,EAAYC,2BAAZ,CAA5B,EAAuDG,wBAAvD;;AAEA;;;;;;;;;;;;AAYAR,OAAOS,GAAP,CAAW,wBAAX,EAAqC,CAACL,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEK,wBAAhE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,wBAAd,EAAwC,CAACP,wBAAD,EAAYC,2BAAZ,CAAxC,EAAmEO,wBAAnE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/curriculums?id={recordId} Retrieve one or all records\n * @apiName RetrieveCurriculum\n * @apiGroup Curriculum\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/curriculums?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {String} description Curriculum description String (required)\n * @apiParam {String} scheme Curriculum scheme String\n * @apiParam {ObjectId} staff_id Curriculum staff ObjectId\n * @apiParam {ObjectId} book_id Curriculum Book ObjectId\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/curriculums\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/curriculums Create curriculums\n * @apiName CreateCurriculum\n * @apiGroup Curriculum\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} description Curriculum description String (required)\n * @apiParam {String} scheme Curriculum scheme String\n * @apiParam {ObjectId} staff_id Curriculum staff ObjectId\n * @apiParam {ObjectId} book_id Curriculum Book ObjectId\n * @apiSuccess {Object} Curriculum Staff's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Curriculum not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/curriculums\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/curriculums/{recordId} Update curriculums\n * @apiName UpdateCurriculum\n * @apiGroup Curriculum\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} book_id Curriculum Book ObjectId (required)\n * @apiParam {String} description Curriculum description\n * @apiSuccess {Object} Curriculum Staff's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Curriculum not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/curriculums/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/curriculums/{recordId} Delete curriculums\n * @apiName DeleteCurriculum\n * @apiGroup Curriculum\n * @apiPermission master\n * @apiParam {String} recordId ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Curriculum not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/curriculums/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
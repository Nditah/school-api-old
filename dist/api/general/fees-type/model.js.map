{"version":3,"sources":["../../../../src/api/general/fees-type/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","type","Joi","string","optional","classe","amount","description","created_by","required","schemaUpdate","updated_by","schema","String","Number","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","FeesType","model"],"mappings":";;;;;;;AAYA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AAPR;AAdA;AACA;;;;;;;;;;;;IAqBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFgB;AAGxBE,YAAQJ,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIxBG,iBAAaL,cAAIC,MAAJ,GAAaC,QAAb,EAJW;AAKxBI,gBAAYN,cAAIC,MAAJ,GAAaM,QAAb;AALY,CAArB;;AAQA,IAAMC,sCAAe;AACxBT,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFgB;AAGxBE,YAAQJ,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIxBG,iBAAaL,cAAIC,MAAJ,GAAaC,QAAb,EAJW;AAKxBO,gBAAYT,cAAIC,MAAJ,GAAaM,QAAb;AALY,CAArB;;AAQA,IAAMG,0BAAS;AAClBX,UAAM,EAAEA,MAAMY,MAAR,EADY;AAElBR,YAAQ,EAAEJ,MAAMH,QAAR,EAAkBW,UAAU,IAA5B,EAFU;AAGlBH,YAAQ,EAAEL,MAAMa,MAAR,EAAgBL,UAAU,IAA1B,EAHU;AAIlBF,iBAAa,EAAEN,MAAMY,MAAR,EAJK;AAKlBL,gBAAY,EAAEP,MAAMH,QAAR,EAAkBiB,KAAK,OAAvB,EAAgCN,UAAU,IAA1C,EALM;AAMlBE,gBAAY,EAAEV,MAAMH,QAAR;AANM,CAAf;;AASP,IAAMkB,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI1B,MAAJ,CAAWgB,MAAX,EAAmBQ,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,WAA5B;AACAD,UAAUE,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,WAAW7B,mBAAS8B,KAAT,CAAe,UAAf,EAA2BL,SAA3B,CAAjB;;kBAEeI,Q","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {ObjectId} id Table primaryKey\n * @property {String} type Type of fees to pay,\n * @property {ObjectId} classe_id Fees for a particular class(required),\n * @property {Number} amount Amount for each class,\n * @property {String} description Table description about fee payment\n * @property {ObjectId} created_by Table record created by\n * @property {ObjectId} updated_by Table record modified by\n * @description Table holds record of all cities with table_list\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Classes from \"../classe/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    type: Joi.string().optional(),\n    classe: Joi.string().optional(),\n    amount: Joi.string().optional(),\n    description: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    type: Joi.string().optional(),\n    classe: Joi.string().optional(),\n    amount: Joi.string().optional(),\n    description: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    type: { type: String },\n    classe: { type: ObjectId, required: true },\n    amount: { type: Number, required: true },\n    description: { type: String },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"fees_type\");\nnewSchema.plugin(mongoose_csv);\n\nconst FeesType = mongoose.model(\"FeesType\", newSchema);\n\nexport default FeesType;\n"]}
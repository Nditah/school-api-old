{"version":3,"sources":["../../../../src/api/general/payroll/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Payroll","find","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchPayroll","data","body","Joi","validate","payrollCreate","newPayroll","save","createPayroll","id","params","recordId","payrollUpdate","findOneAndUpdate","_id","new","updatePayroll","findOneAndRemove","deletePayroll","PayrollDetail","populate","path","fetchPayrollDetail","payrollDetailCreate","newPayrollDetail","createPayrollDetail","payrollDetailUpdate","updatePayrollDetail","deletePayrollDetail","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport {\n    Payroll, payrollCreate, payrollUpdate,\n    PayrollDetail, payrollDetailCreate, payrollDetailUpdate,\n} from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[payroll]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/payroll.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchPayroll(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Payroll.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createPayroll(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, payrollCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newPayroll = new Payroll(data);\n    try {\n        const result = await newPayroll.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Payroll created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updatePayroll(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, payrollUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Payroll.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Payroll updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deletePayroll(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Payroll.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Payroll deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\n//* ===========PAYROLL DETAIL==========\n\nexport async function fetchPayrollDetail(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await PayrollDetail.find(filter)\n            .populate(\"staff_id\", \"-password, -otp\")\n            .populate(\"payroll_id\")\n            .populate({ path: \"staff_id\", populate: { path: \"office_id\" } })\n            .populate(\"created_by\", \"id surname given_name email phone\")\n            .populate(\"updated_by\", \"id surname given_name email phone\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createPayrollDetail(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, payrollDetailCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newPayrollDetail = new PayrollDetail(data);\n    try {\n        const result = await newPayrollDetail.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"PayrollDetail created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updatePayrollDetail(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, payrollDetailUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await PayrollDetail.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"PayrollDetail updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deletePayrollDetail(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await PayrollDetail.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"PayrollDetail deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
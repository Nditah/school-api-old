{"version":3,"sources":["../../../../src/api/general/payroll/routes.js"],"names":["express","checkAuth","isValidStaff","fetchRecord","createRecord","updateRecord","deleteRecord","router","Router","get","post","put","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mCAAxC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,YAApC,EAAkDC,YAAlD,QAAsE,cAAtE;;AAEA,MAAMC,SAASP,QAAQQ,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAD,OAAOE,GAAP,CAAW,WAAX,EAAwB,CAACR,SAAD,EAAYC,YAAZ,CAAxB,EAAmDC,WAAnD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAI,OAAOG,IAAP,CAAY,WAAZ,EAAyB,CAACT,SAAD,EAAYC,YAAZ,CAAzB,EAAoDE,YAApD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAG,OAAOI,GAAP,CAAW,qBAAX,EAAkC,CAACV,SAAD,EAAYC,YAAZ,CAAlC,EAA6DG,YAA7D;;AAEA;;;;;;;;;;AAUAE,OAAOK,MAAP,CAAc,qBAAd,EAAqC,CAACX,SAAD,EAAYC,YAAZ,CAArC,EAAgEI,YAAhE;;AAEA,eAAeC,MAAf","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/payrolls?id={recordId} Retrieve Payroll records\n * @apiName RetrievePayroll\n * @apiGroup Payroll\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/payroll?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/payrolls\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/payrolls Create a Payroll record\n * @apiName CreatePayroll\n * @apiGroup Payroll\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {Date} period Payroll period YYYY-MM salary month\n * @apiParam {String} code Payroll code of transaction\n * @apiParam {String} subsidiary Payroll subsidiary of company eg PML\n * @apiParam {String} voucher Payroll voucher raised for salary\n * @apiParam {Array} payroll_detail_ids Payroll PayrollDetail ObjectIds\n * @apiParam {Number} total Payroll total sum of salary paid\n * @apiParam {Date} pay_start Payroll pay_start commence payment date\n * @apiParam {String} remark Payroll remark or any comment\n * @apiSuccess {Object} Payroll Payroll's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Payroll not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/payrolls\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/payrolls/{recordId} Update a Payroll record\n * @apiName UpdatePayroll\n * @apiGroup Payroll\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {Date} period Payroll period YYYY-MM salary month\n * @apiParam {String} code Payroll code of transaction\n * @apiParam {String} subsidiary Payroll subsidiary of company eg PML\n * @apiParam {String} voucher Payroll voucher raised for salary\n * @apiParam {Array} payroll_detail_ids Payroll PayrollDetail ObjectIds\n * @apiParam {Number} total Payroll total sum of salary paid\n * @apiParam {Date} pay_start Payroll pay_start commence payment date\n * @apiParam {String} remark Payroll remark or any comment\n * @apiSuccess {Object} Payroll Payroll's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Payroll not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/payrolls/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/payrolls/{recordId} Delete a Payroll record\n * @apiName DeletePayroll\n * @apiGroup Payroll\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Payroll not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/payrolls/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
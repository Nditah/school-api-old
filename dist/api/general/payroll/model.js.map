{"version":3,"sources":["../../../../src/api/general/payroll/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","period","Joi","date","required","code","string","trim","subsidiary","valid","Object","values","SUBSIDIARY","voucher","payroll_detail_ids","array","optional","total","number","pay_start","remark","created_by","schemaUpdate","updated_by","schema","type","Date","comment","String","enum","ref","Number","default","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Payroll","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Payroll primaryKey\n * @property {Date} period Payroll period YYYY-MM salary month\n * @property {String} code Payroll code of transaction\n * @property {String} subsidiary Payroll subsidiary of company eg PML\n * @property {String} voucher Payroll voucher raised for salary\n * @property {Array} payroll_detail_ids Payroll PayrollDetail ObjectIds\n * @property {Number} total Payroll total sum of salary paid\n * @property {Date} pay_start Payroll pay_start commence payment date\n * @property {String} remark Payroll remark or any comment\n * @description Payroll model holds record of Salary payment summary\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Voucher from \"../voucher/model\";\n// eslint-disable-next-line import/no-cycle\nimport PayrollDetail from \"../payroll-detail/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    period: Joi.date().required(),\n    code: Joi.string().trim().required(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\n    voucher: Joi.string().required(),\n    payroll_detail_ids: Joi.array().optional(),\n    total: Joi.number().optional(),\n    pay_start: Joi.date().optional(),\n    remark: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    period: Joi.date().optional(),\n    code: Joi.string().trim().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    voucher: Joi.string().optional(),\n    payroll_detail_ids: Joi.array().optional(),\n    total: Joi.number().optional(),\n    pay_start: Joi.date().optional(),\n    remark: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    period: { type: Date, required: true, comment: \"Salary yyyy-mm date\" },\n    code: { type: String, required: true, comment: \"Transaction code\" },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    voucher: { type: ObjectId, ref: \"Voucher\" },\n    total: { type: Number, required: true, default: 0 },\n    payroll_detail_ids: [{ type: ObjectId, ref: \"PayrollDetail\" }],\n    pay_start: { type: Date },\n    remark: { type: String },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"payroll\");\n\nconst Payroll = mongoose.model(\"Payroll\", newSchema);\n\nif (preload) { Payroll.insertMany(table); }\n\nexport default Payroll;\n"]}
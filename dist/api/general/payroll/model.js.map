{"version":3,"sources":["../../../../src/api/general/payroll/model.js"],"names":["Schema","mongoose","ObjectId","Types","payrollCreate","period","Joi","date","required","code","string","trim","subsidiary","valid","Object","values","SUBSIDIARY","voucher","payroll_detail_ids","array","optional","total","number","pay_start","remark","created_by","payrollUpdate","updated_by","payrollSchema","type","Date","comment","String","enum","ref","Number","default","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newPayrollSchema","set","Payroll","model","insertMany","table","payrollDetailCreate","payroll_id","staff_id","salary","is_paid","boolean","paid_date","paid_by","payment_method","PAYMENT","METHOD","payment_gateway","GATEWAY","payment_status","STATUS","payrollDetailUpdate","payrollDetail","Boolean","CASH","UNIONBANK","PENDING","newPayrollDetailSchema","PayrollDetail"],"mappings":"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","file":"model.js","sourcesContent":["import Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY, PAYMENT } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Voucher from \"../voucher/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const payrollCreate = {\n    period: Joi.date().required(),\n    code: Joi.string().trim().required(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\n    voucher: Joi.string().required(),\n    payroll_detail_ids: Joi.array().optional(),\n    total: Joi.number().optional(),\n    pay_start: Joi.date().optional(),\n    remark: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const payrollUpdate = {\n    period: Joi.date().optional(),\n    code: Joi.string().trim().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    voucher: Joi.string().optional(),\n    payroll_detail_ids: Joi.array().optional(),\n    total: Joi.number().optional(),\n    pay_start: Joi.date().optional(),\n    remark: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\n/**\n * @author 4Dcoder\n * @property {ObjectId} id Payroll primaryKey\n * @property {Date} period Payroll period YYYY-MM salary month\n * @property {String} code Payroll code of transaction\n * @property {String} subsidiary Payroll subsidiary of company eg PML\n * @property {String} voucher Payroll voucher raised for salary\n * @property {Array} payroll_detail_ids Payroll PayrollDetail ObjectIds\n * @property {Number} total Payroll total sum of salary paid\n * @property {Date} pay_start Payroll pay_start commence payment date\n * @property {String} remark Payroll remark or any comment\n * @description Payroll model holds record of Salary payment summary\n */\nexport const payrollSchema = {\n    period: { type: Date, required: true, comment: \"Salary yyyy-mm date\" },\n    code: { type: String, required: true, comment: \"Transaction code\" },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    voucher: { type: ObjectId, ref: \"Voucher\" },\n    total: { type: Number, required: true, default: 0 },\n    payroll_detail_ids: [{ type: ObjectId, ref: \"PayrollDetail\" }],\n    pay_start: { type: Date },\n    remark: { type: String },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newPayrollSchema = new Schema(payrollSchema, options);\nnewPayrollSchema.set(\"collection\", \"payroll\");\nconst Payroll = mongoose.model(\"Payroll\", newPayrollSchema);\nif (preload) { Payroll.insertMany(table); }\n\n//* ===========PAYROLL DETAIL==========\n\nexport const payrollDetailCreate = {\n    payroll_id: Joi.string().optional(),\n    code: Joi.string().trim().required(),\n    staff_id: Joi.string().optional(),\n    salary: Joi.number().optional(),\n    is_paid: Joi.boolean().optional(),\n    paid_date: Joi.date().optional(),\n    paid_by: Joi.string().optional(),\n    remark: Joi.string().optional(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT.METHOD)).optional(),\n    payment_gateway: Joi.string().valid(Object.values(PAYMENT.GATEWAY)).optional(),\n    payment_status: Joi.string().valid(Object.values(PAYMENT.STATUS)).optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const payrollDetailUpdate = {\n    payroll_id: Joi.string().optional(),\n    code: Joi.string().trim().optional(),\n    staff_id: Joi.string().optional(),\n    salary: Joi.number().optional(),\n    is_paid: Joi.boolean().optional(),\n    paid_date: Joi.date().optional(),\n    paid_by: Joi.string().optional(),\n    remark: Joi.string().optional(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT.METHOD)).optional(),\n    payment_gateway: Joi.string().valid(Object.values(PAYMENT.GATEWAY)).optional(),\n    payment_status: Joi.string().valid(Object.values(PAYMENT.STATUS)).optional(),\n    updated_by: Joi.string().required(),\n};\n\n/**\n * @author 4Dcoder\n * @property {ObjectId} id PayrollDetail primaryKey\n * @property {ObjectId} payroll_id PayrollDetail payroll ObjectId\n * @property {String} code PayrollDetail code\n * @property {ObjectId} staff_id PayrollDetail staff_id\n * @property {Number} salary PayrollDetail salary\n * @property {Boolean} is_paid PayrollDetail is_paid\n * @property {Date} paid_date PayrollDetail paid_date\n * @property {ObjectId} paid_by PayrollDetail paid_by\n * @property {String} remark PayrollDetail remark\n * @property {String} payment_method PayrollDetail payment method GATEWAY (required)\n * @property {String} payment_gateway PayrollDetail payment gateway UNIONBANK (required)\n * @property {String} payment_status PayrollDetail transaction status (prohibited)\n * @description PayrollDetail model holds record of all Inventories except vehicles\n */\nexport const payrollDetail = {\n    payroll_id: { type: ObjectId, ref: \"Payroll\", required: true },\n    code: { type: String, required: true, comment: \"Transaction code\" },\n    staff_id: { type: ObjectId, ref: \"Staff\", required: true },\n    salary: { type: Number, required: true, comment: \"Gross Salary\" },\n    is_paid: { type: Boolean, required: true, default: false },\n    paid_date: { type: Date, required: true },\n    paid_by: { type: ObjectId, ref: \"Staff\", required: true },\n    remark: { type: String },\n    payment_method: {\n        type: String,\n        enum: Object.values(PAYMENT.METHOD),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.METHOD.CASH,\n    },\n    payment_gateway: {\n        type: String,\n        enum: Object.values(PAYMENT.GATEWAY),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.GATEWAY.UNIONBANK,\n    },\n    payment_status: {\n        type: String,\n        enum: Object.values(PAYMENT.STATUS),\n        required: [true, \"Why no payment_status?\"],\n        default: PAYMENT.STATUS.PENDING,\n    },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst newPayrollDetailSchema = new Schema(payrollDetail, options);\nnewPayrollDetailSchema.set(\"collection\", \"payroll_detail\");\nconst PayrollDetail = mongoose.model(\"PayrollDetail\", newPayrollDetailSchema);\nif (preload) { PayrollDetail.insertMany(table); }\n\nexport { Payroll, PayrollDetail };\n"]}
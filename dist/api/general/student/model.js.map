{"version":3,"sources":["../../../../src/api/general/student/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","customer_type","title","surname","required","other_name","gender","birth_date","date","phone_personal","skype","linkedin","facebook","instagram","twitter","youtube","contact_person","contact_person_phone","product","photo","address","state_id","county_id","country_iso2","max","is_pmt_client","boolean","is_pesl_client","is_pet_client","is_shop_client","is_engr_client","is_tenant","is_phone_verified","is_email_verified","remark","points","number","cart_id","blog_comment_ids","array","created_by","schemaUpdate","otp_count","company","industry","website","wallet","sales_rep_id","sales_order_ids","pml_shipment_ids","pmt_boarding_ids","ratings","rating","updated_by","schema","String","enum","Object","values","CUSTOMER_TYPE","default","INDIVIDUAL","minlength","GENDER","Date","unique","alias","lowercase","match","Number","otp_access","Boolean","ref","referral","comment","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","weights","set","plugin","mongoose_csv","Customer","model","createIndexes","findOne","then","user","console","log","table","newRecord","save","catch","__dirname","err","message","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {ObjectId} id Customer primaryKey\n * @property {String} customer type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @property {String} title Customer name title \"Dr, Barr. Rev Chief\"\n * @property {String} surname Customer surname (required)\n * @property {String} other_name Customer other name (required)\n * @property {String} gender Customer gender (required)\n * @property {Date} birth_date Customer date of birth\n * @property {String} phone Customer official phone number (required)\n * @property {String} phone_personal Customer home phone number\n * @property {String} email Customer email address\n * @property {String} password Customer password for accessing the App\n * @property {String} otp Customer one-time-password for accessing the App\n * @property {Number} otp_count Number of times OTP has been used without successful transaction\n * @property {String} company Customer company or organization\n * @property {String} industry Customer industry type e.g EDU, FIN, IT, AGRO etc\n * @property {String} website Customer website\n * @property {String} website Customer website\n * @property {String} skype Customer Skype.com contact\n * @property {String} linkedin Customer LinkedIn.com contact url\n * @property {String} facebook Customer Facebook.com contact url\n * @property {String} instagram Customer Instagram.com contact url\n * @property {String} twitter Customer Twitter.com contact url\n * @property {String} youtube Customer Youtube.com contact url\n * @property {String} contact_person Customer next-of-kin, or contact person\n * @property {String} contact_person_phone Customer next-of-kin, or contact person phone\n * @property {String} product Customer product, service or project of interest\n * @property {String} photo Customer photo url\n * @property {String} address Customer residential or work address\n * @property {String} country_iso2 Customer country of residence (required)\n * @property {Boolean} is_pmt_client assert that client is also a PMT customer\n * @property {Boolean} is_pesl_client assert that client is also a PESL customer\n * @property {Boolean} is_pet_client assert that client is also a PET customer\n * @property {Boolean} is_shop_client assert that client is also a SHOP customer\n * @property {Boolean} is_engr_client Customer assert that client is also a ENGR customer\n * @property {Boolean} is_tenant assert if customer is a depot tenant\n * @property {Boolean} is_phone_verified phone verification status\n * @property {Boolean} is_email_verified email verification status\n * @property {Number} points Customer cummulative royalty points for patronage\n * @property {Number} wallet Customer wallet available ballance amount in Naira\n * @property {ObjectId} cart_id Customer current cart\n * @property {ObjectId} sales_rep_id Customer Staff SalesRep ObjectId\n * @property {Array} blog_comment_ids Customer array of BlogComment records\n * @property {Array} sales_order_ids: Customer array of SalesOrder records\n * @property {Array} pml_shipment_ids Customer array of PmlShipment records\n * @property {Array} pmt_boarding_ids Customer array of PmtBoarding records\n * @property {Array} ratings Customer array of Rating by customer\n * @property {Number} rating Customer client as rated by staff\n * @property {String} remark comment about customer by Staff\n * @property {ObjectId} created_by (required) id of the staff who created the record\n * @property {ObjectId} updated_by id of the staff who created the record\n * @description Records of all company customers.\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, GENDER, CUSTOMER_TYPE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport State from \"../state/model\";\nimport County from \"../county/model\";\nimport Rating from \"../rating/model\";\nimport BlogComment from \"../blog-comment/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    customer_type: Joi.string().trim().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().required(),\n    other_name: Joi.string().required(),\n    gender: Joi.string().required(),\n    birth_date: Joi.date().optional(),\n    phone: Joi.string().required(),\n    phone_personal: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    skype: Joi.string().optional(),\n    linkedin: Joi.string().optional(),\n    facebook: Joi.string().optional(),\n    instagram: Joi.string().optional(),\n    twitter: Joi.string().optional(),\n    youtube: Joi.string().optional(),\n    contact_person: Joi.string().optional(),\n    contact_person_phone: Joi.string().optional(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state_id: Joi.string().optional(),\n    county_id: Joi.string().optional(),\n    country_iso2: Joi.string().trim().max(2).optional(),\n    is_pmt_client: Joi.boolean().optional(),\n    is_pesl_client: Joi.boolean().optional(),\n    is_pet_client: Joi.boolean().optional(),\n    is_shop_client: Joi.boolean().optional(),\n    is_engr_client: Joi.boolean().optional(),\n    is_tenant: Joi.boolean().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    points: Joi.number().optional(),\n    cart_id: Joi.string().optional(),\n    blog_comment_ids: Joi.array().optional(),\n    created_by: Joi.string().optional(),\n};\n\nexport const schemaUpdate = {\n    customer_type: Joi.string().trim().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    other_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    phone: Joi.string().optional(),\n    phone_personal: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    company: Joi.string().optional(),\n    industry: Joi.string().optional(),\n    website: Joi.string().optional(),\n    skype: Joi.string().optional(),\n    linkedin: Joi.string().optional(),\n    facebook: Joi.string().optional(),\n    instagram: Joi.string().optional(),\n    twitter: Joi.string().optional(),\n    youtube: Joi.string().optional(),\n    contact_person: Joi.string().optional(),\n    contact_person_phone: Joi.string().optional(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state_id: Joi.string().optional(),\n    county_id: Joi.string().optional(),\n    country_iso2: Joi.string().trim().max(2).optional(),\n    is_pmt_client: Joi.boolean().optional(),\n    is_pesl_client: Joi.boolean().optional(),\n    is_pet_client: Joi.boolean().optional(),\n    is_shop_client: Joi.boolean().optional(),\n    is_engr_client: Joi.boolean().optional(),\n    is_tenant: Joi.boolean().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    points: Joi.number().optional(),\n    wallet: Joi.number().optional(),\n    cart_id: Joi.string().optional(),\n    blog_comment_ids: Joi.array().optional(),\n    sales_rep_id: Joi.string().optional(),\n    sales_order_ids: Joi.array().optional(),\n    pml_shipment_ids: Joi.array().optional(),\n    pmt_boarding_ids: Joi.array().optional(),\n    ratings: Joi.array().optional(),\n    rating: Joi.number().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    customer_type: {\n        type: String,\n        enum: Object.values(CUSTOMER_TYPE),\n        default: CUSTOMER_TYPE.INDIVIDUAL,\n        required: [true, \"Why no customer_type?\"],\n    },\n    title: { type: String },\n    surname: {\n        type: String,\n        minlength: 3,\n        trim: true,\n        required: [true, \"Why no surname?\"],\n    },\n    other_name: {\n        type: String,\n        minlength: 3,\n        trim: true,\n        required: [true, \"Why no other_name?\"],\n    },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        required: [true, \"Why no gender?\"],\n    },\n    birth_date: { type: Date },\n    phone: {\n        type: String,\n        minlength: 11,\n        trim: true,\n        required: [true, \"Why no phone?\"],\n        unique: true,\n        alias: \"phone_office\",\n    },\n    phone_personal: {\n        type: String,\n        minlength: 11,\n        trim: true,\n        alias: \"phone_home\",\n    },\n    email: {\n        type: String,\n        minlength: 12,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    password: { type: String },\n    company: { type: String },\n    industry: { type: String },\n    skype: { type: String },\n    linkedin: { type: String },\n    facebook: { type: String },\n    instagram: { type: String },\n    twitter: { type: String },\n    youtube: { type: String },\n    website: { type: String },\n    otp: { type: String },\n    otp_count: { type: Number, required: [true, \"Why no input?\"], default: 0 },\n    otp_access: { type: Boolean, default: false },\n    contact_person: { type: String, required: [true, \"Why no contact_person?\"] },\n    contact_person_phone: { type: String, required: [true, \"Why no contact_person phone?\"] },\n    product: { type: String, alias: \"project\" },\n    photo: { type: String },\n    address: { type: String },\n    state_id: { type: ObjectId, ref: \"State\" },\n    county_id: { type: ObjectId, ref: \"County\" },\n    country_iso2: { type: String, required: [true, \"Why no country_iso2?\"], default: \"NG\" },\n    is_pmt_client: { type: Boolean, default: false },\n    is_pesl_client: { type: Boolean, default: false },\n    is_pet_client: { type: Boolean, default: false },\n    is_shop_client: { type: Boolean, default: false },\n    is_engr_client: { type: Boolean, default: false },\n    is_tenant: { type: Boolean, default: false },\n    is_phone_verified: { type: Boolean, default: false },\n    is_email_verified: { type: Boolean, default: false },\n    remark: { type: String },\n    referral: { type: String, comment: \"lead referral source\" },\n    points: { type: Number, default: 2 }, // Royalty Points for patronage\n    wallet: { type: Number }, // Customer ballance in Naira\n    cart_id: { type: ObjectId, ref: \"Cart\" },\n    sales_rep_id: { type: ObjectId, ref: \"Staff\" },\n    sales_order_ids: [{ type: ObjectId, ref: \"SalesOrder\" }],\n    blog_comment_ids: [{ type: ObjectId, ref: \"BlogComment\" }],\n    ratings: { type: ObjectId, ref: \"Rating\" }, // Services rated by Customer\n    rating: { type: Number }, // Client as rated by Staff\n    created_by: { type: ObjectId },\n    updated_by: { type: ObjectId },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\n\nnewSchema.index({\n    phone: \"text\",\n    phone_personal: \"text\",\n    email: \"text\",\n    surname: \"text\",\n    other_name: \"text\",\n},\n{\n    weights: {\n        phone: 5,\n        phone_personal: 5,\n        email: 4,\n        surname: 3,\n        other_name: 1,\n    },\n});\n\nnewSchema.set(\"collection\", \"customer\");\nnewSchema.plugin(mongoose_csv);\n\nconst Customer = mongoose.model(\"Customer\", newSchema);\nCustomer.createIndexes();\nCustomer.findOne({ email: \"customer@peacegroup.ng\" })\n    .then((user) => {\n        if (!user) {\n            console.log(table[ 0 ]);\n            const newRecord = new Customer(table[ 0 ]);\n            newRecord.save();\n            delete table[ 0 ];\n        }\n    })\n    .catch(err => console.log(__dirname, err.message));\n\nif (preload) { Customer.insertMany(table); }\n\nexport default Customer;\n"]}
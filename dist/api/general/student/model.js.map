{"version":3,"sources":["../../../../src/api/general/student/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","surname","given_name","gender","birth_date","date","address","state","county","religion","classe","level","number","subsidiary","Object","values","SUBSIDIARY","hostel","photo","parents","array","reg_no","admission_year","created_by","required","schemaUpdate","updated_by","schema","String","enum","GENDER","default","MALE","Date","lowercase","unique","match","ref","Number","deleted","Boolean","deleted_at","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","set","plugin","mongoose_csv","Student","model","findOne","then","user","console","log","table","newRecord","save","catch","__dirname","err","message","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {ObjectId} id Student ObjectId primaryKey\n * @property {String} surname Student surname (optional)\n * @property {String} given_name Student given_name (optional)\n * @property {String} last_name Student surname (optional)\n * @property {String} gender Student gender (optional)\n * @property {Date} birth_date Student birth_date (optional)\n * @property {String} address Student address (optional)\n * @property {ObjectId} state Student state (optional)\n * @property {ObjectId} county Student county (optional)\n * @property {String} email Student email (optional)\n * @property {String} phone Student office phone (optional)\n * @property {String} password Student password (optional)\n * @property {String} religion Student religion (optional)\n * @property {ObjectId} classe Student classe (optional)\n * @property {Number} level Student level (optional)\n * @property {String} subsidiary Student subsidiary (required)\n * @property {ObjectId} hostel Student hostel (optional)\n * @property {String} photo Student photo (optional)\n * @property {Array} parents Student parents Array<ObjectId> (optional)\n * @property {String} reg_no Student reg_no (optional)\n * @property {Date} admission_year Student admission_year (optional)\n * @property {ObjectId} created_by Student record created by\n * @property {ObjectId} updated_by Student record modified by\n * @description Student holds record of all students in the school.\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, GENDER, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\nimport State from \"../state/model\";\nimport County from \"../county/model\";\nimport Parent from \"../parent/model\";\nimport Classe from \"../classe/model\";\nimport { HostelAllocation } from \"../hostel/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    surname: Joi.string().trim().optional(),\n    given_name: Joi.string().trim().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    religion: Joi.string().optional(),\n    classe: Joi.string().trim().optional(),\n    level: Joi.number().trim().optional(),\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\n    hostel: Joi.string().trim().optional(),\n    photo: Joi.string().optional(),\n    parents: Joi.array().optional(),\n    reg_no: Joi.string().trim().optional(),\n    admission_year: Joi.date().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    surname: Joi.string().trim().optional(),\n    given_name: Joi.string().trim().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    religion: Joi.string().optional(),\n    classe: Joi.string().trim().optional(),\n    level: Joi.number().trim().optional(),\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\n    hostel: Joi.string().trim().optional(),\n    photo: Joi.string().optional(),\n    parents: Joi.array().optional(),\n    reg_no: Joi.string().trim().optional(),\n    admission_year: Joi.date().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    surname: { type: String, required: [true, \"Why no first name?\"] },\n    given_name: { type: String, required: [true, \"Why no given name?\"] },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        default: GENDER.MALE,\n        required: true,\n    },\n    birth_date: { type: Date, required: [false, \"Why no Date?\"] },\n    address: { type: String, required: [false, \"Why no Address?\"] },\n    state: { type: String, required: [false, \"Why no State?\"] },\n    county: { type: String, required: [false, \"Why no Country?\"] },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    phone: {\n        type: String,\n        required: [false, \"Why no phone?\"],\n        unique: true,\n    },\n    password: { type: String, required: [false, \"Why no password?\"] },\n    religion: { type: String },\n    classe: { type: ObjectId, ref: \"Classe\", required: [false, \"Why no class?\"] },\n    level: { type: Number },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    hostel: { type: ObjectId, ref: \"HostelAllocation\" },\n    photo: { type: String },\n    parents: [{ type: ObjectId, ref: \"Parent\" }],\n    admission_year: { type: Date },\n    reg_no: { type: String },\n    deleted: { type: Boolean, default: false, required: true },\n    deleted_at: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.index({ phone: 1, email: 1 }, { unique: true });\nnewSchema.set(\"collection\", \"student\");\nnewSchema.plugin(mongoose_csv);\n\nconst Student = mongoose.model(\"Student\", newSchema);\n\nStudent.findOne({ email: \"student@royalacademy.ng\" })\n    .then((user) => {\n        if (!user) {\n            console.log(table[ 0 ]);\n            const newRecord = new Student(table[ 0 ]);\n            newRecord.save();\n            delete table[ 0 ];\n        }\n    })\n    .catch(err => console.log(__dirname, err.message));\n\nif (preload) { Student.insertMany(table); }\n\nexport default Student;\n"]}
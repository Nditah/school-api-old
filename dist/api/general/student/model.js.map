{"version":3,"sources":["../../../../src/api/general/student/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","surname","given_name","gender","birth_date","date","address","state","county","blood_group","classe","level","subsidiary","Object","values","SUBSIDIARY","hostel","photo","parents","array","created_by","required","schemaUpdate","updated_by","schema","String","enum","GENDER","default","MALE","Date","lowercase","unique","match","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","set","plugin","mongoose_csv","Student","model","findOne","then","user","console","log","table","newRecord","save","catch","__dirname","err","message","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\r\n/**\r\n * @author 4Decoder\r\n * @property {ObjectId} id Student ObjectId primaryKey\r\n * @property {String} surname Student surname (optional)\r\n * @property {String} given_name Student given_name (optional)\r\n * @property {String} last_name Student surname (optional)\r\n * @property {String} gender Student gender (optional)\r\n * @property {Date} birth_date Student birth_date (optional)\r\n * @property {String} address Student address (optional)\r\n * @property {ObjectId} state Student state (optional)\r\n * @property {ObjectId} county Student county (optional)\r\n * @property {String} email Student email (optional)\r\n * @property {String} phone Student office phone (optional)\r\n * @property {String} password Student password (optional)\r\n * @property {String} blood_group Student blood_group (optional)\r\n * @property {ObjectId} classe Student classe (optional)\r\n * @property {String} level Student level (optional)\r\n * @property {String} subsidiary Student subsidiary (required)\r\n * @property {ObjectId} hostel Student hostel (optional)\r\n * @property {String} photo Student photo (optional)\r\n * @property {Array} parents Student parents Array<ObjectId> (optional)\r\n * @property {ObjectId} created_by Student record created by\r\n * @property {ObjectId} updated_by Student record modified by\r\n * @description Student holds record of all students in the school.\r\n */\r\n\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE, GENDER, SUBSIDIARY } from \"../../../constants\";\r\nimport table from \"./table\";\r\nimport State from \"../state/model\";\r\nimport County from \"../county/model\";\r\nimport Parent from \"../parent/model\";\r\nimport Classe from \"../classe/model\";\r\nimport HostelAllocation from \"../hostel-allocation/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaLogin = {\r\n    email: Joi.string().trim().email().optional(),\r\n    phone: Joi.string().optional(),\r\n    otp: Joi.string().optional(),\r\n    password: Joi.string().optional(),\r\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\r\n};\r\n\r\nexport const schemaCreate = {\r\n    surname: Joi.string().trim().optional(),\r\n    given_name: Joi.string().trim().optional(),\r\n    gender: Joi.string().optional(),\r\n    birth_date: Joi.date().optional(),\r\n    address: Joi.string().optional(),\r\n    state: Joi.string().optional(),\r\n    county: Joi.string().optional(),\r\n    email: Joi.string().trim().email().optional(),\r\n    phone: Joi.string().optional(),\r\n    password: Joi.string().optional(),\r\n    blood_group: Joi.string().optional(),\r\n    classe: Joi.string().trim().optional(),\r\n    level: Joi.string().trim().optional(),\r\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\r\n    hostel: Joi.string().trim().optional(),\r\n    photo: Joi.string().optional(),\r\n    parents: Joi.array().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    surname: Joi.string().trim().optional(),\r\n    given_name: Joi.string().trim().optional(),\r\n    gender: Joi.string().optional(),\r\n    birth_date: Joi.date().optional(),\r\n    address: Joi.string().optional(),\r\n    state: Joi.string().optional(),\r\n    county: Joi.string().optional(),\r\n    email: Joi.string().trim().email().optional(),\r\n    phone: Joi.string().optional(),\r\n    password: Joi.string().optional(),\r\n    blood_group: Joi.string().optional(),\r\n    classe: Joi.string().trim().optional(),\r\n    level: Joi.string().trim().optional(),\r\n    subsidiary: Joi.string().trim().valid(Object.values(SUBSIDIARY)).optional(),\r\n    hostel: Joi.string().trim().optional(),\r\n    photo: Joi.string().optional(),\r\n    parents: Joi.array().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    surname: { type: String, required: [true, \"Why no first name?\"] },\r\n    given_name: { type: String, required: [true, \"Why no given name?\"] },\r\n    gender: {\r\n        type: String,\r\n        enum: Object.values(GENDER),\r\n        default: GENDER.MALE,\r\n        required: true,\r\n    },\r\n    birth_date: { type: Date, required: [false, \"Why no Date?\"] },\r\n    address: { type: String, required: [false, \"Why no Address?\"] },\r\n    state: { type: String, required: [false, \"Why no State?\"] },\r\n    county: { type: String, required: [false, \"Why no Country?\"] },\r\n    email: {\r\n        type: String,\r\n        trim: true,\r\n        lowercase: true,\r\n        unique: true,\r\n        // eslint-disable-next-line no-useless-escape\r\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n            \"Please fill a valid email address\"],\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: [false, \"Why no phone?\"],\r\n        unique: true,\r\n    },\r\n    password: { type: String, required: [false, \"Why no password?\"] },\r\n    blood_group: { type: String },\r\n    classe: { type: ObjectId, ref: \"Classe\", required: [false, \"Why no class?\"] },\r\n    level: { type: String },\r\n    subsidiary: {\r\n        type: String,\r\n        enum: Object.values(SUBSIDIARY),\r\n        required: [false, \"Why no input?\"],\r\n    },\r\n    hostel: { type: ObjectId, ref: \"HostelAllocation\" },\r\n    photo: { type: String },\r\n    parents: [{ type: ObjectId, ref: \"Parent\" }],\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.index({ phone: 1, email: 1 }, { unique: true });\r\nnewSchema.set(\"collection\", \"student\");\r\nnewSchema.plugin(mongoose_csv);\r\n\r\nconst Student = mongoose.model(\"Student\", newSchema);\r\n\r\nStudent.findOne({ email: \"student@royalacademy.ng\" })\r\n    .then((user) => {\r\n        if (!user) {\r\n            console.log(table[ 0 ]);\r\n            const newRecord = new Student(table[ 0 ]);\r\n            newRecord.save();\r\n            delete table[ 0 ];\r\n        }\r\n    })\r\n    .catch(err => console.log(__dirname, err.message));\r\n\r\nif (preload) { Student.insertMany(table); }\r\n\r\nexport default Student;\r\n"]}
{"version":3,"sources":["../../../../src/api/general/student/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord","login"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAVA;;;;AAyBAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDC,uBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAN,OAAOO,IAAP,CAAY,WAAZ,EAAyBC,wBAAzB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAR,OAAOS,GAAP,CAAW,qBAAX,EAAkC,CAACL,wBAAD,CAAlC,EAA+CM,wBAA/C;;AAEA;;;;;;;;;AASAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACP,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEO,wBAAhE;;AAEA;;;;;;;;;;;;;AAaAZ,OAAOO,IAAP,CAAY,iBAAZ,EAA+BM,iBAA/B;;kBAEeb,M","file":"routes.js","sourcesContent":["/**\r\n * @author 4Decoder\r\n * @description Student holds record of all students\r\n */\r\nimport express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord, login } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/students?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveStudent\r\n * @apiGroup Student\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/students?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records of consolidated list of students from SECONDARY, PRIMARY, NURSERY etc\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/students\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/students Create students\r\n * @apiName CreateStudent\r\n * @apiGroup Student\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} surname Student surname (optional)\r\n * @apiParam {String} given_name Student given_name (optional)\r\n * @apiParam {String} last_name Student surname (optional)\r\n * @apiParam {String} gender Student gender (optional)\r\n * @apiParam {Date} birth_date Student birth_date (optional)\r\n * @apiParam {String} address Student address (optional)\r\n * @apiParam {ObjectId} state Student state (optional)\r\n * @apiParam {ObjectId} county Student county (optional)\r\n * @apiParam {String} email Student email (optional)\r\n * @apiParam {String} phone Student office phone (optional)\r\n * @apiParam {String} password Student password (optional)\r\n * @apiParam {String} blood_group Student blood_group (optional)\r\n * @apiParam {ObjectId} classe Student classe (optional)\r\n * @apiParam {String} level Student level (optional)\r\n * @apiParam {String} subsidiary Student subsidiary (required)\r\n * @apiParam {ObjectId} hostel Student hostel (optional)\r\n * @apiParam {String} photo Student photo (optional)\r\n * @apiParam {Array} parents Student parents Array<ObjectId> (optional)\r\n * @apiSuccess {Object} Student Student's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Student not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/students\", createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/students/{recordId} Update students\r\n * @apiName UpdateStudent\r\n * @apiGroup Student\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {ObjectId} recordId required record ObjectId\r\n * @apiParam {String} surname Student surname (optional)\r\n * @apiParam {String} given_name Student given_name (optional)\r\n * @apiParam {String} gender Student gender (optional)\r\n * @apiParam {Date} birth_date Student birth_date (optional)\r\n * @apiParam {String} address Student address (optional)\r\n * @apiParam {String} state Student state (optional)\r\n * @apiParam {String} county Student county (optional)\r\n * @apiParam {String} email Student email (optional)\r\n * @apiParam {String} phone Student office phone (optional)\r\n * @apiParam {String} password Student password (optional)\r\n * @apiParam {String} blood_group Student blood_group (optional)\r\n * @apiParam {ObjectId} classe Student classe (optional)\r\n * @apiParam {String} level Student level (optional)\r\n * @apiParam {String} subsidiary Student subsidiary (required)\r\n * @apiParam {ObjectId} hostel Student hostel (optional)\r\n * @apiParam {String} photo Student photo (optional)\r\n * @apiParam {Array} parents Student parents Array<ObjectId> (optional)\r\n * @apiSuccess {Object} Student Student's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Student not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/students/:recordId\", [checkAuth], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/students/{recordId} Delete students\r\n * @apiName DeleteStudent\r\n * @apiGroup Student\r\n * @apiParam {ObjectId} recordId record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Student not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.delete(\"/students/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/students/login Login Student\r\n * @apiName LoginStudent\r\n * @apiGroup Student\r\n * @apiPermission master\r\n * @apiParam {String} email Student email address (optional)\r\n * @apiParam {String} password Student password (optional)\r\n * @apiParam {String} phone Student mobile phone number (optional)\r\n * @apiParam {String} otp Student One-Time-Password sent to phone (optional)\r\n * @apiParam {String} type Login type \"EMAIL\", \"PHONE\", \"OTP\" (required)\r\n * @apiSuccess (Success 200) 200 Login Successful.\r\n * @apiError 404 Student not found.\r\n */\r\nrouter.post(\"/students/login\", login);\r\n\r\nexport default router;\r\n"]}
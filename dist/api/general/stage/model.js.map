{"version":3,"sources":["../../../../src/api/general/stage/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","step","Joi","number","required","name","string","type","trim","valid","optional","description","subsidiary","Object","values","SUBSIDIARY","officer","created_by","schemaUpdate","updated_by","schema","Number","default","String","enum","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Stage","model","insertMany","table"],"mappings":";;;;;;;AAYA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;;;AALA;AAdA;;;;;;;;;;;;IAqBQA,M,GAAWC,kB,CAAXD,M;AAHR;;IAIQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,UAAMH,cAAII,MAAJ,GAAaF,QAAb,EAFkB;AAGxBG,UAAML,cAAII,MAAJ,GAAaE,IAAb,GAAoBC,KAApB,CAA0B,YAA1B,EAAwC,SAAxC,EAAmD,aAAnD,EAAkE,OAAlE,EAA2E,cAA3E,EAA2FC,QAA3F,EAHkB;AAIxBC,iBAAaT,cAAII,MAAJ,GAAaF,QAAb,EAJW;AAKxBQ,gBAAYV,cAAII,MAAJ,GAAaG,KAAb,CAAmBI,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CL,QAA9C,EALY;AAMxBM,aAASd,cAAII,MAAJ,GAAaI,QAAb,EANe;AAOxBO,gBAAYf,cAAII,MAAJ,GAAaF,QAAb;AAPY,CAArB;;AAUA,IAAMc,sCAAe;AACxBjB,UAAMC,cAAIC,MAAJ,GAAaO,QAAb,EADkB;AAExBL,UAAMH,cAAII,MAAJ,GAAaI,QAAb,EAFkB;AAGxBH,UAAML,cAAII,MAAJ,GAAaE,IAAb,GAAoBC,KAApB,CAA0B,YAA1B,EAAwC,SAAxC,EAAmD,aAAnD,EAAkE,OAAlE,EAA2E,cAA3E,EAA2FC,QAA3F,EAHkB;AAIxBC,iBAAaT,cAAII,MAAJ,GAAaI,QAAb,EAJW;AAKxBE,gBAAYV,cAAII,MAAJ,GAAaG,KAAb,CAAmBI,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CL,QAA9C,EALY;AAMxBM,aAASd,cAAII,MAAJ,GAAaI,QAAb,EANe;AAOxBS,gBAAYjB,cAAII,MAAJ,GAAaF,QAAb;AAPY,CAArB;;AAUA,IAAMgB,0BAAS;AAClBnB,UAAM,EAAEM,MAAMc,MAAR,EAAgBjB,UAAU,IAA1B,EAAgCkB,SAAS,CAAzC,EADY;AAElBjB,UAAM,EAAEE,MAAMgB,MAAR,EAAgBnB,UAAU,IAA1B,EAFY;AAGlBG,UAAM;AACFA,cAAMgB,MADJ;AAEFC,cAAM,CAAC,YAAD,EAAe,SAAf,EAA0B,aAA1B,EAAyC,OAAzC,EAAkD,cAAlD,CAFJ;AAGFpB,kBAAU;AAHR,KAHY;AAQlBO,iBAAa,EAAEJ,MAAMgB,MAAR,EARK;AASlBX,gBAAY;AACRL,cAAMgB,MADE;AAERC,cAAMX,OAAOC,MAAP,CAAcC,qBAAd,CAFE;AAGRX,kBAAU,CAAC,KAAD,EAAQ,eAAR;AAHF,KATM;AAclBY,aAAS,EAAET,MAAMT,QAAR,EAAkB2B,KAAK,OAAvB,EAdS;AAelBR,gBAAY,EAAEV,MAAMT,QAAR,EAAkB2B,KAAK,OAAvB,EAAgCrB,UAAU,IAA1C,EAfM;AAgBlBe,gBAAY,EAAEZ,MAAMT,QAAR,EAAkB2B,KAAK,OAAvB;AAhBM,CAAf;;AAmBP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAIpC,MAAJ,CAAWwB,MAAX,EAAmBU,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,OAA5B;;AAEA,IAAMC,QAAQrC,mBAASsC,KAAT,CAAe,OAAf,EAAwBH,SAAxB,CAAd;;AAEA,IAAIN,OAAJ,EAAa;AAAEQ,UAAME,UAAN,CAAiBC,eAAjB;AAA0B;;kBAE1BH,K","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} _id Stage  Record ObjectId\n * @property {Number} step Stage serial number\n * @property {String} name Stage name (required)\n * @property {String} type Stage type\n *  \"PRODUCTION\", \"VOUCHER\", \"MAINTENANCE\", \"ORDER\", \"REGISTRATION\"(required)\n * @property {String} description Stage  description (required)\n * @property {String} subsidiary Stage  subsidiary (required)\n * @property {ObjectId} officer Stage  officer Staff ObjectId\n * @description Stage model for Voucher Stages, Production Stages, Order stages etc\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\n// eslint-disable-next-line import/no-cycle\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    step: Joi.number().required(),\n    name: Joi.string().required(),\n    type: Joi.string().trim().valid(\"PRODUCTION\", \"VOUCHER\", \"MAINTENANCE\", \"ORDER\", \"REGISTRATION\").optional(),\n    description: Joi.string().required(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    officer: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    step: Joi.number().optional(),\n    name: Joi.string().optional(),\n    type: Joi.string().trim().valid(\"PRODUCTION\", \"VOUCHER\", \"MAINTENANCE\", \"ORDER\", \"REGISTRATION\").optional(),\n    description: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    officer: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    step: { type: Number, required: true, default: 1 },\n    name: { type: String, required: true },\n    type: {\n        type: String,\n        enum: [\"PRODUCTION\", \"VOUCHER\", \"MAINTENANCE\", \"ORDER\", \"REGISTRATION\"],\n        required: true,\n    },\n    description: { type: String },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    officer: { type: ObjectId, ref: \"Staff\" },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"stage\");\n\nconst Stage = mongoose.model(\"Stage\", newSchema);\n\nif (preload) { Stage.insertMany(table); }\n\nexport default Stage;\n"]}
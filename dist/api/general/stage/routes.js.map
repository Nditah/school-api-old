{"version":3,"sources":["../../../../src/api/general/stage/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,SAAX,EAAsB,CAACC,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDC,uBAAjD;;AAEA;;;;;;;;;;;;;;;;;AAiBAN,OAAOO,IAAP,CAAY,SAAZ,EAAuB,CAACH,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDG,wBAAlD;;AAEA;;;;;;;;;;;;;;;;;AAiBAR,OAAOS,GAAP,CAAW,mBAAX,EAAgC,CAACL,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DK,wBAA3D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,mBAAd,EAAmC,CAACP,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DO,wBAA9D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/stages?id={recordId} Retrieve Stage records\n * @apiName RetrieveStage\n * @apiGroup Stage\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/stages\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/stages\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/stages Create stages\n * @apiName CreateStage\n * @apiGroup Stage\n * @apiHeader {String} Authorization authorization token\n * @apiParam {Number} step Stage serial number\n * @apiParam {String} name Stage name (required)\n * @apiParam {String} type Stage type (required)\n *  \"PRODUCTION\", \"VOUCHER\", \"MAINTENANCE\", \"ORDER\", \"REGISTRATION\"\n * @apiParam {String} description Stage  description (required)\n * @apiParam {String} subsidiary Stage  subsidiary (required)\n * @apiParam {ObjectId} officer Stage  officer Staff ObjectId\n * @apiSuccess {Object} Stage Stage's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Stage not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/stages\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/stages/{recordId} Update stages\n * @apiName UpdateStage\n * @apiGroup Stage\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {Number} step Stage serial number\n * @apiParam {String} name Stage name (required)\n * @apiParam {String} type Stage type (required)\n * @apiParam {String} description Stage  description (required)\n * @apiParam {String} subsidiary Stage  subsidiary (required)\n * @apiParam {ObjectId} officer Stage  officer Staff ObjectId\n * @apiSuccess {Object} Stage Stage's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Stage not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/stages/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/stages/{recordId} Delete stages\n * @apiName DeleteStage\n * @apiGroup Stage\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Stage not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/stages/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
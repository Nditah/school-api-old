{"version":3,"sources":["../../../../src/api/general/offence-type/controller.js"],"names":["Joi","log4js","aqp","OfficeType","schemaCreate","schemaUpdate","success","fail","notFound","isObjecId","STATUS_MSG","OffenceType","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecord","req","res","query","filter","skip","limit","sort","projection","result","find","select","exec","info","SUCCESS","DEFAULT","err","error","message","createRecord","data","body","validate","newRecord","save","updateRecord","recordId","id","params","findOneAndUpdate","_id","new","deleteRecord","findOneAndRemove"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport OfficeType, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport OffenceType from \"./model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[office_type]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/office_type.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await OffenceType.find(filter)\n        \n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new OfficeType(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await OfficeType.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await OfficeType.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/payroll-detail/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","payroll_id","Joi","string","optional","code","trim","required","staff_id","salary","number","is_paid","boolean","paid_date","date","paid_by","remark","payment_method","valid","Object","values","PAYMENT","METHOD","payment_gateway","GATEWAY","payment_status","STATUS","created_by","schemaUpdate","updated_by","schema","type","ref","String","comment","Number","Boolean","default","Date","enum","CASH","UNIONBANK","PENDING","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","PayrollDetail","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/* eslint-disable no-unused-vars */\n/**\n * @author 4Dcoder\n * @property {ObjectId} id PayrollDetail primaryKey\n * @property {ObjectId} payroll_id PayrollDetail payroll ObjectId\n * @property {String} code PayrollDetail code\n * @property {ObjectId} staff_id PayrollDetail staff_id\n * @property {Number} salary PayrollDetail salary\n * @property {Boolean} is_paid PayrollDetail is_paid\n * @property {Date} paid_date PayrollDetail paid_date\n * @property {ObjectId} paid_by PayrollDetail paid_by\n * @property {String} remark PayrollDetail remark\n * @property {String} payment_method PayrollDetail payment method GATEWAY (required)\n * @property {String} payment_gateway PayrollDetail payment gateway UNIONBANK (required)\n * @property {String} payment_status PayrollDetail transaction status (prohibited)\n * @description PayrollDetail model holds record of all Inventories except vehicles\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, PAYMENT } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Payroll from \"../payroll/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    payroll_id: Joi.string().optional(),\n    code: Joi.string().trim().required(),\n    staff_id: Joi.string().optional(),\n    salary: Joi.number().optional(),\n    is_paid: Joi.boolean().optional(),\n    paid_date: Joi.date().optional(),\n    paid_by: Joi.string().optional(),\n    remark: Joi.string().optional(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT.METHOD)).optional(),\n    payment_gateway: Joi.string().valid(Object.values(PAYMENT.GATEWAY)).optional(),\n    payment_status: Joi.string().valid(Object.values(PAYMENT.STATUS)).optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    payroll_id: Joi.string().optional(),\n    code: Joi.string().trim().optional(),\n    staff_id: Joi.string().optional(),\n    salary: Joi.number().optional(),\n    is_paid: Joi.boolean().optional(),\n    paid_date: Joi.date().optional(),\n    paid_by: Joi.string().optional(),\n    remark: Joi.string().optional(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT.METHOD)).optional(),\n    payment_gateway: Joi.string().valid(Object.values(PAYMENT.GATEWAY)).optional(),\n    payment_status: Joi.string().valid(Object.values(PAYMENT.STATUS)).optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    payroll_id: { type: ObjectId, ref: \"Payroll\", required: true },\n    code: { type: String, required: true, comment: \"Transaction code\" },\n    staff_id: { type: ObjectId, ref: \"Staff\", required: true },\n    salary: { type: Number, required: true, comment: \"Gross Salary\" },\n    is_paid: { type: Boolean, required: true, default: false },\n    paid_date: { type: Date, required: true },\n    paid_by: { type: ObjectId, ref: \"Staff\", required: true },\n    remark: { type: String },\n    payment_method: {\n        type: String,\n        enum: Object.values(PAYMENT.METHOD),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.METHOD.CASH,\n    },\n    payment_gateway: {\n        type: String,\n        enum: Object.values(PAYMENT.GATEWAY),\n        required: [true, \"Why no payment_method?\"],\n        default: PAYMENT.GATEWAY.UNIONBANK,\n    },\n    payment_status: {\n        type: String,\n        enum: Object.values(PAYMENT.STATUS),\n        required: [true, \"Why no payment_status?\"],\n        default: PAYMENT.STATUS.PENDING,\n    },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"payroll_detail\");\n\nconst PayrollDetail = mongoose.model(\"PayrollDetail\", newSchema);\n\nif (preload) { PayrollDetail.insertMany(table); }\n\nexport default PayrollDetail;\n"]}
{"version":3,"sources":["../../../../src/api/general/payroll-detail/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","PayrollDetail","find","populate","path","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","newRecord","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\r\nimport log4js from \"log4js\";\r\nimport aqp from \"api-query-params\";\r\nimport PayrollDetail, { schemaCreate, schemaUpdate } from \"./model\";\r\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\r\nimport { STATUS_MSG } from \"../../../constants\";\r\n\r\n// Logging\r\nconst logger = log4js.getLogger(\"[payroll_detail]\");\r\nlog4js.configure({\r\n    appenders: { file: { type: \"file\", filename: \"logs/payroll_detail.log\" } },\r\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\r\n});\r\n\r\nexport async function fetchRecord(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await PayrollDetail.find(filter)\r\n            .populate(\"staff_id\", \"-password, -otp\")\r\n            .populate(\"payroll_id\")\r\n            .populate({ path: \"staff_id\", populate: { path: \"office_id\" } })\r\n            .populate(\"created_by\", \"id surname given_name email phone\")\r\n            .populate(\"updated_by\", \"id surname given_name email phone\")\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function createRecord(req, res) {\r\n    const data = req.body;\r\n    const { error } = Joi.validate(data, schemaCreate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    const newRecord = new PayrollDetail(data);\r\n    try {\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        return success(res, 201, result, \"Record created successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateRecord(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, schemaUpdate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await PayrollDetail.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteRecord(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await PayrollDetail.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../../../../src/api/general/timetable/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","timetable","find","populate","path","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","newRecord","Timetable","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Timetable, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[timetable]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/timetable.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await timetable.find(filter)\n            .populate(\"teacher_id\")\n            .populate(\"duration\")\n            .populate({ path: \"teacher_id\", select: \"-password\" })\n            .populate({ path: \"manager\", select: \"-password -otp\" })\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newRecord = new Timetable(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Timetable.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Timetable.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
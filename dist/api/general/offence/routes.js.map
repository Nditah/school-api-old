{"version":3,"sources":["../../../../src/api/general/offence/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchOffence","post","createOffence","put","updateOffence","delete","deleteOffence","fetchOffenceType","createOffenceType","updateOffenceType","deleteOffenceType"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDC,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAN,OAAOO,IAAP,CAAY,WAAZ,EAAyB,CAACH,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDG,yBAApD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBAR,OAAOS,GAAP,CAAW,qBAAX,EAAkC,CAACL,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DK,yBAA7D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACP,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEO,yBAAhE;;AAEA;;AAEA;;;;;;;;;;;;;;;AAeAZ,OAAOG,GAAP,CAAW,gBAAX,EAA6B,CAACC,wBAAD,EAAYC,2BAAZ,CAA7B,EAAwDQ,4BAAxD;;AAEA;;;;;;;;;;;;;;;;;AAiBAb,OAAOO,IAAP,CAAY,gBAAZ,EAA8B,CAACH,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDS,6BAAzD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAd,OAAOS,GAAP,CAAW,0BAAX,EAAuC,CAACL,wBAAD,EAAYC,2BAAZ,CAAvC,EAAkEU,6BAAlE;;AAEA;;;;;;;;;AASAf,OAAOW,MAAP,CAAc,0BAAd,EAA0C,CAACP,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEW,6BAArE;;kBAEehB,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchOffence, createOffence, updateOffence, deleteOffence,\n    fetchOffenceType, createOffenceType, updateOffenceType, deleteOffenceType,\n} from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/offences?id={recordId} Retrieve one or all records\n * @apiName RetrieveOffence\n * @apiGroup Offence\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/offences?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Offences  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/offences\", [checkAuth, isValidStaff], fetchOffence);\n\n/**\n * @api {post} /api/v1/offences Create offences\n * @apiName CreateOffence\n * @apiGroup Offence\n * @apiParam {String} offender_type Offence offender_type (required)\n * @apiParam {Number} offender_id Offence offender_id (required)\n * @apiParam {String} offence Offence offence (optional)\n * @apiParam {Date} offence_date Offence offence_date (optional)\n * @apiParam {String} description Offence description (optional)\n * @apiParam {String} offence_status Offence offence_status (\"PENDING\", \"ARBITRATED\")\n * @apiParam {String} verdict Offence verdict (\"INNOCENT\", \"GUILTY\")\n * @apiParam {Number} verdict_by Offence verdict_by (optional)\n * @apiParam {Date} verdict_date Offence verdict_date (optional)\n * @apiParam {String} verdict_remark Offence verdict_remark (optional)\n * @apiParam {Number} fine Offence fine (required)\n * @apiParam {String} discipline Offence discipline (\"WARNING\", \"SUSPENSION\", \"DISMISSED\")\n * @apiParam {String} suspension Offence suspension (optional)\n * @apiParam {Number} payment Offence paymentId (required)\n * @apiSuccess {Object} Offence Offence's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Offence not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/offences\", [checkAuth, isValidStaff], createOffence);\n\n/**\n * @api {put} /api/v1/offences/{recordId} Update offences\n * @apiName UpdateOffence\n * @apiGroup Offence\n * @apiPermission master\n * @apiParam {String} offender_type Offence offender_type\n * @apiParam {Number} offender_id Offence offender_id\n * @apiParam {String} offence Offence offence\n * @apiParam {Date} offence_date Offence offence_date\n * @apiParam {String} description Offence description\n * @apiParam {String} offence_status Offence offence_status (\"PENDING\", \"ARBITRATED\")\n * @apiParam {String} verdict Offence verdict (\"INNOCENT\", \"GUILTY\")\n * @apiParam {Number} verdict_by Offence verdict_by\n * @apiParam {Date} verdict_date Offence verdict_date\n * @apiParam {String} verdict_remark Offence verdict_remark\n * @apiParam {Number} fine Offence fine\n * @apiParam {String} discipline Offence discipline (\"WARNING\", \"SUSPENSION\", \"DISMISSED\")\n * @apiParam {String} suspension Offence suspension\n * @apiParam {Number} payment Offence paymentId\n * @apiSuccess {Object} Offence Offence's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Offence not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/offences/:recordId\", [checkAuth, isValidStaff], updateOffence);\n\n/**\n * @api {delete} /api/v1/offences/{recordId} Delete offences\n * @apiName DeleteOffence\n * @apiGroup Offence\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Offence not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/offences/:recordId\", [checkAuth, isValidStaff], deleteOffence);\n\n//* ================ OFFENCE TYPE ===================\n\n/**\n * @api {get} /api/v1/offence-types?id={recordId} Retrieve one or all records\n * @apiName RetrieveOffenceType\n * @apiGroup OffenceType\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/offence-types?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription OffenceTypes  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/offence-types\", [checkAuth, isValidStaff], fetchOffenceType);\n\n/**\n * @api {post} /api/v1/offence-types Create offence-types\n * @apiName CreateOffenceType\n * @apiGroup OffenceType\n * @apiParam {String} code OffenceType code (required)\n * @apiParam {String} offender_type OffenceType offender_type \"PARTNER\", \"STAFF\" (required)\n * @apiParam {String} name OffenceType name (required)\n * @apiParam {Number} fine OffenceType fine (required)\n * @apiParam {String} discipline OffenceType discipline\n * \"WARNING\", \"SUSPENSION\", \"DISMISSED\" (required)\n * @apiParam {Number} suspension_days OffenceType suspension_days (required)\n * @apiParam {String} description OffenceType description (required)\n * @apiSuccess {Object} OffenceType OffenceType's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 OffenceType not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/offence-types\", [checkAuth, isValidStaff], createOffenceType);\n\n/**\n * @api {put} /api/v1/offence-types/{recordId} Update offence-types\n * @apiName UpdateOffenceType\n * @apiGroup OffenceType\n * @apiPermission master\n * @apiParam {String} code OffenceType code\n * @apiParam {String} offender_type OffenceType offender_type \"PARTNER\", \"STAFF\"\n * @apiParam {String} name OffenceType name\n * @apiParam {Number} fine OffenceType fine\n * @apiParam {String} discipline OffenceType discipline\n * \"WARNING\", \"SUSPENSION\", \"DISMISSED\"\n * @apiParam {Number} suspension_days OffenceType suspension_days\n * @apiParam {String} description OffenceType description\n * @apiSuccess {Object} OffenceType OffenceType's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 OffenceType not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/offence-types/:recordId\", [checkAuth, isValidStaff], updateOffenceType);\n\n/**\n * @api {delete} /api/v1/offence-types/{recordId} Delete offence-types\n * @apiName DeleteOffenceType\n * @apiGroup OffenceType\n * @apiParam {String} recordId ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 OffenceType not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/offence-types/:recordId\", [checkAuth, isValidStaff], deleteOffenceType);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/donation/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,YAAX,EAAyB,CAACC,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDC,uBAApD;;AAEA;;;;;;;;;;;;;;AAcAN,OAAOO,IAAP,CAAY,YAAZ,EAA0B,CAACH,wBAAD,EAAYC,2BAAZ,CAA1B,EAAqDG,wBAArD;;AAEA;;;;;;;;;;;;;;AAcAR,OAAOS,GAAP,CAAW,sBAAX,EAAmC,CAACL,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DK,wBAA9D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,sBAAd,EAAsC,CAACP,wBAAD,EAAYC,2BAAZ,CAAtC,EAAiEO,wBAAjE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/donations?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveDonation\r\n * @apiGroup Donation\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/donations?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records  of account headings belonging to one classification\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/donations\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/donations Create donations\r\n * @apiName CreateDonation\r\n * @apiGroup Donation\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} Name Donation name string (required)\r\n * @apiParam {String} email Donation email string (required)\r\n * @apiParam {String} description Donation description string (optional)\r\n * @apiParam {ObjectId} password Donation password string\r\n * @apiSuccess {Object} Donation Donation's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Donation not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/donations\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/donations/{recordId} Update donations\r\n * @apiName UpdateDonation\r\n * @apiGroup Donation\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} Name Donation name string (required)\r\n * @apiParam {String} email Donation email string (required)\r\n * @apiParam {String} description Donation description string (optional)\r\n * @apiParam {ObjectId} password Donation password string\r\n * @apiSuccess {Object} Donation Donation's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Donation not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/donations/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/donations/{recordId} Delete donations\r\n * @apiName DeleteDonation\r\n * @apiGroup Donation\r\n * @apiPermission master\r\n * @apiParam {String} recordId ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Donation not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.delete(\"/donations/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
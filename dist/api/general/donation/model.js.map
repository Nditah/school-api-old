{"version":3,"sources":["../../../../src/api/general/donation/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","optional","email","password","phone","description","created_by","required","schemaUpdate","updated_by","schema","type","String","amount","Number","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","Donation","model"],"mappings":";;;;;;;AASA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;AAJA;AAXA;;;;;;;;;IAiBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,WAAOH,cAAIC,MAAJ,GAAaC,QAAb,EAFiB;AAGxBE,cAAUJ,cAAIC,MAAJ,GAAaC,QAAb,EAHc;AAIxBG,WAAOL,cAAIC,MAAJ,GAAaC,QAAb,EAJiB;AAKxBI,iBAAaN,cAAIC,MAAJ,GAAaC,QAAb,EALW;AAMxBK,gBAAYP,cAAIC,MAAJ,GAAaO,QAAb;AANY,CAArB;;AASA,IAAMC,sCAAe;AACxBV,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,WAAOH,cAAIC,MAAJ,GAAaC,QAAb,EAFiB;AAGxBE,cAAUJ,cAAIC,MAAJ,GAAaC,QAAb,EAHc;AAIxBG,WAAOL,cAAIC,MAAJ,GAAaC,QAAb,EAJiB;AAKxBI,iBAAaN,cAAIC,MAAJ,GAAaC,QAAb,EALW;AAMxBQ,gBAAYV,cAAIC,MAAJ,GAAaO,QAAb;AANY,CAArB;;AASA,IAAMG,0BAAS;AAClBZ,UAAM,EAAEa,MAAMC,MAAR,EAAgBL,UAAU,IAA1B,EADY;AAElBL,WAAO,EAAES,MAAMC,MAAR,EAAgBL,UAAU,KAA1B,EAFW;AAGlBJ,cAAU,EAAEQ,MAAMC,MAAR,EAAgBL,UAAU,KAA1B,EAHQ;AAIlBH,WAAO,EAAEO,MAAMC,MAAR,EAJW;AAKlBC,YAAO,EAAEF,MAAMG,MAAR,EALW;AAMlBT,iBAAa,EAAEM,MAAMC,MAAR,EANK;AAOlBN,gBAAY,EAAEK,MAAMhB,QAAR,EAAkBoB,KAAK,OAAvB,EAAgCR,UAAU,IAA1C,EAPM;AAQlBE,gBAAY,EAAEE,MAAMhB,QAAR,EAAkBoB,KAAK,OAAvB;AARM,CAAf;AAUP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWiB,MAAX,EAAmBU,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,UAA5B;AACAD,UAAUE,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,WAAWhC,mBAASiC,KAAT,CAAe,UAAf,EAA2BL,SAA3B,CAAjB;;kBAGeI,Q","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Donation primaryKey\n * @property {String} name Donation full name string (required)\n * @property {String} email Donation email String (required)\n * @property {String} password Donation password String\n * @property {String} description Donation description\n * @description Donation model holds all School donations\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().optional(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    description: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().optional(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    description: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: true },\n    email: { type: String, required: false},\n    password: { type: String, required: false },\n    phone: { type: String },\n    amount:{ type: Number },\n    description: { type: String },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"donation\");\nnewSchema.plugin(mongoose_csv);\n\nconst Donation = mongoose.model(\"Donation\", newSchema);\n\n\nexport default Donation;\n"]}
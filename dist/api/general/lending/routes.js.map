{"version":3,"sources":["../../../../src/api/general/lending/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDC,uBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAN,OAAOO,IAAP,CAAY,WAAZ,EAAyB,CAACH,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDG,wBAApD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAR,OAAOS,GAAP,CAAW,qBAAX,EAAkC,CAACL,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DK,wBAA7D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACP,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEO,wBAAhE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, auditRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/lendings?id={recordId} Retrieve Lending record(s)\r\n * @apiName RetrieveLending\r\n * @apiGroup Lending\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/lendings\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records  of account headings belonging to one classification\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/lendings\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/lendings Create lendings\r\n * @apiName CreateLending\r\n * @apiGroup Lending\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {ObjectId} book Lending book\r\n * @apiParam {ObjectId} user_type Lending related user_type ObjectId\r\n * @apiParam {ObjectId} staff_id Lending staff_id ObjectId\r\n * @apiParam {ObjectId} student_id Lending student_id ObjectId\r\n * @apiParam {ObjectId} classe_id Lending classe_id ObjectId\r\n * @apiParam {Date} request_date Lending request_date (optional)\r\n * @apiParam {Date} issued_date Lending issued_date (optional)\r\n * @apiParam {String} issued_by Lending issued_by (optional)\r\n * @apiParam {String} issuer_remark Lending issuer_remark (optional)\r\n * @apiParam {String} request_status Lending request_status\r\n *  \"PENDING|COLLECTED|REVOKED\"PENDING\" optional)\r\n * @apiParam {Boolean} is_returnable Lending is_returnable (optional)\r\n * @apiParam {Date} expected_returned_date Lending expected_returned_date (optional)\r\n * @apiParam {Date} actual_returned_date Lending actual_returned_date (optional)\r\n * @apiParam {Date} collected_date Lending collected_date (optional)\r\n * @apiParam {String} collected_by Lending collected_by (optional)\r\n * @apiParam {String} collected_remark Lending collected_remark (optional)\r\n * @apiSuccess {Object} Lending Lending's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Lending not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/lendings\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/lendings/{recordId} Update lendings\r\n * @apiName UpdateLending\r\n * @apiGroup Lending\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {ObjectId} book Lending book\r\n * @apiParam {ObjectId} user_type Lending related user_type ObjectId\r\n * @apiParam {ObjectId} staff_id Lending staff_id ObjectId\r\n * @apiParam {ObjectId} student_id Lending student_id ObjectId\r\n * @apiParam {ObjectId} classe_id Lending classe_id ObjectId\r\n * @apiParam {Date} request_date Lending request_date (optional)\r\n * @apiParam {Date} issued_date Lending issued_date (optional)\r\n * @apiParam {String} issued_by Lending issued_by (optional)\r\n * @apiParam {String} issuer_remark Lending issuer_remark (optional)\r\n * @apiParam {String} request_status Lending request_status\r\n *  \"PENDING|COLLECTED|REVOKED\"PENDING\" optional)\r\n * @apiParam {Boolean} is_returnable Lending is_returnable (optional)\r\n * @apiParam {Date} expected_returned_date Lending expected_returned_date (optional)\r\n * @apiParam {Date} actual_returned_date Lending actual_returned_date (optional)\r\n * @apiParam {Date} collected_date Lending collected_date (optional)\r\n * @apiParam {String} collected_by Lending collected_by (optional)\r\n * @apiParam {String} collected_remark Lending collected_remark (optional)\r\n * @apiSuccess {Object} Lending Lending's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Lending not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/lendings/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/lendings/{recordId} Delete lendings\r\n * @apiName DeleteLending\r\n * @apiGroup Lending\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Lending not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.delete(\"/lendings/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
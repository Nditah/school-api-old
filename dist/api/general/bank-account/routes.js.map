{"version":3,"sources":["../../../../src/api/general/bank-account/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,gBAAX,EAA6B,CAACC,wBAAD,EAAYC,2BAAZ,CAA7B,EAAwDC,uBAAxD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BAN,OAAOO,IAAP,CAAY,gBAAZ,EAA8B,CAACH,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDG,wBAAzD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCAR,OAAOS,GAAP,CAAW,0BAAX,EAAuC,CAACL,wBAAD,EAAYC,2BAAZ,CAAvC,EAAkEK,wBAAlE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,0BAAd,EAA0C,CAACP,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEO,wBAArE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/bank-accounts?id={recordId} Retrieve one or all records\n * @apiName RetrieveBankAccount\n * @apiGroup BankAccount\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/bank-accounts?\n * @apiHeader {String} Authorization authorization token\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of Corporate Bank-accounts for all terminals and management operations\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/bank-accounts\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/bank-accounts Create bank-accounts\n * @apiName CreateBank-Account\n * @apiGroup BankAccount\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} name Bank-Account name\n * @apiParam {String} signatory Bank-Account signatory (optional)\n * @apiParam {String} subsidiary Bank-Account subsidiary (required)\n * @apiParam {Number} terminal_id Bank-Account terminal_id (required)\n * @apiParam {Number} bank_id Bank-Account bank_id (required)\n * @apiParam {String} account_name Bank-Account account_name (required)\n * @apiParam {Number} account_number Bank-Account account_number (required)\n * @apiParam {String} account_type Bank-Account account_type (BANK_ACCOUNT_TYPE) (required)\n * @apiParam {String} usage Bank-Account usage (BANK_ACCOUNT_USAGE) (required)\n * @apiParam {String} category Bank-Account category (\"INCOME\", \"EXPENSES\", \"BOTH\") (required)\n * @apiParam {String} description Bank-Account description (required)\n * @apiParam {String} country_iso2 Bank-Account country_iso2 (required)\n * @apiParam {String} currency Bank-Account currency (required)\n * @apiParam {Date} opening_date Bank-Account opening_date (optional)\n * @apiParam {Date} closing_date Bank-Account closing_date (optional)\n * @apiParam {Number} opening_balance Bank-Account opening_balance (optional)\n * @apiParam {Number} closing_balance Bank-Account closing_balance (optional)\n * @apiParam {Number} lien_amount Bank-Account lien_amount (optional)\n * @apiParam {Number} available_balance Bank-Account available_balance (optional)\n * @apiParam {Number} total_credit Bank-Account total_credit (optional)\n * @apiParam {Number} total_debit Bank-Account total_debit (optional)\n * @apiSuccess {Object} Bank-Account Bank-Account's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Bank-Account not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/bank-accounts\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/bank-accounts/{recordId} Update bank-accounts\n * @apiName UpdateBank-Account\n * @apiGroup BankAccount\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} name Bank-Account name\n * @apiParam {String} signatory Bank-Account signatory (optional)\n * @apiParam {String} subsidiary Bank-Account subsidiary (optional)\n * @apiParam {Number} terminal_id Bank-Account terminal_id (optional)\n * @apiParam {Number} bank_id Bank-Account bank_id (optional)\n * @apiParam {String} account_name Bank-Account account_name (optional)\n * @apiParam {Number} account_number Bank-Account account_number (optional)\n * @apiParam {String} account_type Bank-Account account_type (BANK_ACCOUNT_TYPE) (optional)\n * @apiParam {String} usage Bank-Account usage (BANK_ACCOUNT_USAGE) (optional)\n * @apiParam {String} category Bank-Account category (\"INCOME\", \"EXPENSES\", \"BOTH\") (optional)\n * @apiParam {String} description Bank-Account description (optional)\n * @apiParam {String} country_iso2 Bank-Account country_iso2 (optional)\n * @apiParam {String} currency Bank-Account currency (optional)\n * @apiParam {Date} opening_date Bank-Account opening_date (optional)\n * @apiParam {Date} closing_date Bank-Account closing_date (optional)\n * @apiParam {Number} opening_balance Bank-Account opening_balance (optional)\n * @apiParam {Number} closing_balance Bank-Account closing_balance (optional)\n * @apiParam {Number} lien_amount Bank-Account lien_amount (optional)\n * @apiParam {Number} available_balance Bank-Account available_balance (optional)\n * @apiParam {Number} total_credit Bank-Account total_credit (optional)\n * @apiParam {Number} total_debit Bank-Account total_debit (optional)\n * @apiSuccess {Object} Bank-Account Bank-Account's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Bank-Account not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/bank-accounts/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/bank-accounts/{recordId} Delete bank-accounts\n * @apiName DeleteBank-Account\n * @apiGroup BankAccount\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Bank-Account not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/bank-accounts/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/bank-account/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","BANK_ACCOUNT_TYPE","BANK_ACCOUNT_USAGE","table","Staff","Bank","Schema","ObjectId","Types","schemaCreate","name","string","trim","required","signatory","optional","subsidiary","terminal_id","bank_id","account_name","account_number","number","account_type","valid","Object","values","usage","category","description","country_iso2","currency","opening_date","date","closing_date","opening_balance","closing_balance","lien_amount","available_balance","total_credit","total_debit","created_by","schemaUpdate","updated_by","schema","type","String","ref","enum","default","Date","Number","preload","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","BankAccount","model","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {ObjectId} id Bank-Account ObjectId primaryKey\n * @property {String} name Bank-Account name\n * @property {String} signatory Bank-Account signatory (optional)\n * @property {String} subsidiary Bank-Account subsidiary (required)\n * @property {Number} terminal_id Bank-Account terminal_id (required)\n * @property {Number} bank_id Bank-Account bank_id (required)\n * @property {String} account_name Bank-Account account_name (required)\n * @property {Number} account_number Bank-Account account_number (required)\n * @property {String} account_type Bank-Account account_type (BANK_ACCOUNT_TYPE) (required)\n * @property {String} usage Bank-Account usage (BANK_ACCOUNT_USAGE) (required)\n * @property {String} category Bank-Account category (\"INCOME\", \"EXPENSES\", \"BOTH\") (required)\n * @property {String} description Bank-Account description (required)\n * @property {String} country_iso2 Bank-Account country_iso2 (required)\n * @property {String} currency Bank-Account currency (required)\n * @property {Date} opening_date Bank-Account opening_date (optional)\n * @property {Date} closing_date Bank-Account closing_date (optional)\n * @property {Number} opening_balance Bank-Account opening_balance (optional)\n * @property {Number} closing_balance Bank-Account closing_balance (optional)\n * @property {Number} lien_amount Bank-Account lien_amount (optional)\n * @property {Number} available_balance Bank-Account available_balance (optional)\n * @property {Number} total_credit Bank-Account total_credit (optional)\n * @property {Number} total_debit Bank-Account total_debit (optional)\n * @description BankAccount model holds record of all banks acccounts the company has\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_USAGE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Bank from \"../bank/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    signatory: Joi.string().optional(),\n    subsidiary: Joi.string().trim().required(),\n    terminal_id: Joi.string().required(),\n    bank_id: Joi.string().required(),\n    account_name: Joi.string().required(),\n    account_number: Joi.number().required(),\n    account_type: Joi.string().valid(Object.values(BANK_ACCOUNT_TYPE)).required(),\n    usage: Joi.string().valid(Object.values(BANK_ACCOUNT_USAGE)).required(),\n    category: Joi.string().valid([\"INCOME\", \"EXPENSES\", \"BOTH\"]).required(),\n    description: Joi.string().required(),\n    country_iso2: Joi.string().required(),\n    currency: Joi.string().required(),\n    opening_date: Joi.date().optional(),\n    closing_date: Joi.date().optional(),\n    opening_balance: Joi.number().optional(),\n    closing_balance: Joi.number().optional(),\n    lien_amount: Joi.number().optional(),\n    available_balance: Joi.number().optional(),\n    total_credit: Joi.number().optional(),\n    total_debit: Joi.number().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    signatory: Joi.string().optional(),\n    subsidiary: Joi.string().trim().optional(),\n    terminal_id: Joi.string().optional(),\n    bank_id: Joi.string().optional(),\n    account_name: Joi.string().optional(),\n    account_number: Joi.number().optional(),\n    account_type: Joi.string().valid(Object.values(BANK_ACCOUNT_TYPE)).optional(),\n    usage: Joi.string().valid(Object.values(BANK_ACCOUNT_USAGE)).optional(),\n    category: Joi.string().valid([\"INCOME\", \"EXPENSES\", \"BOTH\"]).optional(),\n    description: Joi.string().optional(),\n    country_iso2: Joi.string().optional(),\n    currency: Joi.string().optional(),\n    opening_date: Joi.date().optional(),\n    closing_date: Joi.date().optional(),\n    opening_balance: Joi.number().optional(),\n    closing_balance: Joi.number().optional(),\n    lien_amount: Joi.number().optional(),\n    available_balance: Joi.number().optional(),\n    total_credit: Joi.number().optional(),\n    total_debit: Joi.number().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String },\n    signatory: { type: String },\n    subsidiary: { type: String },\n    terminal_id: { type: ObjectId, ref: \"Terminal\" },\n    bank_id: { type: ObjectId, ref: \"Bank\", required: true },\n    account_name: { type: String },\n    account_number: { type: String },\n    account_type: {\n        type: String,\n        enum: Object.values(BANK_ACCOUNT_TYPE),\n    },\n    usage: {\n        type: String,\n        enum: Object.values(BANK_ACCOUNT_USAGE),\n    },\n    category: { type: String, enum: [\"INCOME\", \"EXPENSES\", \"BOTH\"] },\n    description: { type: String },\n    country_iso2: { type: String, default: \"ng\" },\n    currency: { type: String, default: \"NGN\" },\n    opening_date: { type: Date },\n    closing_date: { type: Date },\n    opening_balance: { type: Number },\n    closing_balance: { type: Number },\n    lien_amount: { type: Number },\n    available_balance: { type: Number },\n    total_credit: { type: Number },\n    total_debit: { type: Number },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"bank_account\");\n\nconst BankAccount = mongoose.model(\"BankAccount\", newSchema);\n\nif (preload) { BankAccount.insertMany(table); }\n\nexport default BankAccount;\n"]}
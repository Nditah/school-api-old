{"version":3,"sources":["../../../../src/api/general/bank-account/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","trim","required","signatory","optional","subsidiary","terminal_id","bank_id","account_name","account_number","number","account_type","valid","Object","values","BANK_ACCOUNT_TYPE","usage","BANK_ACCOUNT_USAGE","category","description","country_iso2","currency","opening_date","date","closing_date","opening_balance","closing_balance","lien_amount","available_balance","total_credit","total_debit","created_by","schemaUpdate","updated_by","schema","type","String","ref","enum","default","Date","Number","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","BankAccount","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\r\n/**\r\n * @author 4Dcoder\r\n * @property {ObjectId} id Bank-Account ObjectId primaryKey\r\n * @property {String} name Bank-Account name\r\n * @property {String} signatory Bank-Account signatory (optional)\r\n * @property {String} subsidiary Bank-Account subsidiary (required)\r\n * @property {Number} terminal_id Bank-Account terminal_id (required)\r\n * @property {Number} bank_id Bank-Account bank_id (required)\r\n * @property {String} account_name Bank-Account account_name (required)\r\n * @property {Number} account_number Bank-Account account_number (required)\r\n * @property {String} account_type Bank-Account account_type (BANK_ACCOUNT_TYPE) (required)\r\n * @property {String} usage Bank-Account usage (BANK_ACCOUNT_USAGE) (required)\r\n * @property {String} category Bank-Account category (\"INCOME\", \"EXPENSES\", \"BOTH\") (required)\r\n * @property {String} description Bank-Account description (required)\r\n * @property {String} country_iso2 Bank-Account country_iso2 (required)\r\n * @property {String} currency Bank-Account currency (required)\r\n * @property {Date} opening_date Bank-Account opening_date (optional)\r\n * @property {Date} closing_date Bank-Account closing_date (optional)\r\n * @property {Number} opening_balance Bank-Account opening_balance (optional)\r\n * @property {Number} closing_balance Bank-Account closing_balance (optional)\r\n * @property {Number} lien_amount Bank-Account lien_amount (optional)\r\n * @property {Number} available_balance Bank-Account available_balance (optional)\r\n * @property {Number} total_credit Bank-Account total_credit (optional)\r\n * @property {Number} total_debit Bank-Account total_debit (optional)\r\n * @description BankAccount model holds record of all banks acccounts the company has\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE, BANK_ACCOUNT_TYPE, BANK_ACCOUNT_USAGE } from \"../../../constants\";\r\nimport table from \"./table\";\r\nimport Staff from \"../staff/model\";\r\nimport Bank from \"../bank/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaCreate = {\r\n    name: Joi.string().trim().required(),\r\n    signatory: Joi.string().optional(),\r\n    subsidiary: Joi.string().trim().required(),\r\n    terminal_id: Joi.string().required(),\r\n    bank_id: Joi.string().required(),\r\n    account_name: Joi.string().required(),\r\n    account_number: Joi.number().required(),\r\n    account_type: Joi.string().valid(Object.values(BANK_ACCOUNT_TYPE)).required(),\r\n    usage: Joi.string().valid(Object.values(BANK_ACCOUNT_USAGE)).required(),\r\n    category: Joi.string().valid([\"INCOME\", \"EXPENSES\", \"BOTH\"]).required(),\r\n    description: Joi.string().required(),\r\n    country_iso2: Joi.string().required(),\r\n    currency: Joi.string().required(),\r\n    opening_date: Joi.date().optional(),\r\n    closing_date: Joi.date().optional(),\r\n    opening_balance: Joi.number().optional(),\r\n    closing_balance: Joi.number().optional(),\r\n    lien_amount: Joi.number().optional(),\r\n    available_balance: Joi.number().optional(),\r\n    total_credit: Joi.number().optional(),\r\n    total_debit: Joi.number().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    name: Joi.string().trim().optional(),\r\n    signatory: Joi.string().optional(),\r\n    subsidiary: Joi.string().trim().optional(),\r\n    terminal_id: Joi.string().optional(),\r\n    bank_id: Joi.string().optional(),\r\n    account_name: Joi.string().optional(),\r\n    account_number: Joi.number().optional(),\r\n    account_type: Joi.string().valid(Object.values(BANK_ACCOUNT_TYPE)).optional(),\r\n    usage: Joi.string().valid(Object.values(BANK_ACCOUNT_USAGE)).optional(),\r\n    category: Joi.string().valid([\"INCOME\", \"EXPENSES\", \"BOTH\"]).optional(),\r\n    description: Joi.string().optional(),\r\n    country_iso2: Joi.string().optional(),\r\n    currency: Joi.string().optional(),\r\n    opening_date: Joi.date().optional(),\r\n    closing_date: Joi.date().optional(),\r\n    opening_balance: Joi.number().optional(),\r\n    closing_balance: Joi.number().optional(),\r\n    lien_amount: Joi.number().optional(),\r\n    available_balance: Joi.number().optional(),\r\n    total_credit: Joi.number().optional(),\r\n    total_debit: Joi.number().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    name: { type: String },\r\n    signatory: { type: String },\r\n    subsidiary: { type: String },\r\n    terminal_id: { type: ObjectId, ref: \"Terminal\" },\r\n    bank_id: { type: ObjectId, ref: \"Bank\", required: true },\r\n    account_name: { type: String },\r\n    account_number: { type: String },\r\n    account_type: {\r\n        type: String,\r\n        enum: Object.values(BANK_ACCOUNT_TYPE),\r\n    },\r\n    usage: {\r\n        type: String,\r\n        enum: Object.values(BANK_ACCOUNT_USAGE),\r\n    },\r\n    category: { type: String, enum: [\"INCOME\", \"EXPENSES\", \"BOTH\"] },\r\n    description: { type: String },\r\n    country_iso2: { type: String, default: \"ng\" },\r\n    currency: { type: String, default: \"NGN\" },\r\n    opening_date: { type: Date },\r\n    closing_date: { type: Date },\r\n    opening_balance: { type: Number },\r\n    closing_balance: { type: Number },\r\n    lien_amount: { type: Number },\r\n    available_balance: { type: Number },\r\n    total_credit: { type: Number },\r\n    total_debit: { type: Number },\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.set(\"collection\", \"bank_account\");\r\n\r\nconst BankAccount = mongoose.model(\"BankAccount\", newSchema);\r\n\r\nif (preload) { BankAccount.insertMany(table); }\r\n\r\nexport default BankAccount;\r\n"]}
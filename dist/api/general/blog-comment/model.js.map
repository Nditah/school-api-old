{"version":3,"sources":["../../../../src/api/general/blog-comment/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","Staff","Blog","Schema","ObjectId","Types","schemaCreate","blog_id","string","optional","related_comment_id","comment","required","is_published","boolean","created_by","schemaUpdate","updated_by","schema","type","ref","String","Boolean","default","options","OPTIONS","newSchema","set","BlogComment","model"],"mappings":"AAAA;;;;;;;;;AASA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA;AACA,OAAOC,IAAP,MAAiB,eAAjB;;AAEA,MAAM,EAAEC,MAAF,KAAaL,QAAnB;AACA,MAAM,EAAEM,QAAF,KAAeD,OAAOE,KAA5B;;AAEA,OAAO,MAAMC,eAAe;AACxBC,aAASV,IAAIW,MAAJ,GAAaC,QAAb,EADe;AAExBC,wBAAoBb,IAAIW,MAAJ,GAAaC,QAAb,EAFI;AAGxBE,aAASd,IAAIW,MAAJ,GAAaI,QAAb,EAHe;AAIxBC,kBAAchB,IAAIiB,OAAJ,GAAcL,QAAd,EAJU;AAKxBM,gBAAYlB,IAAIW,MAAJ,GAAaI,QAAb;AALY,CAArB;;AAQP,OAAO,MAAMI,eAAe;AACxBT,aAASV,IAAIW,MAAJ,GAAaC,QAAb,EADe;AAExBC,wBAAoBb,IAAIW,MAAJ,GAAaC,QAAb,EAFI;AAGxBE,aAASd,IAAIW,MAAJ,GAAaC,QAAb,EAHe;AAIxBI,kBAAchB,IAAIiB,OAAJ,GAAcL,QAAd,EAJU;AAKxBQ,gBAAYpB,IAAIW,MAAJ,GAAaI,QAAb;AALY,CAArB;;AAQP,OAAO,MAAMM,SAAS;AAClBX,aAAS,EAAEY,MAAMf,QAAR,EAAkBgB,KAAK,MAAvB,EADS;AAElBV,wBAAoB,EAAES,MAAMf,QAAR,EAAkBgB,KAAK,aAAvB,EAFF;AAGlBT,aAAS,EAAEQ,MAAME,MAAR,EAAgBT,UAAU,CAAC,IAAD,EAAO,eAAP,CAA1B,EAHS;AAIlBC,kBAAc,EAAEM,MAAMG,OAAR,EAAiBC,SAAS,KAA1B,EAJI;AAKlBR,gBAAY,EAAEI,MAAMf,QAAR,EAAkBgB,KAAK,UAAvB,EAAmCR,UAAU,IAA7C,EALM;AAMlBK,gBAAY,EAAEE,MAAMf,QAAR;AANM,CAAf;;AASP,MAAMoB,UAAUxB,SAASyB,OAAzB;;AAEA,MAAMC,YAAY,IAAIvB,MAAJ,CAAWe,MAAX,EAAmBM,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,cAA5B;;AAEA,MAAMC,cAAc9B,SAAS+B,KAAT,CAAe,aAAf,EAA8BH,SAA9B,CAApB;;AAEA,eAAeE,WAAf","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id BlogComment primaryKey\n * @property {String} blog_id BlogComment blog ObjectId\n * @property {String} related_comment_id BlogComment replied to comment ObjectId\n * @property {String} comment BlogComment comment\n * @property {String} is_published BlogComment published status\n * @description BlogComment model holds record of all blog post comments and replies\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport Staff from \"../staff/model\";\n// eslint-disable-next-line import/no-cycle\nimport Blog from \"../blog/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    blog_id: Joi.string().optional(),\n    related_comment_id: Joi.string().optional(),\n    comment: Joi.string().required(),\n    is_published: Joi.boolean().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    blog_id: Joi.string().optional(),\n    related_comment_id: Joi.string().optional(),\n    comment: Joi.string().optional(),\n    is_published: Joi.boolean().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    blog_id: { type: ObjectId, ref: \"Blog\" },\n    related_comment_id: { type: ObjectId, ref: \"BlogComment\" },\n    comment: { type: String, required: [true, \"Why no input?\"] },\n    is_published: { type: Boolean, default: false },\n    created_by: { type: ObjectId, ref: \"Customer\", required: true },\n    updated_by: { type: ObjectId },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"blog_comment\");\n\nconst BlogComment = mongoose.model(\"BlogComment\", newSchema);\n\nexport default BlogComment;\n"]}
{"version":3,"sources":["../../../../src/api/general/blog-comment/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","BlogComment","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","newRecord","save","ERROR","Blog","update","_id","blob_id","$push","comment_ids","result2","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","new","updateRecord","findOneAndRemove","$pull","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":";;;;;;;;uEAeO,iBAA2BA,GAA3B,EAAgCC,GAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACKC,6BADL,GACeF,GADf,CACKE,KADL;AAAA,+BAE+C,8BAAIA,KAAJ,CAF/C,EAEKC,MAFL,QAEKA,MAFL,EAEaC,IAFb,QAEaA,IAFb,EAEmBC,KAFnB,QAEmBA,KAFnB,EAE0BC,IAF1B,QAE0BA,IAF1B,EAEgCC,UAFhC,QAEgCA,UAFhC;AAAA;AAAA;AAIgB,+BAAMC,gBAAYC,IAAZ,CAAiBN,MAAjB,EAChBO,QADgB,CACP,SADO,EAEhBA,QAFgB,CAEP,oBAFO,EAGhBA,QAHgB,CAGP,YAHO,EAGO,mCAHP,EAIhBN,IAJgB,CAIXA,IAJW,EAKhBC,KALgB,CAKVA,KALU,EAMhBC,IANgB,CAMXA,IANW,EAOhBK,MAPgB,CAOTJ,UAPS,EAQhBK,IARgB,EAAN;;AAJhB;AAIOC,8BAJP;;AAAA,4BAaMA,MAbN;AAAA;AAAA;AAAA;;AAAA,yDAcY,mBAASZ,GAAT,EAAc,qCAAd,CAdZ;;AAAA;AAgBCa,+BAAOC,IAAP,CAAYC,sBAAWC,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AAhBD,yDAiBQ,kBAAQjB,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,IAA1B,CAjBR;;AAAA;AAAA;AAAA;;AAmBCC,+BAAOK,KAAP;AAnBD,yDAoBQ,eAAKlB,GAAL,EAAU,GAAV,gCAA2C,YAAImB,OAA/C,CApBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,W;;;;;;wEAwBf,kBAA4BrB,GAA5B,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGqB,4BADH,GACUtB,IAAIuB,IADd;AAAA,wCAEeC,cAAIC,QAAJ,CAAaH,IAAb,EAAmBI,mBAAnB,CAFf,EAEKP,KAFL,iBAEKA,KAFL;;AAAA,6BAGCA,KAHD;AAAA;AAAA;AAAA;;AAAA,0DAGe,eAAKlB,GAAL,EAAU,GAAV,sCAAiDkB,MAAMC,OAAvD,CAHf;;AAAA;AAAA;AAKOO,iCALP,GAKmB,IAAInB,eAAJ,CAAgBc,IAAhB,CALnB;AAAA;AAMgB,+BAAMK,UAAUC,IAAV,EAAN;;AANhB;AAMOf,8BANP;;AAAA,4BAOMA,MAPN;AAAA;AAAA;AAAA;;AAQKC,+BAAOK,KAAP,CAAaH,sBAAWa,KAAX,CAAiBX,OAA9B,EAAuC,EAAvC;AARL,0DASY,mBAASjB,GAAT,EAAc,qCAAd,CATZ;;AAAA;AAAA;AAWiB,+BAAM6B,gBAAKC,MAAL,CAAY,EAAEC,KAAKnB,OAAOoB,OAAd,EAAZ,EAClB,EAAEC,OAAO,EAAEC,aAAatB,OAAOmB,GAAtB,EAAT,EADkB,EACsBpB,IADtB,EAAN;;AAXjB;AAWOwB,+BAXP;;AAaCtB,+BAAOC,IAAP,CAAYC,sBAAWC,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AAbD,0DAcQ,kBAAQjB,GAAR,EAAa,GAAb,EAAkBmC,OAAlB,EAA2B,8BAA3B,CAdR;;AAAA;AAAA;AAAA;;AAgBCtB,+BAAOK,KAAP;AAhBD,0DAiBQ,eAAKlB,GAAL,EAAU,GAAV,8BAAyC,aAAImB,OAA7C,CAjBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeiB,Y;;;;;;wEAqBf,kBAA4BrC,GAA5B,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGqB,4BADH,GACUtB,IAAIuB,IADd;AAEee,0BAFf,GAEsBtC,IAAIuC,MAF1B,CAEKC,QAFL;AAAA,yCAGehB,cAAIC,QAAJ,CAAaH,IAAb,EAAmBmB,mBAAnB,CAHf,EAGKtB,KAHL,kBAGKA,KAHL;;AAAA,6BAICA,KAJD;AAAA;AAAA;AAAA;;AAAA,0DAIe,eAAKlB,GAAL,EAAU,GAAV,sCAAiDkB,MAAMC,OAAvD,CAJf;;AAAA;AAAA;AAAA;AAMgB,+BAAMZ,gBAAYkC,gBAAZ,CAA6B,EAAEV,KAAKM,EAAP,EAA7B,EAA0ChB,IAA1C,EAAgD,EAAEqB,KAAK,IAAP,EAAhD,CAAN;;AANhB;AAMO9B,8BANP;;AAAA,4BAOMA,MAPN;AAAA;AAAA;AAAA;;AAAA,0DAQY,mBAASZ,GAAT,4CAAsDqC,EAAtD,CARZ;;AAAA;AAAA,0DAUQ,kBAAQrC,GAAR,EAAa,GAAb,EAAkBY,MAAlB,EAA0B,8BAA1B,CAVR;;AAAA;AAAA;AAAA;;AAYCC,+BAAOK,KAAP;AAZD,0DAaQ,eAAKlB,GAAL,EAAU,GAAV,8BAAyC,aAAImB,OAA7C,CAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAewB,Y;;;;;;wEAiBf,kBAA4B5C,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACeqC,0BADf,GACsBtC,IAAIuC,MAD1B,CACKC,QADL;AAAA;AAAA;AAGgB,+BAAMhC,gBAAYqC,gBAAZ,CAA6B,EAAEb,KAAKM,EAAP,EAA7B,CAAN;;AAHhB;AAGOzB,8BAHP;;AAAA,4BAIMA,MAJN;AAAA;AAAA;AAAA;;AAAA,0DAKY,mBAASZ,GAAT,4CAAsDqC,EAAtD,CALZ;;AAAA;AAAA;AAOiB,+BAAMR,gBAAKC,MAAL,CAAY,EAAEC,KAAKnB,OAAOoB,OAAd,EAAZ,EAClB,EAAEa,OAAO,EAAEX,aAAatB,OAAOmB,GAAtB,EAAT,EADkB,EACsBpB,IADtB,EAAN;;AAPjB;AAOOwB,+BAPP;;AASCtB,+BAAOC,IAAP,CAAYC,sBAAWC,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AATD,0DAUQ,kBAAQjB,GAAR,EAAa,GAAb,EAAkBmC,OAAlB,EAA2B,8BAA3B,CAVR;;AAAA;AAAA;AAAA;;AAYCtB,+BAAOK,KAAP;AAZD,0DAaQ,eAAKlB,GAAL,EAAU,GAAV,8BAAyC,aAAImB,OAA7C,CAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe2B,Y;;;;;AA7EtB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA,IAAMjC,SAASkC,iBAAOC,SAAP,CAAiB,gBAAjB,CAAf;AACAD,iBAAOE,SAAP,CAAiB;AACbC,eAAW,EAAEC,MAAM,EAAEC,MAAM,MAAR,EAAgBC,UAAU,uBAA1B,EAAR,EADE;AAEbC,gBAAY,EAAEC,SAAS,EAAEL,WAAW,CAAC,MAAD,CAAb,EAAuBM,OAAO,OAA9B,EAAX;AAFC,CAAjB","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport BlogComment, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport Blog from \"../blog/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[blog_comment]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/blog_comment.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await BlogComment.find(filter)\n            .populate(\"blog_id\")\n            .populate(\"related_comment_id\")\n            .populate(\"created_by\", \"id surname given_name email phone\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const newRecord = new BlogComment(data);\n        const result = await newRecord.save();\n        if (!result) {\n            logger.error(STATUS_MSG.ERROR.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        const result2 = await Blog.update({ _id: result.blob_id },\n            { $push: { comment_ids: result._id } }).exec();\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result2, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await BlogComment.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await BlogComment.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result2 = await Blog.update({ _id: result.blob_id },\n            { $pull: { comment_ids: result._id } }).exec();\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 200, result2, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
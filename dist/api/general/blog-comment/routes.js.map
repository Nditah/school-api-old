{"version":3,"sources":["../../../../src/api/general/blog-comment/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,gBAAX,EAA6B,CAACC,wBAAD,EAAYC,2BAAZ,CAA7B,EAAwDC,uBAAxD;;AAEA;;;;;;;;;;;;;AAaAN,OAAOO,IAAP,CAAY,gBAAZ,EAA8B,CAACH,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDG,wBAAzD;;AAEA;;;;;;;;;;;;;;;AAeAR,OAAOS,GAAP,CAAW,0BAAX,EAAuC,CAACL,wBAAD,EAAYC,2BAAZ,CAAvC,EAAkEK,wBAAlE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,0BAAd,EAA0C,CAACP,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEO,wBAArE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/blog-comments?id={recordId} Retrieve one or all records\n * @apiName RetrieveBlogComment\n * @apiGroup BlogComment\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/blog-comments?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/blog-comments\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/blog-comments Create blog-comments\n * @apiName CreateBlogComment\n * @apiGroup BlogComment\n * @apiParam {String} blog_id BlogComment blog ObjectId\n * @apiParam {String} related_comment_id BlogComment replied to comment ObjectId\n * @apiParam {String} comment BlogComment comment\n * @apiParam {String} is_published BlogComment published status\n * @apiSuccess {Object} BlogComment BlogComment's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 BlogComment not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/blog-comments\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/blog-comments/{recordId} Update blog-comments\n * @apiName UpdateBlogComment\n * @apiGroup BlogComment\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} blog_id BlogComment blog ObjectId\n * @apiParam {String} related_comment_id BlogComment replied to comment ObjectId\n * @apiParam {String} comment BlogComment comment\n * @apiParam {String} is_published BlogComment published status\n * @apiSuccess {Object} BlogComment BlogComment's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 BlogComment not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/blog-comments/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/blog-comments/{recordId} Delete blog-comments\n * @apiName DeleteBlogComment\n * @apiGroup BlogComment\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 BlogComment not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/blog-comments/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
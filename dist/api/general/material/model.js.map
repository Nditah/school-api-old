{"version":3,"sources":["../../../../src/api/general/material/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","SUBSIDIARY","table","Staff","Category","Schema","ObjectId","Types","schemaCreate","name","string","required","type","optional","code","description","category_id","subsidiary","valid","Object","values","measure","volume","number","mass","unit","cost","variants","surface_area","dimension","attributes","object","photo","reorder_level","reorder_quantity","created_by","schemaUpdate","updated_by","schema","String","ref","enum","value","Number","preload","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Material","model","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {String} name  Material name (required)\n * @property {String} type  Material type\n * @property {String} code  Material code\n * @property {ObjectId} category_id Material category (required)\n * @property {String} subsidiary Material subsidiary (required)\n * @property {String} measure  Material measure (required)\n * @property {Number} volume Material volume (required)\n * @property {Number} mass  Material mass (required)\n * @property {Spring} unit  Material  unit (required)\n * @property {Number} cost  Material  Unit cost price (required)\n * @property {String} photo  Material photo\n * @property {String} variants  Material variants\n * @property {String} surface_area  Material surface_area\n * @property {String} dimension  Material dimension\n * @property {Object} attributes  Material attributes\n * @property {Number} quantity_stock Material  quantity_stock (required)\n * @property {Number} quantity_order  Material quantity_order (required)\n * @property {Number} reorder_level  Material  reorder_level (required)\n * @property {Number} reorder_quantity  Material reorder_quantity (required)\n * @property {String} photo  Material photo\n * @description Material model holds record of all Petroleum Raw  Materials\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\n// eslint-disable-next-line import/no-cycle\nimport Staff from \"../staff/model\";\n// eslint-disable-next-line import/no-cycle\nimport Category from \"../category/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().required(),\n    type: Joi.string().optional(),\n    code: Joi.string().optional(),\n    description: Joi.string().required(),\n    category_id: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\n    measure: Joi.string().optional(),\n    volume: Joi.number().optional(),\n    mass: Joi.number().optional(),\n    unit: Joi.string().optional(),\n    cost: Joi.number().optional(),\n    variants: Joi.string().optional(),\n    surface_area: Joi.number().optional(),\n    dimension: Joi.string().optional(),\n    attributes: Joi.object().optional(),\n    photo: Joi.string().optional(),\n    reorder_level: Joi.number().optional(),\n    reorder_quantity: Joi.number().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().optional(),\n    type: Joi.string().optional(),\n    code: Joi.string().optional(),\n    description: Joi.string().optional(),\n    category_id: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    measure: Joi.string().optional(),\n    volume: Joi.number().optional(),\n    mass: Joi.number().optional(),\n    unit: Joi.string().optional(),\n    cost: Joi.number().optional(),\n    variants: Joi.string().optional(),\n    surface_area: Joi.number().optional(),\n    dimension: Joi.string().optional(),\n    attributes: Joi.object().optional(),\n    photo: Joi.string().optional(),\n    reorder_level: Joi.number().optional(),\n    reorder_quantity: Joi.number().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: true },\n    type: { type: String },\n    description: { type: String, required: true },\n    category_id: {\n        type: ObjectId,\n        ref: \"Category\",\n        required: [true, \"Why no input?\"],\n    },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    unit: { type: String },\n    variants: { type: String },\n    surface_area: { type: String },\n    dimension: { type: String },\n    attributes: [{\n        name: { type: String },\n        value: { type: String },\n    }],\n    measure: { type: String },\n    volume: { type: Number },\n    mass: { type: Number },\n    cost: { type: Number },\n    photo: { type: String },\n    reorder_level: { type: Number },\n    reorder_quantity: { type: Number },\n    created_by: { type: ObjectId, ref: \"Staff\" },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"material\");\n\nconst Material = mongoose.model(\"Material\", newSchema);\n\nif (preload) { Material.insertMany(table); }\n\nexport default Material;\n"]}
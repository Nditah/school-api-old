{"version":3,"sources":["../../../../src/api/general/material/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","required","type","optional","code","description","category_id","subsidiary","valid","Object","values","SUBSIDIARY","measure","volume","number","mass","unit","cost","variants","surface_area","dimension","attributes","object","photo","reorder_level","reorder_quantity","created_by","schemaUpdate","updated_by","schema","String","ref","enum","value","Number","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Material","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\r\n * @author 4Dcoder\r\n * @property {String} name  Material name (required)\r\n * @property {String} type  Material type\r\n * @property {String} code  Material code\r\n * @property {ObjectId} category_id Material category (required)\r\n * @property {String} subsidiary Material subsidiary (required)\r\n * @property {String} measure  Material measure (required)\r\n * @property {Number} volume Material volume (required)\r\n * @property {Number} mass  Material mass (required)\r\n * @property {Spring} unit  Material  unit (required)\r\n * @property {Number} cost  Material  Unit cost price (required)\r\n * @property {String} photo  Material photo\r\n * @property {String} variants  Material variants\r\n * @property {String} surface_area  Material surface_area\r\n * @property {String} dimension  Material dimension\r\n * @property {Object} attributes  Material attributes\r\n * @property {Number} quantity_stock Material  quantity_stock (required)\r\n * @property {Number} quantity_order  Material quantity_order (required)\r\n * @property {Number} reorder_level  Material  reorder_level (required)\r\n * @property {Number} reorder_quantity  Material reorder_quantity (required)\r\n * @property {String} photo  Material photo\r\n * @description Material model holds record of all Petroleum Raw  Materials\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\r\nimport table from \"./table\";\r\n// eslint-disable-next-line import/no-cycle\r\nimport Staff from \"../staff/model\";\r\n// eslint-disable-next-line import/no-cycle\r\nimport Category from \"../category/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaCreate = {\r\n    name: Joi.string().required(),\r\n    type: Joi.string().optional(),\r\n    code: Joi.string().optional(),\r\n    description: Joi.string().required(),\r\n    category_id: Joi.string().optional(),\r\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\r\n    measure: Joi.string().optional(),\r\n    volume: Joi.number().optional(),\r\n    mass: Joi.number().optional(),\r\n    unit: Joi.string().optional(),\r\n    cost: Joi.number().optional(),\r\n    variants: Joi.string().optional(),\r\n    surface_area: Joi.number().optional(),\r\n    dimension: Joi.string().optional(),\r\n    attributes: Joi.object().optional(),\r\n    photo: Joi.string().optional(),\r\n    reorder_level: Joi.number().optional(),\r\n    reorder_quantity: Joi.number().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    name: Joi.string().optional(),\r\n    type: Joi.string().optional(),\r\n    code: Joi.string().optional(),\r\n    description: Joi.string().optional(),\r\n    category_id: Joi.string().optional(),\r\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\r\n    measure: Joi.string().optional(),\r\n    volume: Joi.number().optional(),\r\n    mass: Joi.number().optional(),\r\n    unit: Joi.string().optional(),\r\n    cost: Joi.number().optional(),\r\n    variants: Joi.string().optional(),\r\n    surface_area: Joi.number().optional(),\r\n    dimension: Joi.string().optional(),\r\n    attributes: Joi.object().optional(),\r\n    photo: Joi.string().optional(),\r\n    reorder_level: Joi.number().optional(),\r\n    reorder_quantity: Joi.number().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    name: { type: String, required: true },\r\n    type: { type: String },\r\n    description: { type: String, required: true },\r\n    category_id: {\r\n        type: ObjectId,\r\n        ref: \"Category\",\r\n        required: [true, \"Why no input?\"],\r\n    },\r\n    subsidiary: {\r\n        type: String,\r\n        enum: Object.values(SUBSIDIARY),\r\n        required: [false, \"Why no input?\"],\r\n    },\r\n    unit: { type: String },\r\n    variants: { type: String },\r\n    surface_area: { type: String },\r\n    dimension: { type: String },\r\n    attributes: [{\r\n        name: { type: String },\r\n        value: { type: String },\r\n    }],\r\n    measure: { type: String },\r\n    volume: { type: Number },\r\n    mass: { type: Number },\r\n    cost: { type: Number },\r\n    photo: { type: String },\r\n    reorder_level: { type: Number },\r\n    reorder_quantity: { type: Number },\r\n    created_by: { type: ObjectId, ref: \"Staff\" },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.set(\"collection\", \"material\");\r\n\r\nconst Material = mongoose.model(\"Material\", newSchema);\r\n\r\nif (preload) { Material.insertMany(table); }\r\n\r\nexport default Material;\r\n"]}
{"version":3,"sources":["../../../../src/api/general/material/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","required","type","optional","code","description","category_id","subsidiary","valid","Object","values","SUBSIDIARY","measure","volume","number","mass","unit","cost","variants","surface_area","dimension","attributes","object","photo","reorder_level","reorder_quantity","created_by","schemaUpdate","updated_by","schema","String","ref","enum","value","Number","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Material","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {String} name  Material name (required)\n * @property {String} type  Material type\n * @property {String} code  Material code\n * @property {ObjectId} category_id Material category (required)\n * @property {String} subsidiary Material subsidiary (required)\n * @property {String} measure  Material measure (required)\n * @property {Number} volume Material volume (required)\n * @property {Number} mass  Material mass (required)\n * @property {Spring} unit  Material  unit (required)\n * @property {Number} cost  Material  Unit cost price (required)\n * @property {String} photo  Material photo\n * @property {String} variants  Material variants\n * @property {String} surface_area  Material surface_area\n * @property {String} dimension  Material dimension\n * @property {Object} attributes  Material attributes\n * @property {Number} quantity_stock Material  quantity_stock (required)\n * @property {Number} quantity_order  Material quantity_order (required)\n * @property {Number} reorder_level  Material  reorder_level (required)\n * @property {Number} reorder_quantity  Material reorder_quantity (required)\n * @property {String} photo  Material photo\n * @description Material model holds record of all Petroleum Raw  Materials\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\n// eslint-disable-next-line import/no-cycle\nimport Staff from \"../staff/model\";\n// eslint-disable-next-line import/no-cycle\nimport Category from \"../category/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().required(),\n    type: Joi.string().optional(),\n    code: Joi.string().optional(),\n    description: Joi.string().required(),\n    category_id: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),\n    measure: Joi.string().optional(),\n    volume: Joi.number().optional(),\n    mass: Joi.number().optional(),\n    unit: Joi.string().optional(),\n    cost: Joi.number().optional(),\n    variants: Joi.string().optional(),\n    surface_area: Joi.number().optional(),\n    dimension: Joi.string().optional(),\n    attributes: Joi.object().optional(),\n    photo: Joi.string().optional(),\n    reorder_level: Joi.number().optional(),\n    reorder_quantity: Joi.number().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().optional(),\n    type: Joi.string().optional(),\n    code: Joi.string().optional(),\n    description: Joi.string().optional(),\n    category_id: Joi.string().optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    measure: Joi.string().optional(),\n    volume: Joi.number().optional(),\n    mass: Joi.number().optional(),\n    unit: Joi.string().optional(),\n    cost: Joi.number().optional(),\n    variants: Joi.string().optional(),\n    surface_area: Joi.number().optional(),\n    dimension: Joi.string().optional(),\n    attributes: Joi.object().optional(),\n    photo: Joi.string().optional(),\n    reorder_level: Joi.number().optional(),\n    reorder_quantity: Joi.number().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: true },\n    type: { type: String },\n    description: { type: String, required: true },\n    category_id: {\n        type: ObjectId,\n        ref: \"Category\",\n        required: [true, \"Why no input?\"],\n    },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },\n    unit: { type: String },\n    variants: { type: String },\n    surface_area: { type: String },\n    dimension: { type: String },\n    attributes: [{\n        name: { type: String },\n        value: { type: String },\n    }],\n    measure: { type: String },\n    volume: { type: Number },\n    mass: { type: Number },\n    cost: { type: Number },\n    photo: { type: String },\n    reorder_level: { type: Number },\n    reorder_quantity: { type: Number },\n    created_by: { type: ObjectId, ref: \"Staff\" },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"material\");\n\nconst Material = mongoose.model(\"Material\", newSchema);\n\nif (preload) { Material.insertMany(table); }\n\nexport default Material;\n"]}
{"version":3,"sources":["../../../../src/api/general/book/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","title","type","String","required","subsidiary","Joi","string","valid","Object","values","SUBSIDIARY","optional","description","classe_id","subject_id","created_by","schemaUpdate","updated_by","schema","enum","ref","options","DATABASE","OPTIONS","newSchema","set","Book","model"],"mappings":";;;;;;;AAUA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;AAJA;AAZA;;;;;;;;;;IAkBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,WAAO,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADiB;AAExBC,gBAAYC,cAAIC,MAAJ,GAAaC,KAAb,CAAmBC,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CC,QAA9C,EAFY;AAGxBC,iBAAaP,cAAIC,MAAJ,GAAaK,QAAb,EAHW;AAIxBE,eAAWR,cAAIC,MAAJ,GAAaK,QAAb,EAJa;AAKxBG,gBAAYT,cAAIC,MAAJ,GAAaK,QAAb,EALY;AAMxBI,gBAAYV,cAAIC,MAAJ,GAAaH,QAAb;AANY,CAArB;;AASA,IAAMa,sCAAe;AACxBhB,WAAO,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADiB;AAExBC,gBAAYC,cAAIC,MAAJ,GAAaC,KAAb,CAAmBC,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CC,QAA9C,EAFY;AAGxBC,iBAAaP,cAAIC,MAAJ,GAAaK,QAAb,EAHW;AAIxBE,eAAWR,cAAIC,MAAJ,GAAaK,QAAb,EAJa;AAKxBG,gBAAYT,cAAIC,MAAJ,GAAaK,QAAb,EALY;AAMxBM,gBAAYZ,cAAIC,MAAJ,GAAaH,QAAb;AANY,CAArB;;AASA,IAAMe,0BAAS;AAClBlB,WAAO,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADW;AAElBC,gBAAY;AACRH,cAAMC,MADE;AAERiB,cAAMX,OAAOC,MAAP,CAAcC,qBAAd,CAFE;AAGRP,kBAAU;AAHF,KAFM;AAOlBS,iBAAa,EAAEX,MAAMC,MAAR,EAPK;AAQlBW,eAAW,EAAEZ,MAAMJ,QAAR,EARO;AASlBiB,gBAAY,EAAEb,MAAMJ,QAAR,EATM;AAUlBkB,gBAAY,EAAEd,MAAMJ,QAAR,EAAkBuB,KAAK,OAAvB,EAAgCjB,UAAU,IAA1C,EAVM;AAWlBc,gBAAY,EAAEhB,MAAMJ,QAAR,EAAkBuB,KAAK,OAAvB;AAXM,CAAf;;AAcP,IAAMC,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWuB,MAAX,EAAmBG,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,MAA5B;;AAEA,IAAMC,OAAO9B,mBAAS+B,KAAT,CAAe,MAAf,EAAuBH,SAAvB,CAAb;;kBAEeE,I","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Stock primaryKey\n * @property {String} title Book title of books\n * @property {String} description Book Description of the book\n * @property {ObjectId} subsidiary Book subsidiary (required)\n * @property {ObjectId} classe_id Book store ObjectId (required)\n * @property {ObjectId} subject_id Book subject_id ObjectId\n * @description Stock model holds record of all Inventories\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport Subject from \"../subject/model\";\nimport Classe from \"../classe/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    title: { type: String, required: true },\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    description: Joi.string().optional(),\n    classe_id: Joi.string().optional(),\n    subject_id: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    title: { type: String, required: true },\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    description: Joi.string().optional(),\n    classe_id: Joi.string().optional(),\n    subject_id: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    title: { type: String, required: true },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: true,\n    },\n    description: { type: String },\n    classe_id: { type: ObjectId},\n    subject_id: { type: ObjectId },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"book\");\n\nconst Book = mongoose.model(\"Book\", newSchema);\n\nexport default Book;\n"]}
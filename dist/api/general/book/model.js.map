{"version":3,"sources":["../../../../src/api/general/book/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","title","Joi","string","required","author","subsidiary","valid","Object","values","SUBSIDIARY","optional","level","LEVEL","description","subject","created_by","schemaUpdate","updated_by","schema","type","String","enum","Number","ref","deleted","Boolean","default","deleted_at","Date","options","DATABASE","OPTIONS","newSchema","set","Book","model"],"mappings":";;;;;;;AAWA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AALR;AAbA;;;;;;;;;;;;IAmBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,WAAOC,cAAIC,MAAJ,GAAaC,QAAb,EADiB;AAExBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFgB;AAGxBE,gBAAYJ,cAAIC,MAAJ,GAAaI,KAAb,CAAmBC,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CC,QAA9C,EAHY;AAIxBC,WAAOV,cAAIC,MAAJ,GAAaI,KAAb,CAAmBC,OAAOC,MAAP,CAAcI,gBAAd,CAAnB,EAAyCF,QAAzC,EAJiB;AAKxBG,iBAAaZ,cAAIC,MAAJ,GAAaQ,QAAb,EALW;AAMxBI,aAASb,cAAIC,MAAJ,GAAaQ,QAAb,EANe;AAOxBK,gBAAYd,cAAIC,MAAJ,GAAaC,QAAb;AAPY,CAArB;;AAUA,IAAMa,sCAAe;AACxBhB,WAAOC,cAAIC,MAAJ,GAAaC,QAAb,EADiB;AAExBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFgB;AAGxBE,gBAAYJ,cAAIC,MAAJ,GAAaI,KAAb,CAAmBC,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CC,QAA9C,EAHY;AAIxBC,WAAOV,cAAIC,MAAJ,GAAaI,KAAb,CAAmBC,OAAOC,MAAP,CAAcI,gBAAd,CAAnB,EAAyCF,QAAzC,EAJiB;AAKxBG,iBAAaZ,cAAIC,MAAJ,GAAaQ,QAAb,EALW;AAMxBI,aAASb,cAAIC,MAAJ,GAAaQ,QAAb,EANe;AAOxBO,gBAAYhB,cAAIC,MAAJ,GAAaC,QAAb;AAPY,CAArB;;AAUA,IAAMe,0BAAS;AAClBlB,WAAO,EAAEmB,MAAMC,MAAR,EAAgBjB,UAAU,IAA1B,EADW;AAElBC,YAAQ,EAAEe,MAAMC,MAAR,EAAgBjB,UAAU,IAA1B,EAFU;AAGlBE,gBAAY;AACRc,cAAMC,MADE;AAERC,cAAMd,OAAOC,MAAP,CAAcC,qBAAd,CAFE;AAGRN,kBAAU;AAHF,KAHM;AAQlBQ,WAAO;AACHQ,cAAMG,MADH;AAEHD,cAAMd,OAAOC,MAAP,CAAcI,gBAAd;AAFH,KARW;AAYlBC,iBAAa,EAAEM,MAAMC,MAAR,EAZK;AAalBN,aAAS,EAAEK,MAAMtB,QAAR,EAAkB0B,KAAK,SAAvB,EAbS;AAclBC,aAAS,EAAEL,MAAMM,OAAR,EAAiBC,SAAS,KAA1B,EAAiCvB,UAAU,IAA3C,EAdS;AAelBwB,gBAAY,EAAER,MAAMS,IAAR,EAfM;AAgBlBb,gBAAY,EAAEI,MAAMtB,QAAR,EAAkB0B,KAAK,OAAvB,EAAgCpB,UAAU,IAA1C,EAhBM;AAiBlBc,gBAAY,EAAEE,MAAMtB,QAAR,EAAkB0B,KAAK,OAAvB;AAjBM,CAAf;;AAoBP,IAAMM,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAIrC,MAAJ,CAAWuB,MAAX,EAAmBW,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,MAA5B;;AAEA,IAAMC,OAAOtC,mBAASuC,KAAT,CAAe,MAAf,EAAuBH,SAAvB,CAAb;;kBAEeE,I","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Book primaryKey\n * @property {String} title Book title of books\n * @property {String} author Book author of books\n * @property {String} description Book Description of the book\n * @property {String} subsidiary Book subsidiary (required)\n * @property {String} level Book level (required)\n * @property {ObjectId} subject Book subject ObjectId\n * @description Stock model holds record of all Inventories\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY, LEVEL } from \"../../../constants\";\nimport Subject from \"../subject/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    title: Joi.string().required(),\n    author: Joi.string().required(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    level: Joi.string().valid(Object.values(LEVEL)).optional(),\n    description: Joi.string().optional(),\n    subject: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    title: Joi.string().required(),\n    author: Joi.string().required(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    level: Joi.string().valid(Object.values(LEVEL)).optional(),\n    description: Joi.string().optional(),\n    subject: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    title: { type: String, required: true },\n    author: { type: String, required: true },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: true,\n    },\n    level: {\n        type: Number,\n        enum: Object.values(LEVEL),\n    },\n    description: { type: String },\n    subject: { type: ObjectId, ref: \"Subject\" },\n    deleted: { type: Boolean, default: false, required: true },\n    deleted_at: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"book\");\n\nconst Book = mongoose.model(\"Book\", newSchema);\n\nexport default Book;\n"]}
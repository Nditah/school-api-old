{"version":3,"sources":["../../../../src/api/general/subject/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","searchString","q","$text","$search","Subject","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchSubject","data","body","Joi","validate","subjectCreate","findOne","code","duplicate","newSubject","save","createSubject","id","params","recordId","subjectUpdate","findOneAndUpdate","_id","new","updateSubject","findOneAndRemove","deleteSubject","Course","fetchCourse","courseCreate","newCourse","createCourse","courseUpdate","updateCourse","deleteCourse","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport {\n    Subject, subjectCreate, subjectUpdate,\n    Course, courseCreate, courseUpdate,\n} from \"./model\";\nimport { success, fail, notFound, hasProp, hash } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[subject]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/subject.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchSubject(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Subject.find(filter)\n            .populate(\"hod\")\n            .populate(\"courses\")\n            .populate(\"category\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createSubject(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, subjectCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const duplicate = await Subject.findOne({ code: data.code }).exec();\n    if (duplicate) {\n        return fail(res, 422, `Error! Subject already exist for code ${data.code}`);\n    }\n    const newSubject = new Subject(data);\n    try {\n        const result = await newSubject.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Subject created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateSubject(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, subjectUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Subject.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Subject updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteSubject(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Subject.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 204, result, \"Subject deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\n//*  ======== COURSE =========\n\nexport async function fetchCourse(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Course.find(filter)\n            .populate(\"classe\")\n            .populate(\"subject\")\n            .populate(\"staff\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createCourse(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, courseCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const duplicate = await Course.findOne({ code: data.code }).exec();\n    if (duplicate) {\n        return fail(res, 422, `Error! Course already exist for code ${data.code}`);\n    }\n    const newCourse = new Course(data);\n    try {\n        const result = await newCourse.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Course created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateCourse(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, courseUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Course.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Course updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteCourse(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Course.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 204, result, \"Course deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
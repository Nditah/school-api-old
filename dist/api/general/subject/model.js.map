{"version":3,"sources":["../../../../src/api/general/subject/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","name","hod","description","updated_by","required","schemaUpdate","schema","String","ref","created_by","options","DATABASE","OPTIONS","newSchema","set","Subject","model"],"mappings":";;;;;;;AAYA;;;;AACA;;;;AAEA;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AAHR;AAdA;AACA;;;;;;;;;;;IAiBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,oCAAc;AACvBC,WAAOC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBH,KAApB,GAA4BI,QAA5B,EADgB;AAEvBC,WAAOJ,cAAIC,MAAJ,GAAaE,QAAb,EAFgB;AAGvBE,SAAKL,cAAIC,MAAJ,GAAaE,QAAb,EAHkB;AAIvBG,cAAUN,cAAIC,MAAJ,GAAaE,QAAb,EAJa;AAKvBI,UAAMP,cAAIC,MAAJ,GAAaO,KAAb,CAAmB,CAAC,OAAD,EAAU,OAAV,EAAmB,KAAnB,CAAnB,EAA8CL,QAA9C;AALiB,CAApB;;AAQA,IAAMM,sCAAe;AACxBC,UAAMV,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EADkB;AAExBQ,SAAKX,cAAIC,MAAJ,GAAaE,QAAb,EAFmB;AAGxBS,iBAAaZ,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EAHW;AAIxBU,gBAAYb,cAAIC,MAAJ,GAAaa,QAAb;AAJY,CAArB;;AAOA,IAAMC,sCAAe;AACxBL,UAAMV,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EADkB;AAExBQ,SAAKX,cAAIC,MAAJ,GAAaE,QAAb,EAFmB;AAGxBS,iBAAaZ,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EAHW;AAIxBU,gBAAYb,cAAIC,MAAJ,GAAaa,QAAb;AAJY,CAArB;;AAOA,IAAME,0BAAS;AAClBN,UAAM,EAAEH,MAAMU,MAAR,EAAgBH,UAAU,CAAC,IAAD,EAAO,cAAP,CAA1B,EADY;AAElBH,SAAK,EAAEJ,MAAMX,QAAR,EAAkBsB,KAAK,OAAvB,EAFa;AAGlBN,iBAAa,EAAEL,MAAMU,MAAR,EAHK;AAIlBE,gBAAY,EAAEZ,MAAMX,QAAR,EAAkBsB,KAAK,OAAvB,EAAgCJ,UAAU,IAA1C,EAJM;AAKlBD,gBAAY,EAAEN,MAAMX,QAAR,EAAkBsB,KAAK,OAAvB,EAAgCJ,UAAU,IAA1C;AALM,CAAf;;AAQP,IAAMM,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWsB,MAAX,EAAmBI,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,SAA5B;;AAEA,IAAMC,UAAU9B,mBAAS+B,KAAT,CAAe,SAAf,EAA0BH,SAA1B,CAAhB;;kBAEeE,O","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {ObjectId} id Subject ObjectId primaryKey\n * @property {String} name Subject name (optional)\n * @property {ObjectId} hod Subject hod (optional)\n * @property {String} description Subject description (optional)\n * @property {ObjectId} created_by Subject record created by\n * @property {ObjectId} updated_by Subject record modified by\n * @description Subject holds record of all subjects in the school.\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport { DATABASE } from \"../../../constants\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    name: Joi.string().trim().optional(),\n    hod: Joi.string().optional(),\n    description: Joi.string().trim().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    hod: Joi.string().optional(),\n    description: Joi.string().trim().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: [true, \"Why no name?\"] },\n    hod: { type: ObjectId, ref: \"Staff\" },\n    description: { type: String },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\", required: true },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"subject\");\n\nconst Subject = mongoose.model(\"Subject\", newSchema);\n\nexport default Subject;\n"]}
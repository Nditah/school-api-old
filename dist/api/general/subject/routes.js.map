{"version":3,"sources":["../../../../src/api/general/subject/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchSubject","post","createSubject","put","updateSubject","delete","deleteSubject","fetchCourse","createCourse","updateCourse","deleteCourse"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDC,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;AAiBAN,OAAOO,IAAP,CAAY,WAAZ,EAAyB,CAACH,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDG,yBAApD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAR,OAAOS,GAAP,CAAW,qBAAX,EAAkC,CAACL,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DK,yBAA7D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACP,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEO,yBAAhE;;AAEA;;AAEA;;;;;;;;;;;;;;;AAeAZ,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDQ,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAb,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDS,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBAd,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DU,wBAA5D;;AAEA;;;;;;;;;;AAUAf,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DW,wBAA/D;;kBAEehB,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchSubject, createSubject, updateSubject, deleteSubject,\n    fetchCourse, createCourse, updateCourse, deleteCourse,\n} from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/subjects?id={recordId} Retrieve one or all records\n * @apiName RetrieveSubject\n * @apiGroup Subject\n* @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/subjects?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Subjects  of subjects in the school\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/subjects\", [checkAuth, isValidStaff], fetchSubject);\n\n/**\n * @api {post} /api/v1/subjects Create subjects\n * @apiName CreateSubject\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Subject name (required)\n * @apiParam {String} code Subject code (required)\n * @apiParam {ObjectId} hod Subject hod\n * @apiParam {String} description Subject description (optional)\n * @apiParam {String} subsidiary Subject subsidiary\n * @apiParam {Array} courses Subject courses\n * @apiParam {ObjectId} category Subject category\n * @apiSuccess {Object} Subject Subject's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Subject not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/subjects\", [checkAuth, isValidStaff], createSubject);\n\n/**\n * @api {put} /api/v1/subjects/{recordId} Update subjects\n * @apiName UpdateSubject\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} name Subject name (required)\n * @apiParam {String} code Subject code (required)\n * @apiParam {ObjectId} hod Subject hod\n * @apiParam {String} description Subject description (optional)\n * @apiParam {String} subsidiary Subject subsidiary\n * @apiParam {Array} courses Subject courses\n * @apiParam {ObjectId} category Subject category\n * @apiSuccess {Object} Subject Subject's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Subject not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/subjects/:recordId\", [checkAuth, isValidStaff], updateSubject);\n\n/**\n * @api {delete} /api/v1/subjects/{recordId} Delete subjects\n * @apiName DeleteSubject\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Subject not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/subjects/:recordId\", [checkAuth, isValidStaff], deleteSubject);\n\n//* ======= COURSE ==========\n\n/**\n * @api {get} /api/v1/courses?id={recordId} Retrieve one or all records\n * @apiName RetrieveCourse\n * @apiGroup Subject\n* @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/courses?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Courses  of courses in the school\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/courses\", [checkAuth, isValidStaff], fetchCourse);\n\n/**\n * @api {post} /api/v1/courses Create courses\n * @apiName CreateCourse\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} title Course title (required)\n * @apiParam {String} level Course level (required)\n * @apiParam {String} code Course code (required)\n * @apiParam {String} type Course type \"ELECTIVE|COMPULSORY\"\n * @apiParam {String} coefficient Course coefficient (required)\n * @apiParam {String} description Course description (required)\n * @apiParam {Array} classes Course classes  Array<ObjectId>\n * @apiParam {String} subject Course subject (required)\n * @apiParam {Array} teachers Course teachers Array<ObjectId>\n * @apiParam {ObjectId} category Subject category\n * @apiSuccess {Object} Course Course's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Course not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/courses\", [checkAuth, isValidStaff], createCourse);\n\n/**\n * @api {put} /api/v1/courses/{recordId} Update courses\n * @apiName UpdateCourse\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} title Course title (required)\n * @apiParam {String} level Course level (required)\n * @apiParam {String} code Course code (required)\n * @apiParam {String} type Course type \"ELECTIVE|COMPULSORY\"\n * @apiParam {String} coefficient Course coefficient (required)\n * @apiParam {String} description Course description (required)\n * @apiParam {Array} classes Course classes  Array<ObjectId>\n * @apiParam {String} subject Course subject (required)\n * @apiParam {Array} teachers Course teachers Array<ObjectId>\n * @apiParam {ObjectId} category Subject category\n * @apiSuccess {Object} Course Course's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Course not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/courses/:recordId\", [checkAuth, isValidStaff], updateCourse);\n\n/**\n * @api {delete} /api/v1/courses/{recordId} Delete courses\n * @apiName DeleteCourse\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Course not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/courses/:recordId\", [checkAuth, isValidStaff], deleteCourse);\n\nexport default router;\n"]}
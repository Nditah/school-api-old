{"version":3,"sources":["../../../../src/api/general/document-type/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAVA;;;;AAyBAF,OAAOG,GAAP,CAAW,gBAAX,EAA6B,CAACC,wBAAD,EAAYC,2BAAZ,CAA7B,EAAwDC,uBAAxD;;AAEA;;;;;;;;;;;;;;;;;;AAkBAN,OAAOO,IAAP,CAAY,gBAAZ,EAA8B,CAACH,wBAAD,EAAYC,2BAAZ,CAA9B,EAAyDG,wBAAzD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAR,OAAOS,GAAP,CAAW,0BAAX,EAAuC,CAACL,wBAAD,EAAYC,2BAAZ,CAAvC,EAAkEK,wBAAlE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,0BAAd,EAA0C,CAACP,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEO,wBAArE;;kBAEeZ,M","file":"routes.js","sourcesContent":["/**\r\n * @author 4Decoder\r\n * @description DocumentType holds record of all document-type involving company vehicles\r\n */\r\nimport express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/document-type?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveDocumentType\r\n * @apiGroup DocumentType\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/document-type?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records  of account headings belonging to one classification\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/document-type\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/document-type Create document-type\r\n * @apiName CreateDocumentType\r\n * @apiGroup DocumentType\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} name DocumentType name, title or label\r\n * @apiParam {String} issuer DocumentType issuer State|Church|School|Business Entity\r\n * @apiParam {String} type DocumentType type \"USER|VEHICLE|ASSET|TRANSACTION\" (required)\r\n * @apiParam {String} description DocumentType description (required)\r\n * @apiParam {Boolean} is_renewable DocumentType is_renewable (required)\r\n * @apiParam {Number} validity DocumentType validity (required)\r\n * @apiParam {Number} initial_charge DocumentType initial_charge (required)\r\n * @apiParam {Number} renewable_charge DocumentType renewable_charge (required)\r\n * @apiSuccess {Object} DocumentType DocumentType's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 DocumentType not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/document-type\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/document-type/{recordId} Update document-type\r\n * @apiName UpdateDocumentType\r\n * @apiGroup DocumentType\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiParam {String} name DocumentType name, title or label\r\n * @apiParam {String} issuer DocumentType issuer State|Church|School|Business Entity\r\n * @apiParam {String} type DocumentType type \"USER|VEHICLE|ASSET|TRANSACTION\" (required)\r\n * @apiParam {String} description DocumentType description (required)\r\n * @apiParam {Boolean} is_renewable DocumentType is_renewable (required)\r\n * @apiParam {Number} validity DocumentType validity (required)\r\n * @apiParam {Number} initial_charge DocumentType initial_charge (required)\r\n * @apiParam {Number} renewable_charge DocumentType renewable_charge (required)\r\n * @apiSuccess {Object} DocumentType DocumentType's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 DocumentType not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/document-type/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/document-type/{recordId} Delete document-type\r\n * @apiName DeleteDocumentType\r\n * @apiGroup DocumentType\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 DocumentType not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.delete(\"/document-type/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
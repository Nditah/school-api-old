{"version":3,"sources":["../../../../src/api/general/message/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","sender","Joi","string","valid","required","recipient","staff_id","optional","supplier_id","customer_id","partner_id","subject","body","receive_status","sent_status","created_by","schemaUpdated","updated_by","schema","type","String","enum","ref","box","default","options","DATABASE","OPTIONS","newSchema","set","Message","model"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} id Message primaryKey\n * @property {String} sender Message sender-type \"STAFF|CUSTOMER|SUPPLIER|PARTNER\"\n * @property {String} recipient Message recipient type \"STAFF|CUSTOMER|SUPPLIER|PARTNER\"\n * @property {ObjectId} staff_id Message recipient staff-user id\n * @property {ObjectId} supplier_id Message recipient supplier-user id\n * @property {ObjectId} customer_id Message recipient customer-user id\n * @property {ObjectId} partner_id Message recipient partner-user id\n * @property {String} subject Message subject\n * @property {String} body Message body\n * @property {String} receive_status Message receive_status\n * @property {String} sent_status Message sent_status\n * @description Message model holds record of all internal ERP mails between staff\n * For multiple recepient, a record is created for each to enable tracking of\n * individual status\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    sender: Joi.string().valid([\"STAFF\", \"CUSTOMER\", \"SUPPLIER\", \"PARTNER\"]).required(),\n    recipient: Joi.string().valid([\"STAFF\", \"CUSTOMER\", \"SUPPLIER\", \"PARTNER\"]).required(),\n    staff_id: Joi.string().optional(),\n    supplier_id: Joi.string().optional(),\n    customer_id: Joi.string().optional(),\n    partner_id: Joi.string().optional(),\n    subject: Joi.string().required(),\n    body: Joi.string().required(),\n    receive_status: Joi.string().valid(\"UNREAD\", \"READ\").optional(),\n    sent_status: Joi.string().valid(\"DRAFT\", \"SENT\").optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdated = {\n    receive_status: Joi.string().valid(\"UNREAD\", \"READ\").optional(),\n    sent_status: Joi.string().valid(\"DRAFT\", \"SENT\").optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    sender: { type: String, enum: [\"STAFF\", \"CUSTOMER\", \"SUPPLIER\", \"PARTNER\"], required: true },\n    recipient: { type: String, enum: [\"STAFF\", \"CUSTOMER\", \"SUPPLIER\", \"PARTNER\"], required: true },\n    supplier_id: { type: ObjectId, ref: \"Supplier\" },\n    staff_id: { type: ObjectId, ref: \"Staff\" },\n    customer_id: { type: ObjectId, ref: \"Customer\" },\n    partner_id: { type: ObjectId, ref: \"Partner\" },\n    subject: { type: String, required: true },\n    body: { type: String, required: true },\n    box: { type: String, enum: [\"INBOX\", \"OUTBOX\"], required: true },\n    receive_status: { type: String, enum: [\"UNREAD\", \"READ\"], required: true, default: \"UNREAD\" },\n    sent_status: { type: String, enum: [\"DRAFT\", \"SENT\"], required: true, default: \"DRAFT\" },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"message\");\n\nconst Message = mongoose.model(\"Message\", newSchema);\n\nexport default Message;\n"]}
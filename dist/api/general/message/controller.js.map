{"version":3,"sources":["../../../../src/api/general/message/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Message","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","feedback","box","newRecord","recipient","sender","subject","staffId","staff","partnerId","parent","driverId","supplier_id","customerId","student","Recipient","recipientId","toUpperCase","Staff","Parent","Student","findOne","_id","personR","Sender","created_by","personS","send1","send2","email","save","ERROR","newRecord2","result2","createRecord","id","params","recordId","schemaUpdated","findOneAndUpdate","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\r\nimport log4js from \"log4js\";\r\nimport aqp from \"api-query-params\";\r\nimport Message, { schemaCreate, schemaUpdated } from \"./model\";\r\nimport { success, fail, notFound, isObjecId, hasProp } from \"../../../lib\";\r\nimport { sendEmail } from \"../../../services\";\r\nimport { STATUS_MSG } from \"../../../constants\";\r\nimport Staff from \"../staff/model\";\r\nimport Student from \"../student/model\";\r\nimport Parent from \"../parent/model\";\r\n\r\n// Logging\r\nconst logger = log4js.getLogger(\"[message]\");\r\nlog4js.configure({\r\n    appenders: { file: { type: \"file\", filename: \"logs/message.log\" } },\r\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\r\n});\r\n\r\nexport async function fetchRecord(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await Message.find(filter)\r\n            .populate(\"created_by\", \"id phone email surname given_name\")\r\n            .populate(\"staff\", \"id phone email surname given_name\")\r\n            .populate(\"student\", \"id phone email surname given_name\")\r\n            .populate(\"parent\", \"id phone email surname given_name\")\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Message Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line complexity\r\nexport async function createRecord(req, res) {\r\n    const data = req.body;\r\n    const { error } = Joi.validate(data, schemaCreate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        let feedback = \"\";\r\n        data.box = \"INBOX\";\r\n        const newRecord = new Message(data);\r\n        const { recipient, sender, subject, body } = data;\r\n        // eslint-disable-next-line max-len\r\n        const { staff: staffId, parent: partnerId, supplier_id: driverId, student: customerId } = data;\r\n        let Recipient;\r\n        let recipientId;\r\n        switch (recipient.toUpperCase()) {\r\n        case \"STAFF\": Recipient = Staff; recipientId = staffId; break;\r\n        case \"PARENT\": Recipient = Parent; recipientId = partnerId; break;\r\n        case \"STUDENT\": Recipient = Student; recipientId = customerId; break;\r\n        // case \"SUPPLIER\": Recipient = Supplier; recipientId = supplierId; break;\r\n        default: return fail(res, 422, `Error invalid user type: ${recipient}`);\r\n        }\r\n        const personR = await Recipient.findOne({ _id: recipientId }).select(\"email, phone\").exec();\r\n        if (!personR) {\r\n            return notFound(res, `Bad Request: Model not found for recipient with id ${recipientId}`);\r\n        }\r\n\r\n        let Sender;\r\n        switch (sender.toUpperCase()) {\r\n        case \"STAFF\": Sender = Staff; break;\r\n        case \"PARENT\": Sender = Parent; break;\r\n        case \"STUDENT\": Sender = Student; break;\r\n        // case \"SUPPLIER\": Recipient = Supplier; recipientId = supplierId; break;\r\n        default: return fail(res, 422, `Error user type: ${sender}`);\r\n        }\r\n        const personS = await Sender.findOne({ _id: data.created_by }).select(\"email\").exec();\r\n        if (!personS) {\r\n            return notFound(res, `Bad Request: Model not found for sender with id ${data.created_by}`);\r\n        }\r\n\r\n        let send1; let send2;\r\n        if (hasProp(personS, \"email\") && hasProp(personR, \"email\")) {\r\n            send1 = await sendEmail(personR.email, personS.email, subject, body);\r\n            send2 = await sendEmail(personS.email, personS.email, subject, body);\r\n        } else {\r\n            feedback += \"Sender email or Recipient email is incorrect\";\r\n        }\r\n        // console.log(send);\r\n        const result = await newRecord.save();\r\n        if (!result) {\r\n            logger.error(STATUS_MSG.ERROR.DEFAULT, send1, send2, []);\r\n            return notFound(res, `Error: Bad Request: Model not found. ${feedback}`);\r\n        }\r\n        data.box = \"OUTBOX\";\r\n        const newRecord2 = new Message(data);\r\n        const result2 = await newRecord2.save();\r\n        return success(res, 201, result2, `Record created successfully! ${feedback}`);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error creating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateRecord(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, schemaUpdated);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await Message.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteRecord(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await Message.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["../../../../src/api/general/message/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Message","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","feedback","box","newRecord","recipient","sender","subject","staffId","staff_id","partnerId","partner_id","driverId","supplier_id","customerId","customer_id","Recipient","recipientId","toUpperCase","Staff","Partner","Supplier","Customer","findOne","_id","personR","Sender","created_by","personS","send1","send2","email","save","ERROR","newRecord2","result2","createRecord","id","params","recordId","schemaUpdated","findOneAndUpdate","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Message, { schemaCreate, schemaUpdated } from \"./model\";\nimport { success, fail, notFound, isObjecId, hasProp } from \"../../../lib\";\nimport { sendEmail } from \"../../../services\";\nimport { STATUS_MSG } from \"../../../constants\";\n\nimport Staff from \"../staff/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[message]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/message.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Message.find(filter)\n            .populate(\"created_by\", \"id phone email surname other_name\")\n            .populate(\"staff_id\", \"id phone email surname other_name\")\n            .populate(\"supplier_id\", \"id phone email surname other_name\")\n            .populate(\"customer_id\", \"id phone email surname other_name\")\n            .populate(\"partner_id\", \"id phone email surname other_name\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Message Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        let feedback = \"\";\n        data.box = \"INBOX\";\n        const newRecord = new Message(data);\n        const { recipient, sender, subject, body } = data;\n        // eslint-disable-next-line max-len\n        const { staff_id: staffId, partner_id: partnerId, supplier_id: driverId, customer_id: customerId } = data;\n        let Recipient;\n        let recipientId;\n        switch (recipient.toUpperCase()) {\n        case \"STAFF\": Recipient = Staff; recipientId = staffId; break;\n        case \"PARTNER\": Recipient = Partner; recipientId = partnerId; break;\n        case \"SUPPLIER\": Recipient = Supplier; recipientId = driverId; break;\n        case \"CUSTOMER\": Recipient = Customer; recipientId = customerId; break;\n        // case \"SUPPLIER\": Recipient = Supplier; recipientId = supplierId; break;\n        default: return fail(res, 422, `Error invalid user type: ${recipient}`);\n        }\n        const personR = await Recipient.findOne({ _id: recipientId }).select(\"email, phone\").exec();\n        if (!personR) {\n            return notFound(res, `Bad Request: Model not found for recipient with id ${recipientId}`);\n        }\n\n        let Sender;\n        switch (sender.toUpperCase()) {\n        case \"STAFF\": Sender = Staff; break;\n        case \"PARTNER\": Sender = Partner; break;\n        case \"SUPPLIER\": Sender = Supplier; break;\n        case \"CUSTOMER\": Sender = Customer; break;\n        // case \"SUPPLIER\": Recipient = Supplier; recipientId = supplierId; break;\n        default: return fail(res, 422, `Error user type: ${sender}`);\n        }\n        const personS = await Sender.findOne({ _id: data.created_by }).select(\"email\").exec();\n        if (!personS) {\n            return notFound(res, `Bad Request: Model not found for sender with id ${data.created_by}`);\n        }\n\n        let send1; let send2;\n        if (hasProp(personS, \"email\") && hasProp(personR, \"email\")) {\n            send1 = await sendEmail(personR.email, personS.email, subject, body);\n            send2 = await sendEmail(personS.email, personS.email, subject, body);\n        } else {\n            feedback += \"Sender email or Recipient email is incorrect\";\n        }\n        // console.log(send);\n        const result = await newRecord.save();\n        if (!result) {\n            logger.error(STATUS_MSG.ERROR.DEFAULT, send1, send2, []);\n            return notFound(res, `Error: Bad Request: Model not found. ${feedback}`);\n        }\n        data.box = \"OUTBOX\";\n        const newRecord2 = new Message(data);\n        const result2 = await newRecord2.save();\n        return success(res, 201, result2, `Record created successfully! ${feedback}`);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdated);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Message.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Message.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
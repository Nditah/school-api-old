{"version":3,"sources":["../../../../src/api/general/message/controller.js"],"names":["Joi","log4js","aqp","Message","schemaCreate","schemaUpdated","success","fail","notFound","isObjecId","hasProp","sendEmail","STATUS_MSG","Staff","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","fetchRecord","req","res","query","filter","skip","limit","sort","projection","result","find","populate","select","exec","info","SUCCESS","DEFAULT","err","error","message","createRecord","data","body","validate","feedback","box","newRecord","recipient","sender","subject","staff_id","staffId","partner_id","partnerId","supplier_id","driverId","customer_id","customerId","Recipient","recipientId","toUpperCase","Partner","Supplier","Customer","personR","findOne","_id","Sender","personS","created_by","send1","send2","email","save","ERROR","newRecord2","result2","updateRecord","recordId","id","params","findOneAndUpdate","new","deleteRecord","findOneAndRemove"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Message, { schemaCreate, schemaUpdated } from \"./model\";\nimport { success, fail, notFound, isObjecId, hasProp } from \"../../../lib\";\nimport { sendEmail } from \"../../../services\";\nimport { STATUS_MSG } from \"../../../constants\";\n\nimport Staff from \"../staff/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[message]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/message.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Message.find(filter)\n            .populate(\"created_by\", \"id phone email surname other_name\")\n            .populate(\"staff_id\", \"id phone email surname other_name\")\n            .populate(\"supplier_id\", \"id phone email surname other_name\")\n            .populate(\"customer_id\", \"id phone email surname other_name\")\n            .populate(\"partner_id\", \"id phone email surname other_name\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Message Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        let feedback = \"\";\n        data.box = \"INBOX\";\n        const newRecord = new Message(data);\n        const { recipient, sender, subject, body } = data;\n        // eslint-disable-next-line max-len\n        const { staff_id: staffId, partner_id: partnerId, supplier_id: driverId, customer_id: customerId } = data;\n        let Recipient;\n        let recipientId;\n        switch (recipient.toUpperCase()) {\n        case \"STAFF\": Recipient = Staff; recipientId = staffId; break;\n        case \"PARTNER\": Recipient = Partner; recipientId = partnerId; break;\n        case \"SUPPLIER\": Recipient = Supplier; recipientId = driverId; break;\n        case \"CUSTOMER\": Recipient = Customer; recipientId = customerId; break;\n        // case \"SUPPLIER\": Recipient = Supplier; recipientId = supplierId; break;\n        default: return fail(res, 422, `Error invalid user type: ${recipient}`);\n        }\n        const personR = await Recipient.findOne({ _id: recipientId }).select(\"email, phone\").exec();\n        if (!personR) {\n            return notFound(res, `Bad Request: Model not found for recipient with id ${recipientId}`);\n        }\n\n        let Sender;\n        switch (sender.toUpperCase()) {\n        case \"STAFF\": Sender = Staff; break;\n        case \"PARTNER\": Sender = Partner; break;\n        case \"SUPPLIER\": Sender = Supplier; break;\n        case \"CUSTOMER\": Sender = Customer; break;\n        // case \"SUPPLIER\": Recipient = Supplier; recipientId = supplierId; break;\n        default: return fail(res, 422, `Error user type: ${sender}`);\n        }\n        const personS = await Sender.findOne({ _id: data.created_by }).select(\"email\").exec();\n        if (!personS) {\n            return notFound(res, `Bad Request: Model not found for sender with id ${data.created_by}`);\n        }\n\n        let send1; let send2;\n        if (hasProp(personS, \"email\") && hasProp(personR, \"email\")) {\n            send1 = await sendEmail(personR.email, personS.email, subject, body);\n            send2 = await sendEmail(personS.email, personS.email, subject, body);\n        } else {\n            feedback += \"Sender email or Recipient email is incorrect\";\n        }\n        // console.log(send);\n        const result = await newRecord.save();\n        if (!result) {\n            logger.error(STATUS_MSG.ERROR.DEFAULT, send1, send2, []);\n            return notFound(res, `Error: Bad Request: Model not found. ${feedback}`);\n        }\n        data.box = \"OUTBOX\";\n        const newRecord2 = new Message(data);\n        const result2 = await newRecord2.save();\n        return success(res, 201, result2, `Record created successfully! ${feedback}`);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdated);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Message.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Message.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/message/routes.js"],"names":["router","express","Router","get","checkAuth","fetchRecord","post","isValidStaff","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,CAAxB,EAAqCC,uBAArC;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAL,OAAOM,IAAP,CAAY,WAAZ,EAAyB,CAACF,wBAAD,EAAYG,2BAAZ,CAAzB,EAAoDC,wBAApD;;AAEA;;;;;;;;;;;;;AAaAR,OAAOS,GAAP,CAAW,qBAAX,EAAkCL,wBAAlC,EAA6CM,wBAA7C;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACP,wBAAD,EAAYG,2BAAZ,CAArC,EAAgEK,wBAAhE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/messages?id={recordId} Retrieve one or all records\n * @apiName RetrieveMessage\n * @apiGroup Message\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/messages?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/messages\", [checkAuth], fetchRecord);\n\n/**\n * @api {post} /api/v1/messages Create messages\n * @apiName CreateMessage\n * @apiGroup Message\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} sender Message sender-type \"STAFF|CUSTOMER|PARTNER|PARTNER\"\n * @apiParam {String} recipient Message recipient type \"STAFF|CUSTOMER|PARTNER|PARTNER\"\n * @apiParam {ObjectId} staff_id Message recipient staff-user id\n * @apiParam {ObjectId} partner_id Message recipient driver-user id\n * @apiParam {ObjectId} customer_id Message recipient customer-user id\n * @apiParam {ObjectId} partner_id Message recipient partner-user id\n * @apiParam {String} subject Message subject\n * @apiParam {String} body Message body\n * @apiParam {String} receive_status Message receive_status\n * @apiParam {String} sent_status Message sent_status\n * @apiSuccess {Object} Message Message's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Message not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/messages\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/messages/{recordId} Update messages\n * @apiName UpdateMessage\n * @apiGroup Message\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} receive_status Message receive_status\n * @apiParam {String} sent_status Message sent_status\n * @apiSuccess {Object} Message Message's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Message not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/messages/:recordId\", checkAuth, updateRecord);\n\n/**\n * @api {delete} /api/v1/messages/{recordId} Delete messages\n * @apiName DeleteMessage\n * @apiGroup Message\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Message not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/messages/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
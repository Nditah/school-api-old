{"version":3,"sources":["../../../../src/api/general/account/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","AccountClass","find","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchAccountClass","data","body","Joi","validate","accountClassCreate","newAccountClass","save","createAccountClass","id","params","recordId","accountClassUpdate","findOneAndUpdate","_id","new","updateAccountClass","findOneAndRemove","deleteAccountClass","AccountHeading","populate","fetchAccountHeading","accountHeadingCreate","newAccountHeading","createAccountHeading","accountHeadingUpdate","updateAccountHeading","deleteAccountHeading","AccountPosting","fetchAccountPosting","accountPostingCreate","newaccountPosting","createAccountPosting","accountPostingUpdate","updateAccountPosting","deleteAccountPosting","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport {\n    AccountClass, accountClassCreate, accountClassUpdate,\n    AccountHeading, accountHeadingCreate, accountHeadingUpdate,\n    AccountPosting, accountPostingCreate, accountPostingUpdate,\n} from \"./model\";\n\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[account]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/account.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchAccountClass(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await AccountClass.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createAccountClass(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, accountClassCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newAccountClass = new AccountClass(data);\n    try {\n        const result = await newAccountClass.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"AccountClass created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateAccountClass(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, accountClassUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await AccountClass.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"AccountClass updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteAccountClass(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await AccountClass.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"AccountClass deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\n//* ============ACCOUNT HEADINGS=================\n\nexport async function fetchAccountHeading(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await AccountHeading.find(filter)\n            .populate(\"account_class_id\")\n            .populate(\"bank_account_id\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createAccountHeading(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, accountHeadingCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newAccountHeading = new AccountHeading(data);\n    try {\n        const result = await newAccountHeading.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"AccountHeading created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateAccountHeading(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, accountHeadingUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await AccountHeading.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"AccountHeading updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteAccountHeading(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await AccountHeading.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"AccountHeading deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\n//* ============ACCOUNT POSTINGS=================\n\nexport async function fetchAccountPosting(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await AccountPosting.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createAccountPosting(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, accountPostingCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newaccountPosting = new AccountPosting(data);\n    try {\n        const result = await newaccountPosting.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"accountPosting created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateAccountPosting(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, accountPostingUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await AccountPosting.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"accountPosting updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteAccountPosting(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await AccountPosting.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"accountPosting deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
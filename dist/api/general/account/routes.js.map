{"version":3,"sources":["../../../../src/api/general/account/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchAccountClass","post","createAccountClass","put","updateAccountClass","delete","deleteAccountClass","fetchAccountHeading","createAccountHeading","updateAccountHeading","deleteAccountHeading","fetchAccountPosting","createAccountPosting","updateAccountPosting","deleteAccountPosting"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAMA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,kBAAX,EAA+B,CAACC,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DC,6BAA1D;;AAEA;;;;;;;;;;;;;;;;AAgBAN,OAAOO,IAAP,CAAY,kBAAZ,EAAgC,CAACH,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DG,8BAA3D;;AAEA;;;;;;;;;;;;;;;;;AAiBAR,OAAOS,GAAP,CAAW,4BAAX,EAAyC,CAACL,wBAAD,EAAYC,2BAAZ,CAAzC,EAAoEK,8BAApE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,4BAAd,EAA4C,CAACP,wBAAD,EAAYC,2BAAZ,CAA5C,EAAuEO,8BAAvE;;AAEA;;AAEA;;;;;;;;;;;;;;;;AAgBAZ,OAAOG,GAAP,CAAW,mBAAX,EAAgC,CAACC,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DQ,+BAA3D;;AAEA;;;;;;;;;;;;;;;;;AAiBAb,OAAOO,IAAP,CAAY,mBAAZ,EAAiC,CAACH,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DS,gCAA5D;;AAEA;;;;;;;;;;;;;;;;;;AAkBAd,OAAOS,GAAP,CAAW,6BAAX,EAA0C,CAACL,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEU,gCAArE;;AAEA;;;;;;;;;;AAUAf,OAAOW,MAAP,CAAc,6BAAd,EAA6C,CAACP,wBAAD,EAAYC,2BAAZ,CAA7C,EAAwEW,gCAAxE;;AAEA;;AAEA;;;;;;;;;;;;;;;;AAgBAhB,OAAOG,GAAP,CAAW,kBAAX,EAA+B,CAACC,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DY,+BAA1D;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAjB,OAAOO,IAAP,CAAY,kBAAZ,EAAgC,CAACH,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2Da,gCAA3D;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAlB,OAAOS,GAAP,CAAW,4BAAX,EAAyC,CAACL,wBAAD,EAAYC,2BAAZ,CAAzC,EAAoEc,gCAApE;;AAEA;;;;;;;;;;AAUAnB,OAAOW,MAAP,CAAc,4BAAd,EAA4C,CAACP,wBAAD,EAAYC,2BAAZ,CAA5C,EAAuEe,gCAAvE;;kBAEepB,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchAccountClass, createAccountClass, updateAccountClass, deleteAccountClass,\n    fetchAccountHeading, createAccountHeading, updateAccountHeading, deleteAccountHeading,\n    fetchAccountPosting, createAccountPosting, updateAccountPosting, deleteAccountPosting,\n} from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/account-classes?id={recordId} Retrieve one or all records\n * @apiName RetrieveAccountClasss\n * @apiGroup AccountClass\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/account-classes?\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription AccountClasss  of account classifications\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/account-classes\", [checkAuth, isValidStaff], fetchAccountClass);\n\n/**\n * @api {post} /api/v1/account-classes Create account-classes\n * @apiName CreateAccountClass\n * @apiGroup AccountClass\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code AccountClass code (required)\n * @apiParam {String} name AccountClass name\n * @apiParam {String} description AccountClass description\n * @apiParam {String} category AccountClass category (required)\n * @apiParam {String} class_type AccountClass type (required)\n * @apiParam {String} subsidiary AccountClass subsidiary (required)\n * @apiSuccess {Object} AccountClass AccountClass's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 AccountClass not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/account-classes\", [checkAuth, isValidStaff], createAccountClass);\n\n/**\n * @api {put} /api/v1/account-classes/{recordId} Update account-classes\n * @apiName UpdateAccountClass\n * @apiGroup AccountClass\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId record ObjectId\n * @apiParam {String} code AccountClass code (required)\n * @apiParam {String} name AccountClass name\n * @apiParam {String} description AccountClass description\n * @apiParam {String} category AccountClass category (required)\n * @apiParam {String} class_type AccountClass type (required)\n * @apiParam {String} subsidiary AccountClass subsidiary (required)\n * @apiSuccess {Object} AccountClass AccountClass's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 AccountClass not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/account-classes/:recordId\", [checkAuth, isValidStaff], updateAccountClass);\n\n/**\n * @api {delete} /api/v1/account-classes/{recordId} Delete account-classes\n * @apiName DeleteAccountClass\n * @apiGroup AccountClass\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 AccountClass not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/account-classes/:recordId\", [checkAuth, isValidStaff], deleteAccountClass);\n\n//* ============ACCOUNT HEADINGS=================\n\n/**\n * @api {get} /api/v1/account-headings?id={recordId} Retrieve one or all records\n * @apiName RetrieveAccountHeading\n * @apiGroup AccountHeading\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/account-headings?\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription AccountHeadings  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/account-headings\", [checkAuth, isValidStaff], fetchAccountHeading);\n\n/**\n * @api {post} /api/v1/account-headings Create account-headings\n * @apiName CreateAccountingHeading\n * @apiGroup AccountHeading\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code Bank-Heading code\n * @apiParam {String} heading Bank-Heading heading\n * @apiParam {Number} account_class_id Bank-Heading account_class_id\n * @apiParam {String} description Bank-Heading description\n * @apiParam {Number} amount Bank-Heading amount\n * @apiParam {Number} opening_balance Bank-Heading opening_balance\n * @apiParam {Number} bank_account_id Bank-Heading bank_account_id\n * @apiSuccess {Object} AccountingHeading AccountingHeading's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 AccountingHeading not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/account-headings\", [checkAuth, isValidStaff], createAccountHeading);\n\n/**\n * @api {put} /api/v1/account-headings/{recordId} Update account-headings\n * @apiName UpdateAccountingHeading\n * @apiGroup AccountHeading\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId record ObjectId\n * @apiParam {String} code Bank-Heading code\n * @apiParam {String} heading Bank-Heading heading\n * @apiParam {Number} account_class_id Bank-Heading account_class_id\n * @apiParam {String} description Bank-Heading description\n * @apiParam {Number} amount Bank-Heading amount\n * @apiParam {Number} opening_balance Bank-Heading opening_balance\n * @apiParam {Number} bank_account_id Bank-Heading bank_account_id\n * @apiSuccess {Object} AccountingHeading AccountingHeading's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 AccountingHeading not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/account-headings/:recordId\", [checkAuth, isValidStaff], updateAccountHeading);\n\n/**\n * @api {delete} /api/v1/account-headings/{recordId} Delete account-headings\n * @apiName DeleteAccountingHeading\n * @apiGroup AccountHeading\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 AccountingHeading not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/account-headings/:recordId\", [checkAuth, isValidStaff], deleteAccountHeading);\n\n//* ============ACCOUNT POSTINGS=================\n\n/**\n * @api {get} /api/v1/account-posting?id={recordId} Retrieve one or all records\n * @apiName RetrieveAccountPosting\n * @apiGroup AccountPosting\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/account-posting?\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription AccountPostings  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/account-posting\", [checkAuth, isValidStaff], fetchAccountPosting);\n\n/**\n * @api {post} /api/v1/account-posting Create account-posting\n * @apiName CreateAccountPosting\n * @apiGroup AccountPosting\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code AccountPosting accounting code\n * @apiParam {Number} amount AccountPosting amount of money in Naira\n * @apiParam {String} description AccountPosting description\n * @apiParam {Date} transaction_date AccountPosting date of transaction\n * @apiParam {String} transaction_code AccountPosting transaction event TnxRef\n * @apiParam {Object} transaction_details AccountPosting transaction object details\n * @apiParam {String} posting_type AccountPosting posting_type \"DEBIT|CREDIT\"\n * @apiParam {String} category AccountPosting category \"INCOME|EXPENSES\"\n * @apiParam {ObjectId} account_heading_id AccountPosting AccountHeading ObjectId\n * @apiSuccess {Object} AccountPosting AccountPosting's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 AccountPosting not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/account-posting\", [checkAuth, isValidStaff], createAccountPosting);\n\n/**\n * @api {put} /api/v1/account-posting/{recordId} Update account-posting\n * @apiName UpdateAccountPosting\n * @apiGroup AccountPosting\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId record ObjectId\n * @apiParam {String} code AccountPosting accounting code\n * @apiParam {Number} amount AccountPosting amount of money in Naira\n * @apiParam {String} description AccountPosting description\n * @apiParam {Date} transaction_date AccountPosting date of transaction\n * @apiParam {String} transaction_code AccountPosting transaction event TnxRef\n * @apiParam {Object} transaction_details AccountPosting transaction object details\n * @apiParam {String} posting_type AccountPosting posting_type \"DEBIT|CREDIT\"\n * @apiParam {String} category AccountPosting category \"INCOME|EXPENSES\"\n * @apiParam {ObjectId} account_heading_id AccountPosting AccountHeading ObjectId\n * @apiSuccess {Object} AccountPosting AccountPosting's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 AccountPosting not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/account-posting/:recordId\", [checkAuth, isValidStaff], updateAccountPosting);\n\n/**\n * @api {delete} /api/v1/account-posting/{recordId} Delete account-posting\n * @apiName DeleteAccountPosting\n * @apiGroup AccountPosting\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 AccountPosting not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/account-posting/:recordId\", [checkAuth, isValidStaff], deleteAccountPosting);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/fees-payment/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","fees_type_id","Joi","string","optional","student_id","trim","payment_method","valid","Object","values","PAYMENT_METHOD","amount","number","deposition","pay_date","date","remark","status","created_by","required","schemaUpdate","updated_by","schema","type","comment","String","enum","Number","ref","Date","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","FeesPayment","model"],"mappings":";;;;;;;AAaA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAPA;AAfA;;;;;;;;;;;;;IAwBQA,M,GAAWC,kB,CAAXD,M;AAHR;;IAIQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,kBAAcC,cAAIC,MAAJ,GAAaC,QAAb,EADU;AAExBC,gBAAYH,cAAIC,MAAJ,GAAaG,IAAb,GAAoBF,QAApB,EAFY;AAGxBG,oBAAgBL,cAAIC,MAAJ,GAAaK,KAAb,CAAmBC,OAAOC,MAAP,CAAcC,yBAAd,CAAnB,EAAkDP,QAAlD,EAHQ;AAIxBQ,YAAQV,cAAIW,MAAJ,GAAaT,QAAb,EAJgB;AAKxBU,gBAAYZ,cAAIC,MAAJ,GAAaC,QAAb,EALY;AAMxBW,cAAUb,cAAIc,IAAJ,GAAWZ,QAAX,EANc;AAOxBa,YAAQf,cAAIC,MAAJ,GAAaC,QAAb,EAPgB;AAQxBc,YAAQhB,cAAIC,MAAJ,GAAaC,QAAb,EARgB;AASxBe,gBAAYjB,cAAIC,MAAJ,GAAaiB,QAAb;AATY,CAArB;;AAYA,IAAMC,sCAAe;AACxBpB,kBAAcC,cAAIC,MAAJ,GAAaC,QAAb,EADU;AAExBC,gBAAYH,cAAIC,MAAJ,GAAaG,IAAb,GAAoBF,QAApB,EAFY;AAGxBG,oBAAgBL,cAAIC,MAAJ,GAAaK,KAAb,CAAmBC,OAAOC,MAAP,CAAcC,yBAAd,CAAnB,EAAkDP,QAAlD,EAHQ;AAIxBQ,YAAQV,cAAIW,MAAJ,GAAaT,QAAb,EAJgB;AAKxBU,gBAAYZ,cAAIC,MAAJ,GAAaC,QAAb,EALY;AAMxBW,cAAUb,cAAIc,IAAJ,GAAWZ,QAAX,EANc;AAOxBa,YAAQf,cAAIC,MAAJ,GAAaC,QAAb,EAPgB;AAQxBc,YAAQhB,cAAIC,MAAJ,GAAaC,QAAb,EARgB;AASxBkB,gBAAYpB,cAAIC,MAAJ,GAAaiB,QAAb;AATY,CAArB;;AAYA,IAAMG,0BAAS;AAClBtB,kBAAc,EAAEuB,MAAM1B,QAAR,EAAkBsB,UAAU,IAA5B,EAAkCK,SAAS,WAA3C,EADI;AAElBpB,gBAAY,EAAEmB,MAAM1B,QAAR,EAAkBsB,UAAU,IAA5B,EAAkCK,SAAS,cAA3C,EAFM;AAGlBlB,oBAAgB;AACZiB,cAAME,MADM;AAEZC,cAAMlB,OAAOC,MAAP,CAAcC,yBAAd,CAFM;AAGZS,kBAAU,CAAC,KAAD,EAAQ,eAAR;AAHE,KAHE;AAQlBR,YAAQ,EAAEY,MAAMI,MAAR,EAAgBC,KAAK,QAArB,EARU;AASlBf,gBAAY,EAAEU,MAAME,MAAR,EATM;AAUlBX,cAAU,EAAES,MAAMM,IAAR,EAVQ;AAWlBb,YAAQ,EAAEO,MAAME,MAAR,EAXU;AAYlBR,YAAQ,EAAEM,MAAME,MAAR,EAZU;AAalBP,gBAAY,EAAEK,MAAM1B,QAAR,EAAkBsB,UAAU,IAA5B,EAbM;AAclBE,gBAAY,EAAEE,MAAM1B,QAAR,EAAkB+B,KAAK,OAAvB;AAdM,CAAf;;AAiBP,IAAME,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAIzC,MAAJ,CAAW2B,MAAX,EAAmBY,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,cAA5B;;AAEA,IAAMC,cAAc1C,mBAAS2C,KAAT,CAAe,aAAf,EAA8BH,SAA9B,CAApB;;kBAEeE,W","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Fees Payment primaryKey\n * @property {ObjectId} student_id Student Name\n * @property {ObjectId} fees_type_id Type of Fees to be paid\n * @property {Number} amount Amount to be Paid\n * @property {String} deposition Deposition of fees\n * @property {Enum} payment_method payment payment-method \"TRANSFER|CASH|BANK-DEPOSIT|CHEQUE\"\n * @property {Date} pay_date Fees payment date\n * @property {String} remark Fees Payment remark or any comment\n * @property {Enum} status payment status \"PAID|NOT-PAID|ON-SCHOLARSHIP\"\n * @description Fees payment summary\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, PAYMENT_METHOD } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Voucher from \"../voucher/model\";\n// eslint-disable-next-line import/no-cycle\nimport PayrollDetail from \"../payroll-detail/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    fees_type_id: Joi.string().optional(),\n    student_id: Joi.string().trim().optional(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT_METHOD)).optional(),\n    amount: Joi.number().optional(),\n    deposition: Joi.string().optional(),\n    pay_date: Joi.date().optional(),\n    remark: Joi.string().optional(),\n    status: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    fees_type_id: Joi.string().optional(),\n    student_id: Joi.string().trim().optional(),\n    payment_method: Joi.string().valid(Object.values(PAYMENT_METHOD)).optional(),\n    amount: Joi.number().optional(),\n    deposition: Joi.string().optional(),\n    pay_date: Joi.date().optional(),\n    remark: Joi.string().optional(),\n    status: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    fees_type_id: { type: ObjectId, required: true, comment: \"Fees_type\" },\n    student_id: { type: ObjectId, required: true, comment: \"Student name\" },\n    payment_method: {\n        type: String,\n        enum: Object.values(PAYMENT_METHOD),\n        required: [false, \"Why no input?\"],\n    },\n    amount: { type: Number, ref: \"Amount\" },\n    deposition: { type: String },\n    pay_date: { type: Date },\n    remark: { type: String },\n    status: { type: String },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"fees_payment\");\n\nconst FeesPayment = mongoose.model(\"FeesPayment\", newSchema);\n\nexport default FeesPayment;\n"]}
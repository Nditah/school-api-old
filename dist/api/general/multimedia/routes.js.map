{"version":3,"sources":["../../../../src/api/general/multimedia/routes.js"],"names":["express","appRoot","checkAuth","isValidStaff","addImageAws","createRecord","fetchRecord","updateRecord","deleteRecord","router","Router","get","req","res","sendFile","post","put","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,mCAAxC;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,EAAiDC,YAAjD,EAA+DC,YAA/D,QAAmF,cAAnF;;AAEA,MAAMC,SAAST,QAAQU,MAAR,EAAf;;AAEA;;;;;;;AAOAD,OAAOE,GAAP,CAAW,SAAX,EAAsB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChCA,MAAIC,QAAJ,CAAc,GAAEb,OAAQ,wBAAxB;AACH,CAFD;;AAIA;;;;;;;;;;AAUAQ,OAAOE,GAAP,CAAW,SAAX,EAAsBL,WAAtB;;AAEA;;;;;;;;;;;;;AAaAG,OAAOM,IAAP,CAAY,SAAZ,EAAuB,CAACb,SAAD,EAAYC,YAAZ,CAAvB,EAAkDE,YAAlD;;AAEA;;;;;;;;;;;AAWAI,OAAOM,IAAP,CAAY,aAAZ,EAA2B,CAACb,SAAD,EAAYC,YAAZ,CAA3B,EAAsDC,WAAtD;;AAEA;;;;;;;;;AASAK,OAAOO,GAAP,CAAW,mBAAX,EAAgC,CAACd,SAAD,EAAYC,YAAZ,CAAhC,EAA2DI,YAA3D;;AAEA;;;;;;;;;AASAE,OAAOQ,MAAP,CAAc,mBAAd,EAAmC,CAACf,SAAD,EAAYC,YAAZ,CAAnC,EAA8DK,YAA9D;;AAEA,eAAeC,MAAf","file":"routes.js","sourcesContent":["import express from \"express\";\nimport appRoot from \"app-root-path\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { addImageAws, createRecord, fetchRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/upload to get the form for uploading images\n * @apiName RetrieveUploadForm\n * @apiGroup Image\n * @apiDescription The sample form allows you to test the API by uploading\n * and image and entering the image name that would be saved on db\n */\nrouter.get(\"/upload\", (req, res) => {\n    res.sendFile(`${appRoot}/src/upload/index.html`);\n});\n\n/**\n * @api {get} /api/images?{query} Retrieve all image-assets\n * @apiName RetrieveImages\n * @apiGroup Image\n * @apiHeader {String} Authorization authorization token\n * @apiDescription image-assets name and url are stored on db. The images themselves\n * are stored on the AWS Bucket. The url points to it.\n * @apiSuccess {Object[]} rows List of image-assets.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/images\", fetchRecord);\n\n/**\n * @api {post} /api/images Create image-assets\n * @apiName CreateImage\n * @apiGroup Image\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} name required image-asset name\n * @apiParam {File} image required image-asset\n * @apiSuccess {Object} image-asset record's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiDescription Images uploaded to this endpoint are stored locally\n * on the backend server. This is only a fall back option when AWS is\n * no longer available.\n */\nrouter.post(\"/images\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {post} /api/images-aws Create image-assets\n * @apiName CreateImageAws\n * @apiGroup Image\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} name required image-asset name\n * @apiParam {File} image required image-asset\n * @apiSuccess {Object} image-asset record's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiDescription Images uploaded to this endpoint are stored on AWS.\n */\nrouter.post(\"/images-aws\", [checkAuth, isValidStaff], addImageAws);\n\n/**\n * @api {put} /api/images/{ImageId} Update image-assets\n * @apiName UpdateImage\n * @apiGroup Image\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} name required image-asset name\n * @apiParam {String} url required image-asset url on cloud\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.put(\"/images/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/images/{recordId} Delete image-assets\n * @apiName DeleteImage\n * @apiGroup Image\n * @apiHeader {String} Authorization authorization token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 image-asset not found.\n */\nrouter.delete(\"/images/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
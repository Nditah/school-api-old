{"version":3,"sources":["../../../../src/api/general/multimedia/routes.js"],"names":["router","express","Router","get","req","res","sendFile","appRoot","fetchRecord","post","checkAuth","isValidStaff","createRecord","addImageAws","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;AAOAF,OAAOG,GAAP,CAAW,SAAX,EAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChCA,MAAIC,QAAJ,CAAgBC,qBAAhB;AACH,CAFD;;AAIA;;;;;;;;;;AAUAP,OAAOG,GAAP,CAAW,SAAX,EAAsBK,uBAAtB;;AAEA;;;;;;;;;;;;;AAaAR,OAAOS,IAAP,CAAY,SAAZ,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,wBAAlD;;AAEA;;;;;;;;;;;AAWAZ,OAAOS,IAAP,CAAY,aAAZ,EAA2B,CAACC,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDE,uBAAtD;;AAEA;;;;;;;;;AASAb,OAAOc,GAAP,CAAW,mBAAX,EAAgC,CAACJ,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DI,wBAA3D;;AAEA;;;;;;;;;AASAf,OAAOgB,MAAP,CAAc,mBAAd,EAAmC,CAACN,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DM,wBAA9D;;kBAEejB,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport appRoot from \"app-root-path\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { addImageAws, createRecord, fetchRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/upload to get the form for uploading images\r\n * @apiName RetrieveUploadForm\r\n * @apiGroup Image\r\n * @apiDescription The sample form allows you to test the API by uploading\r\n * and image and entering the image name that would be saved on db\r\n */\r\nrouter.get(\"/upload\", (req, res) => {\r\n    res.sendFile(`${appRoot}/src/upload/index.html`);\r\n});\r\n\r\n/**\r\n * @api {get} /api/v1/images?{query} Retrieve all image-assets\r\n * @apiName RetrieveImages\r\n * @apiGroup Image\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiDescription image-assets name and url are stored on db. The images themselves\r\n * are stored on the AWS Bucket. The url points to it.\r\n * @apiSuccess {Object[]} rows List of image-assets.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/images\", fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/images Create image-assets\r\n * @apiName CreateImage\r\n * @apiGroup Image\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} name required image-asset name\r\n * @apiParam {File} image required image-asset\r\n * @apiSuccess {Object} image-asset record's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiDescription Images uploaded to this endpoint are stored locally\r\n * on the backend server. This is only a fall back option when AWS is\r\n * no longer available.\r\n */\r\nrouter.post(\"/images\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/images-aws Create image-assets\r\n * @apiName CreateImageAws\r\n * @apiGroup Image\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} name required image-asset name\r\n * @apiParam {File} image required image-asset\r\n * @apiSuccess {Object} image-asset record's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiDescription Images uploaded to this endpoint are stored on AWS.\r\n */\r\nrouter.post(\"/images-aws\", [checkAuth, isValidStaff], addImageAws);\r\n\r\n/**\r\n * @api {put} /api/v1/images/{ImageId} Update image-assets\r\n * @apiName UpdateImage\r\n * @apiGroup Image\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} name required image-asset name\r\n * @apiParam {String} url required image-asset url on cloud\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.put(\"/images/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/images/{recordId} Delete image-assets\r\n * @apiName DeleteImage\r\n * @apiGroup Image\r\n * @apiHeader {String} Authorization authorization token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 image-asset not found.\r\n */\r\nrouter.delete(\"/images/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
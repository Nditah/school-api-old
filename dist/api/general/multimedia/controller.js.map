{"version":3,"sources":["../../../../src/api/general/multimedia/controller.js"],"names":["req","res","uploadLocally","err","message","name","body","url","files","path","data","created_by","console","log","Joi","validate","schemaCreate","error","newRecord","Image","save","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","createRecord","uploadToAws","location","end","addImageAws","query","filter","skip","limit","sort","projection","find","select","exec","fetchRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","dotenv","config","aws","update","secretAccessKey","process","env","SECRET_ACCESS_KEY","accessKeyId","ACCESS_KEY_ID","region","s3","S3","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level","imageUrl","storedLocally","multer","diskStorage","destination","callback","appRoot","fieldname","Date","toISOString","originalname","storedOnAws","bucket","acl","metadata","fieldName","key","storage","array"],"mappings":";;;;;;;;uEAyDO,kBAA4BA,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,0DACIC,cAAcF,GAAd,EAAmBC,GAAnB;AAAA,gGAAwB,iBAAOE,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qDACvBA,GADuB;AAAA;AAAA;AAAA;;AAAA,iFACX,eAAKF,GAAL,EAAU,GAAV,8BAAyCE,IAAIC,OAA7C,CADW;;AAAA;AAEnBC,oDAFmB,GAEVL,IAAIM,IAFM,CAEnBD,IAFmB;AAGrBE,mDAHqB,GAGfP,IAAIQ,KAAJ,CAAW,CAAX,EAAeC,IAHA;AAIrBC,oDAJqB,GAId,EAAEL,UAAF,EAAQE,QAAR,EAAaI,YAAY,CAAzB,EAJc;;AAK3BC,wDAAQC,GAAR,CAAYH,IAAZ;AAL2B,gEAMTI,cAAIC,QAAJ,CAAaL,IAAb,EAAmBM,mBAAnB,CANS,EAMnBC,KANmB,iBAMnBA,KANmB;;AAAA,qDAOvBA,KAPuB;AAAA;AAAA;AAAA;;AAAA,iFAOT,eAAKhB,GAAL,EAAU,GAAV,sCAAiDgB,MAAMb,OAAvD,CAPS;;AAAA;AAQrBc,yDARqB,GAQT,IAAIC,eAAJ,CAAUT,IAAV,CARS;AAAA;AAAA;AAUR,uDAAMQ,UAAUE,IAAV,EAAN;;AAVQ;AAUjBC,sDAViB;;AAAA,oDAWlBA,MAXkB;AAAA;AAAA;AAAA;;AAYnBC,uDAAOC,IAAP,CAAYC,sBAAWC,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AAZmB,iFAaZ,mBAASzB,GAAT,EAAc,qCAAd,CAbY;;AAAA;AAAA,iFAehB,kBAAQA,GAAR,EAAa,GAAb,EAAkBoB,MAAlB,EAA0B,8BAA1B,CAfgB;;AAAA;AAAA;AAAA;;AAiBvBC,uDAAOL,KAAP;AAjBuB,iFAkBhB,eAAKhB,GAAL,EAAU,GAAV,8BAAyC,YAAOG,OAAhD,CAlBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAxB;;AAAA;AAAA;AAAA;AAAA,4BADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeuB,Y;;;;;;wEAwBf,kBAA2B3B,GAA3B,EAAgCC,GAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,0DACI2B,YAAY5B,GAAZ,EAAiBC,GAAjB;AAAA,gGAAsB,kBAAOE,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBE,oDADiB,GACRL,IAAIM,IADI,CACjBD,IADiB;AAEzB;AACA;;AAEME,mDALmB,GAKbP,IAAIQ,KAAJ,CAAW,CAAX,EAAeqB,QALF;;AAMzBjB,wDAAQC,GAAR,CAAYb,IAAIM,IAAhB,EAAsBN,IAAIQ,KAAJ,CAAW,CAAX,CAAtB;AACME,oDAPmB,GAOZ,EAAEL,UAAF,EAAQE,QAAR,EAPY;;AAAA,qDAQrBJ,GARqB;AAAA;AAAA;AAAA;;AAAA,kFAQTF,IAAI6B,GAAJ,6BAAkC3B,IAAIC,OAAtC,CARS;;AAAA;AASnBc,yDATmB,GASP,IAAIC,eAAJ,CAAUT,IAAV,CATO;AAAA;AAAA;AAWN,uDAAMQ,UAAUE,IAAV,EAAN;;AAXM;AAWfC,sDAXe;;AAAA,oDAYhBA,MAZgB;AAAA;AAAA;AAAA;;AAajBC,uDAAOC,IAAP,CAAYC,sBAAWC,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AAbiB,kFAcV,mBAASzB,GAAT,EAAc,qCAAd,CAdU;;AAAA;AAAA,kFAgBd,kBAAQA,GAAR,EAAa,GAAb,EAAkBoB,MAAlB,EAA0B,8BAA1B,CAhBc;;AAAA;AAAA;AAAA;;AAkBrBC,uDAAOL,KAAP;AAlBqB,kFAmBd,eAAKhB,GAAL,EAAU,GAAV,8BAAyC,aAAMG,OAA/C,CAnBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAtB;;AAAA;AAAA;AAAA;AAAA,4BADJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe2B,W;;;;;;wEAyBf,kBAA2B/B,GAA3B,EAAgCC,GAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACK+B,6BADL,GACehC,GADf,CACKgC,KADL;AAAA,+BAE+C,8BAAIA,KAAJ,CAF/C,EAEKC,MAFL,QAEKA,MAFL,EAEaC,IAFb,QAEaA,IAFb,EAEmBC,KAFnB,QAEmBA,KAFnB,EAE0BC,IAF1B,QAE0BA,IAF1B,EAEgCC,UAFhC,QAEgCA,UAFhC;AAAA;AAAA;AAIgB,+BAAMlB,gBAAMmB,IAAN,CAAWL,MAAX,EAChBC,IADgB,CACXA,IADW,EAEhBC,KAFgB,CAEVA,KAFU,EAGhBC,IAHgB,CAGXA,IAHW,EAIhBG,MAJgB,CAITF,UAJS,EAKhBG,IALgB,EAAN;;AAJhB;AAIOnB,8BAJP;;AAAA,4BAUMA,MAVN;AAAA;AAAA;AAAA;;AAAA,0DAWY,mBAASpB,GAAT,EAAc,qCAAd,CAXZ;;AAAA;AAaCqB,+BAAOC,IAAP,CAAYC,sBAAWC,OAAX,CAAmBC,OAA/B,EAAwC,EAAxC;AAbD,0DAcQ,kBAAQzB,GAAR,EAAa,GAAb,EAAkBoB,MAAlB,EAA0B,IAA1B,CAdR;;AAAA;AAAA;AAAA;;AAgBCC,+BAAOL,KAAP;AAhBD,0DAiBQ,eAAKhB,GAAL,EAAU,GAAV,gCAA2C,aAAIG,OAA/C,CAjBR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeqC,W;;;;;;wEAqBf,kBAA4BzC,GAA5B,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGS,4BADH,GACUV,IAAIM,IADd;AAEeoC,0BAFf,GAEsB1C,IAAI2C,MAF1B,CAEKC,QAFL;AAAA,yCAGe9B,cAAIC,QAAJ,CAAaL,IAAb,EAAmBmC,mBAAnB,CAHf,EAGK5B,KAHL,kBAGKA,KAHL;;AAAA,6BAICA,KAJD;AAAA;AAAA;AAAA;;AAAA,0DAIe,eAAKhB,GAAL,EAAU,GAAV,sCAAiDgB,MAAMb,OAAvD,CAJf;;AAAA;AAAA;AAAA;AAMgB,+BAAMe,gBAAM2B,gBAAN,CAAuB,EAAEC,KAAKL,EAAP,EAAvB,EAAoChC,IAApC,EAA0C,EAAEsC,KAAK,IAAP,EAA1C,CAAN;;AANhB;AAMO3B,8BANP;;AAAA,4BAOMA,MAPN;AAAA;AAAA;AAAA;;AAAA,0DAQY,mBAASpB,GAAT,4CAAsDyC,EAAtD,CARZ;;AAAA;AAAA,0DAUQ,kBAAQzC,GAAR,EAAa,GAAb,EAAkBoB,MAAlB,EAA0B,8BAA1B,CAVR;;AAAA;AAAA;AAAA;;AAYCC,+BAAOL,KAAP;AAZD,0DAaQ,eAAKhB,GAAL,EAAU,GAAV,8BAAyC,aAAIG,OAA7C,CAbR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe6C,Y;;;;;;wEAiBf,kBAA4BjD,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACeyC,0BADf,GACsB1C,IAAI2C,MAD1B,CACKC,QADL;AAAA;AAAA;AAGgB,+BAAMzB,gBAAM+B,gBAAN,CAAuB,EAAEH,KAAKL,EAAP,EAAvB,CAAN;;AAHhB;AAGOrB,8BAHP;;AAAA,4BAIMA,MAJN;AAAA;AAAA;AAAA;;AAAA,0DAKY,mBAASpB,GAAT,4CAAsDyC,EAAtD,CALZ;;AAAA;AAAA,0DAOQ,kBAAQzC,GAAR,EAAa,GAAb,EAAkBoB,MAAlB,EAA0B,8BAA1B,CAPR;;AAAA;AAAA;AAAA;;AASCC,+BAAOL,KAAP;AATD,0DAUQ,eAAKhB,GAAL,EAAU,GAAV,8BAAyC,aAAIG,OAA7C,CAVR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAe+C,Y;;;;;AAhJtB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEAC,iBAAOC,MAAP;;AAEAC,iBAAID,MAAJ,CAAWE,MAAX,CAAkB;AACdC,qBAAiBC,QAAQC,GAAR,CAAYC,iBADf;AAEdC,iBAAaH,QAAQC,GAAR,CAAYG,aAFX;AAGdC,YAAQ;AAHM,CAAlB;;AAMA,IAAMC,KAAK,IAAIT,iBAAIU,EAAR,EAAX;;AAEA;AACA,IAAM1C,SAAS2C,iBAAOC,SAAP,CAAiB,SAAjB,CAAf;AACAD,iBAAOE,SAAP,CAAiB;AACbC,eAAW,EAAEC,MAAM,EAAEC,MAAM,MAAR,EAAgBC,UAAU,gBAA1B,EAAR,EADE;AAEbC,gBAAY,EAAEC,SAAS,EAAEL,WAAW,CAAC,MAAD,CAAb,EAAuBM,OAAO,OAA9B,EAAX;AAFC,CAAjB;;AAKA,IAAIC,iBAAJ;;AAEA,IAAMC,gBAAgBC,iBAAOC,WAAP,CAAmB;AACrCC,eADqC,uBACzB/E,GADyB,EACpBqE,IADoB,EACdW,QADc,EACJ;AAC7BA,iBAAS,IAAT,EAAkBC,qBAAlB;AACH,KAHoC;AAIrCV,YAJqC,oBAI5BvE,GAJ4B,EAIvBqE,IAJuB,EAIjBW,QAJiB,EAIP;AAC1BL,mBAAcN,KAAKa,SAAnB,SAAgC,IAAIC,IAAJ,GAAWC,WAAX,EAAhC,SAA4Df,KAAKgB,YAAjE;AACAL,iBAAS,IAAT,EAAeL,QAAf;AACH;AAPoC,CAAnB,CAAtB;;AAUA,IAAMW,cAAc,uBAAS;AACzBvB,UADyB;AAEzBwB,YAAQ,aAFiB;AAGzBC,SAAK,aAHoB;AAIzBC,YAJyB,oBAIhBzF,GAJgB,EAIXqE,IAJW,EAILW,QAJK,EAIK;AAC1BA,iBAAS,IAAT,EAAe,EAAEU,WAAWrB,KAAKa,SAAlB,EAAf;AACH,KANwB;AAOzBS,OAPyB,eAOrB3F,GAPqB,EAOhBqE,IAPgB,EAOVW,QAPU,EAOA;AACrBL,mBAAcN,KAAKa,SAAnB,SAAgC,IAAIC,IAAJ,GAAWC,WAAX,EAAhC,SAA4Df,KAAKgB,YAAjE;AACAL,iBAAS,IAAT,EAAeL,QAAf;AACH;AAVwB,CAAT,CAApB;;AAaA,IAAMzE,gBAAgB,sBAAO,EAAE0F,SAAShB,aAAX,EAAP,EAAmCiB,KAAnC,CAAyC,OAAzC,EAAkD,CAAlD,CAAtB,C,CAA4E;AAC5E,IAAMjE,cAAc,sBAAO,EAAEgE,SAASN,WAAX,EAAP,EAAiCO,KAAjC,CAAuC,OAAvC,EAAgD,CAAhD,CAApB","file":"controller.js","sourcesContent":["import Joi from \"joi\";\r\nimport log4js from \"log4js\";\r\nimport aqp from \"api-query-params\";\r\nimport aws from \"aws-sdk\";\r\nimport multer from \"multer\";\r\nimport multerS3 from \"multer-s3\";\r\nimport appRoot from \"app-root-path\";\r\nimport dotenv from \"dotenv\";\r\nimport Image, { schemaCreate, schemaUpdate } from \"./model\";\r\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\r\nimport { STATUS_MSG } from \"../../../constants\";\r\n\r\ndotenv.config();\r\n\r\naws.config.update({\r\n    secretAccessKey: process.env.SECRET_ACCESS_KEY,\r\n    accessKeyId: process.env.ACCESS_KEY_ID,\r\n    region: \"eu-west-2\",\r\n});\r\n\r\nconst s3 = new aws.S3();\r\n\r\n// Logging\r\nconst logger = log4js.getLogger(\"[image]\");\r\nlog4js.configure({\r\n    appenders: { file: { type: \"file\", filename: \"logs/image.log\" } },\r\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\r\n});\r\n\r\nlet imageUrl;\r\n\r\nconst storedLocally = multer.diskStorage({\r\n    destination(req, file, callback) {\r\n        callback(null, `${appRoot}/src/upload/Images`);\r\n    },\r\n    filename(req, file, callback) {\r\n        imageUrl = `${file.fieldname}_${new Date().toISOString()}_${file.originalname}`;\r\n        callback(null, imageUrl);\r\n    },\r\n});\r\n\r\nconst storedOnAws = multerS3({\r\n    s3,\r\n    bucket: \"peacebucket\",\r\n    acl: \"public-read\",\r\n    metadata(req, file, callback) {\r\n        callback(null, { fieldName: file.fieldname });\r\n    },\r\n    key(req, file, callback) {\r\n        imageUrl = `${file.fieldname}_${new Date().toISOString()}_${file.originalname}`;\r\n        callback(null, imageUrl);\r\n    },\r\n});\r\n\r\nconst uploadLocally = multer({ storage: storedLocally }).array(\"image\", 3); // Field name and max count\r\nconst uploadToAws = multer({ storage: storedOnAws }).array(\"image\", 3);\r\n\r\nexport async function createRecord(req, res) {\r\n    return uploadLocally(req, res, async (err) => {\r\n        if (err) return fail(res, 422, `Error uploading image. ${err.message}`);\r\n        const { name } = req.body;\r\n        const url = req.files[ 0 ].path;\r\n        const data = { name, url, created_by: 1 };\r\n        console.log(data);\r\n        const { error } = Joi.validate(data, schemaCreate);\r\n        if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n        const newRecord = new Image(data);\r\n        try {\r\n            const result = await newRecord.save();\r\n            if (!result) {\r\n                logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n                return notFound(res, \"Error: Bad Request: Model not found\");\r\n            }\r\n            return success(res, 201, result, \"Record created successfully!\");\r\n        } catch (errata) {\r\n            logger.error(errata);\r\n            return fail(res, 500, `Error creating record. ${errata.message}`);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function addImageAws(req, res) {\r\n    return uploadToAws(req, res, async (err) => {\r\n        const { name } = req.body;\r\n        // const { error } = Joi.validate(data, schemaCreate);\r\n        // if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n\r\n        const url = req.files[ 0 ].location;\r\n        console.log(req.body, req.files[ 0 ]);\r\n        const data = { name, url };\r\n        if (err) return res.end(`Error uploading image. ${err.message}`);\r\n        const newRecord = new Image(data);\r\n        try {\r\n            const result = await newRecord.save();\r\n            if (!result) {\r\n                logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n                return notFound(res, \"Error: Bad Request: Model not found\");\r\n            }\r\n            return success(res, 201, result, \"Record created successfully!\");\r\n        } catch (error) {\r\n            logger.error(error);\r\n            return fail(res, 500, `Error creating record. ${error.message}`);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function fetchRecord(req, res) {\r\n    const { query } = req;\r\n    const { filter, skip, limit, sort, projection } = aqp(query);\r\n    try {\r\n        const result = await Image.find(filter)\r\n            .skip(skip)\r\n            .limit(limit)\r\n            .sort(sort)\r\n            .select(projection)\r\n            .exec();\r\n        if (!result) {\r\n            return notFound(res, \"Error: Bad Request: Model not found\");\r\n        }\r\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\r\n        return success(res, 201, result, null);\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function updateRecord(req, res) {\r\n    const data = req.body;\r\n    const { recordId: id } = req.params;\r\n    const { error } = Joi.validate(data, schemaUpdate);\r\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\r\n    try {\r\n        const result = await Image.findOneAndUpdate({ _id: id }, data, { new: true });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record updated successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error updating record. ${err.message}`);\r\n    }\r\n}\r\n\r\nexport async function deleteRecord(req, res) {\r\n    const { recordId: id } = req.params;\r\n    try {\r\n        const result = await Image.findOneAndRemove({ _id: id });\r\n        if (!result) {\r\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\r\n        }\r\n        return success(res, 200, result, \"Record deleted successfully!\");\r\n    } catch (err) {\r\n        logger.error(err);\r\n        return fail(res, 500, `Error deleting record. ${err.message}`);\r\n    }\r\n}\r\n"]}
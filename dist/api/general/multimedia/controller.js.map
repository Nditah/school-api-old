{"version":3,"sources":["../../../../src/api/general/multimedia/controller.js"],"names":["Joi","log4js","aqp","aws","multer","multerS3","appRoot","dotenv","Image","schemaCreate","schemaUpdate","success","fail","notFound","isObjecId","STATUS_MSG","config","update","secretAccessKey","process","env","SECRET_ACCESS_KEY","accessKeyId","ACCESS_KEY_ID","region","s3","S3","logger","getLogger","configure","appenders","file","type","filename","categories","default","level","imageUrl","storedLocally","diskStorage","destination","req","callback","fieldname","Date","toISOString","originalname","storedOnAws","bucket","acl","metadata","fieldName","key","uploadLocally","storage","array","uploadToAws","createRecord","res","err","message","name","body","url","files","path","data","created_by","console","log","error","validate","newRecord","result","save","info","SUCCESS","DEFAULT","errata","addImageAws","location","end","fetchRecord","query","filter","skip","limit","sort","projection","find","select","exec","updateRecord","recordId","id","params","findOneAndUpdate","_id","new","deleteRecord","findOneAndRemove"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport aws from \"aws-sdk\";\nimport multer from \"multer\";\nimport multerS3 from \"multer-s3\";\nimport appRoot from \"app-root-path\";\nimport dotenv from \"dotenv\";\nimport Image, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\ndotenv.config();\n\naws.config.update({\n    secretAccessKey: process.env.SECRET_ACCESS_KEY,\n    accessKeyId: process.env.ACCESS_KEY_ID,\n    region: \"eu-west-2\",\n});\n\nconst s3 = new aws.S3();\n\n// Logging\nconst logger = log4js.getLogger(\"[image]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/image.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nlet imageUrl;\n\nconst storedLocally = multer.diskStorage({\n    destination(req, file, callback) {\n        callback(null, `${appRoot}/src/upload/Images`);\n    },\n    filename(req, file, callback) {\n        imageUrl = `${file.fieldname}_${new Date().toISOString()}_${file.originalname}`;\n        callback(null, imageUrl);\n    },\n});\n\nconst storedOnAws = multerS3({\n    s3,\n    bucket: \"peacebucket\",\n    acl: \"public-read\",\n    metadata(req, file, callback) {\n        callback(null, { fieldName: file.fieldname });\n    },\n    key(req, file, callback) {\n        imageUrl = `${file.fieldname}_${new Date().toISOString()}_${file.originalname}`;\n        callback(null, imageUrl);\n    },\n});\n\nconst uploadLocally = multer({ storage: storedLocally }).array(\"image\", 3); // Field name and max count\nconst uploadToAws = multer({ storage: storedOnAws }).array(\"image\", 3);\n\nexport async function createRecord(req, res) {\n    return uploadLocally(req, res, async (err) => {\n        if (err) return fail(res, 422, `Error uploading image. ${err.message}`);\n        const { name } = req.body;\n        const url = req.files[ 0 ].path;\n        const data = { name, url, created_by: 1 };\n        console.log(data);\n        const { error } = Joi.validate(data, schemaCreate);\n        if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n        const newRecord = new Image(data);\n        try {\n            const result = await newRecord.save();\n            if (!result) {\n                logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n                return notFound(res, \"Error: Bad Request: Model not found\");\n            }\n            return success(res, 201, result, \"Record created successfully!\");\n        } catch (errata) {\n            logger.error(errata);\n            return fail(res, 500, `Error creating record. ${errata.message}`);\n        }\n    });\n}\n\nexport async function addImageAws(req, res) {\n    return uploadToAws(req, res, async (err) => {\n        const { name } = req.body;\n        // const { error } = Joi.validate(data, schemaCreate);\n        // if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n\n        const url = req.files[ 0 ].location;\n        console.log(req.body, req.files[ 0 ]);\n        const data = { name, url };\n        if (err) return res.end(`Error uploading image. ${err.message}`);\n        const newRecord = new Image(data);\n        try {\n            const result = await newRecord.save();\n            if (!result) {\n                logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n                return notFound(res, \"Error: Bad Request: Model not found\");\n            }\n            return success(res, 201, result, \"Record created successfully!\");\n        } catch (error) {\n            logger.error(error);\n            return fail(res, 500, `Error creating record. ${error.message}`);\n        }\n    });\n}\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Image.find(filter)\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Image.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Image.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
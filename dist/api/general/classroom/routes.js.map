{"version":3,"sources":["../../../../src/api/general/classroom/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,cAAX,EAA2B,CAACC,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDC,uBAAtD;;AAEA;;;;;;;;;;;;;;AAcAN,OAAOO,IAAP,CAAY,cAAZ,EAA4B,CAACH,wBAAD,EAAYC,2BAAZ,CAA5B,EAAuDG,wBAAvD;;AAEA;;;;;;;;;;;;;;AAcAR,OAAOS,GAAP,CAAW,wBAAX,EAAqC,CAACL,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEK,wBAAhE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,wBAAd,EAAwC,CAACP,wBAAD,EAAYC,2BAAZ,CAAxC,EAAmEO,wBAAnE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/class-rooms?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveClassroom\r\n * @apiGroup Classroom\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/class-rooms?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records of Class Rooms in the school.\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/class-rooms\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/class-rooms Create class-rooms\r\n * @apiName CreateClassroom\r\n * @apiGroup Classroom\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} name Classroom full name (required)\r\n * @apiParam {String} block Classroom block code (required)\r\n * @apiParam {String} level Classroom levels (required)\r\n * @apiParam {String} subsidiary Classroom subsidiary (required)\r\n * @apiParam {String} classe Classroom classe (required)\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 Classroom not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.post(\"/class-rooms\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/class-rooms/{recordId} Update class-rooms\r\n * @apiName UpdateClassroom\r\n * @apiGroup Classroom\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} name Classroom full name (required)\r\n * @apiParam {String} block Classroom block code (required)\r\n * @apiParam {String} level Classroom levels (required)\r\n * @apiParam {String} subsidiary Classroom subsidiary (required)\r\n * @apiParam {String} classe Classroom classe (required)\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 Classroom not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.put(\"/class-rooms/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/class-rooms/{recordId} Delete class-rooms\r\n * @apiName DeleteClassroom\r\n * @apiGroup Classroom\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Classroom not found.\r\n * @apiError 401 master Classroom only.\r\n */\r\nrouter.delete(\"/class-rooms/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
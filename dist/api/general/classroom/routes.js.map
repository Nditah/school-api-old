{"version":3,"sources":["../../../../src/api/general/classroom/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,cAAX,EAA2B,CAACC,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDC,WAAtD;;AAEA;;;;;;;;;;;;;;AAcAN,OAAOO,IAAP,CAAY,cAAZ,EAA4B,CAACH,wBAAD,EAAYC,2BAAZ,CAA5B,EAAuDG,YAAvD;;AAEA;;;;;;;;;;;;;;AAcAR,OAAOS,GAAP,CAAW,wBAAX,EAAqC,CAACL,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEK,YAAhE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,wBAAd,EAAwC,CAACP,wBAAD,EAAYC,2BAAZ,CAAxC,EAAmEO,YAAnE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\n// import { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/class-rooms?id={recordId} Retrieve one or all records\n * @apiName RetrieveClassRoom\n * @apiGroup ClassRoom\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/class-rooms?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of Class Rooms in the school.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/class-rooms\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/class-rooms Create class-rooms\n * @apiName CreateClassRoom\n * @apiGroup ClassRoom\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name ClassRoom full name (required)\n * @apiParam {String} block ClassRoom block code (required)\n * @apiParam {String} level ClassRoom levels (required)\n * @apiParam {String} subsidiary ClassRoom subsidiary (required)\n * @apiParam {String} classe ClassRoom classe (required)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 ClassRoom not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/class-rooms\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/class-rooms/{recordId} Update class-rooms\n * @apiName UpdateClassRoom\n * @apiGroup ClassRoom\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name ClassRoom full name (required)\n * @apiParam {String} block ClassRoom block code (required)\n * @apiParam {String} level ClassRoom levels (required)\n * @apiParam {String} subsidiary ClassRoom subsidiary (required)\n * @apiParam {String} classe ClassRoom classe (required)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 ClassRoom not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/class-rooms/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/class-rooms/{recordId} Delete class-rooms\n * @apiName DeleteClassRoom\n * @apiGroup ClassRoom\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 ClassRoom not found.\n * @apiError 401 master ClassRoom only.\n */\nrouter.delete(\"/class-rooms/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/classroom/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","optional","block","level","classe","subsidiary","created_by","required","schemaUpdate","updated_by","schema","type","String","ref","enum","Object","values","SUBSIDIARY","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","ClassRoom","model","insertMany","table"],"mappings":";;;;;;;AAWA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AAPR;AAbA;AACA;;;;;;;;;;;IAoBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,WAAOH,cAAIC,MAAJ,GAAaC,QAAb,EAFiB;AAGxBE,WAAOJ,cAAIC,MAAJ,GAAaC,QAAb,EAHiB;AAIxBG,YAAQL,cAAIC,MAAJ,GAAaC,QAAb,EAJgB;AAKxBI,gBAAYN,cAAIC,MAAJ,GAAaC,QAAb,EALY;AAMxBK,gBAAYP,cAAIC,MAAJ,GAAaO,QAAb;AANY,CAArB;;AASA,IAAMC,sCAAe;AACxBV,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,WAAOH,cAAIC,MAAJ,GAAaC,QAAb,EAFiB;AAGxBE,WAAOJ,cAAIC,MAAJ,GAAaC,QAAb,EAHiB;AAIxBG,YAAQL,cAAIC,MAAJ,GAAaC,QAAb,EAJgB;AAKxBI,gBAAYN,cAAIC,MAAJ,GAAaC,QAAb,EALY;AAMxBQ,gBAAYV,cAAIC,MAAJ,GAAaO,QAAb;AANY,CAArB;;AASA,IAAMG,0BAAS;AAClBZ,UAAM,EAAEa,MAAMC,MAAR,EADY;AAElBV,WAAO,EAAES,MAAMC,MAAR,EAFW;AAGlBT,WAAO,EAAEQ,MAAMC,MAAR,EAHW;AAIlBR,YAAQ,EAAEO,MAAMC,MAAR,EAAgBC,KAAK,QAArB,EAJU;AAKlBR,gBAAY;AACRM,cAAMC,MADE;AAERE,cAAMC,OAAOC,MAAP,CAAcC,qBAAd,CAFE;AAGRV,kBAAU,CAAC,KAAD,EAAQ,eAAR;AAHF,KALM;AAUlBD,gBAAY,EAAEK,MAAMhB,QAAR,EAAkBY,UAAU,IAA5B,EAAkCM,KAAK,OAAvC,EAVM;AAWlBJ,gBAAY,EAAEE,MAAMhB,QAAR,EAAkBkB,KAAK,OAAvB;AAXM,CAAf;;AAcP,IAAMK,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI/B,MAAJ,CAAWiB,MAAX,EAAmBY,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,YAA5B;AACAD,UAAUE,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,YAAYlC,mBAASmC,KAAT,CAAe,WAAf,EAA4BL,SAA5B,CAAlB;AACA,IAAIN,OAAJ,EAAa;AAAEU,cAAUE,UAAV,CAAqBC,eAArB;AAA8B;;kBAE9BH,S","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {Number} id class_room primaryKey\n * @property {String} name ClassRoom full name (required)\n * @property {String} block ClassRoom block code (required)\n * @property {String} level ClassRoom levels (required)\n * @property {String} subsidiary ClassRoom subsidiary (required)\n * @property {String} classe ClassRoom classe (required)\n * @description ClassRoom model holds record of all class_rooms the school deals with\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Classe from \"../classe/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().optional(),\n    block: Joi.string().optional(),\n    level: Joi.string().optional(),\n    classe: Joi.string().optional(),\n    subsidiary: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().optional(),\n    block: Joi.string().optional(),\n    level: Joi.string().optional(),\n    classe: Joi.string().optional(),\n    subsidiary: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String },\n    block: { type: String },\n    level: { type: String },\n    classe: { type: String, ref: \"Classe\"},\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [false, \"Why no input?\"],\n    },    \n    created_by: { type: ObjectId, required: true, ref: \"Staff\" },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"class_room\");\nnewSchema.plugin(mongoose_csv);\n\nconst ClassRoom = mongoose.model(\"ClassRoom\", newSchema);\nif (preload) { ClassRoom.insertMany(table); }\n\nexport default ClassRoom;\n"]}
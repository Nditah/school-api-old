{"version":3,"sources":["../../../../src/api/general/lesson/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","Curriculum","find","populate","path","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchCurriculum","data","body","Joi","validate","curriculumCreate","newCurriculum","save","createCurriculum","id","params","recordId","curriculumUpdate","findOneAndUpdate","_id","new","updateCurriculum","findOneAndRemove","deleteCurriculum","Lesson","fetchLesson","lessonCreate","newLesson","createLesson","lessonUpdate","updateLesson","deleteLesson","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport {\n    Lesson, lessonCreate, lessonUpdate,\n    Curriculum, curriculumCreate, curriculumUpdate,\n} from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[lesson]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/lesson.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchCurriculum(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Curriculum.find(filter)\n            .populate(\"book\")\n            .populate(\"course\")\n            .populate(\"classe\")\n            .populate(\"material\")\n            .populate(\"subject\")\n            .populate({ path: \"created_by\", select: \"surname given_name email phone\" })\n            .populate({ path: \"updated_by\", select: \"surname given_name email phone\" })\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createCurriculum(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, curriculumCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newCurriculum = new Curriculum(data);\n    try {\n        const result = await newCurriculum.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Curriculum created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateCurriculum(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, curriculumUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Curriculum.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Curriculum updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteCurriculum(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Curriculum.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Curriculum deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n\n//* ==============LESSON================\n\nexport async function fetchLesson(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await Lesson.find(filter)\n            .populate(\"teacher\")\n            .populate(\"course\")\n            .populate(\"classe\")\n            .populate(\"material\")\n            .populate(\"curriculum\")\n            .populate(\"timetable\")\n            .populate({ path: \"created_by\", select: \"surname given_name email phone\" })\n            .populate({ path: \"updated_by\", select: \"surname given_name email phone\" })\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createLesson(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, lessonCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const newLesson = new Lesson(data);\n    try {\n        const result = await newLesson.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Lesson created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateLesson(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, lessonUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Lesson.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Lesson updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteLesson(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Lesson.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Lesson deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
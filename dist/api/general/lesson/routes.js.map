{"version":3,"sources":["../../../../src/api/general/lesson/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchCurriculum","post","createCurriculum","put","updateCurriculum","delete","deleteCurriculum","fetchLesson","createLesson","updateLesson","deleteLesson"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAKA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;AAcAF,OAAOG,GAAP,CAAW,cAAX,EAA2B,CAACC,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDC,2BAAtD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBAN,OAAOO,IAAP,CAAY,cAAZ,EAA4B,CAACH,wBAAD,EAAYC,2BAAZ,CAA5B,EAAuDG,4BAAvD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAR,OAAOS,GAAP,CAAW,wBAAX,EAAqC,CAACL,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEK,4BAAhE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,wBAAd,EAAwC,CAACP,wBAAD,EAAYC,2BAAZ,CAAxC,EAAmEO,4BAAnE;;AAEA;;AAEA;;;;;;;;;;;;;;;AAeAZ,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDQ,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAb,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDS,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAd,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DU,wBAA5D;;AAEA;;;;;;;;;;AAUAf,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DW,wBAA/D;;kBAEehB,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport {\n    fetchLesson, createLesson, updateLesson, deleteLesson,\n    fetchCurriculum, createCurriculum, updateCurriculum, deleteCurriculum,\n} from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/curriculums?id={recordId} Retrieve one or all records\n * @apiName RetrieveCurriculum\n * @apiGroup Curriculum\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/curriculums?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {String} description Curriculum description String (required)\n * @apiParam {String} scheme Curriculum scheme String\n * @apiParam {ObjectId} staff_id Curriculum staff ObjectId\n * @apiParam {ObjectId} book_id Curriculum Book ObjectId\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/curriculums\", [checkAuth, isValidStaff], fetchCurriculum);\n\n/**\n * @api {post} /api/v1/curriculums Create curriculums\n * @apiName CreateCurriculum\n * @apiGroup Curriculum\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code Curriculum code (required)\n * @apiParam {String} title Curriculum title (required)\n * @apiParam {String} description Curriculum description (required)\n * @apiParam {Number} duration Curriculum duration (required)\n * @apiParam {String} term Curriculum term (required)\n * @apiParam {Number} level Curriculum level (required)\n * @apiParam {String} subsidiary Curriculum subsidiary (required)\n * @apiParam {ObjectId} course Curriculum course\n * @apiParam {ObjectId} classes Curriculum classes Array<ObjectId>\n * @apiParam {ObjectId} subject Curriculum subject (required)\n * @apiParam {Array} books Curriculum books Array<ObjectId>\n * @apiParam {Array} materials Curriculum materials Array<ObjectId>\n * @apiParam {ObjectId} staff Curriculum staff ObjectId\n * @apiParam {ObjectId} book Curriculum Book ObjectId\n * @apiSuccess {Object} Curriculum Staff's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Curriculum not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/curriculums\", [checkAuth, isValidStaff], createCurriculum);\n\n/**\n * @api {put} /api/v1/curriculums/{recordId} Update curriculums\n * @apiName UpdateCurriculum\n * @apiGroup Curriculum\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId ObjectId\n * @apiParam {String} code Curriculum code (required)\n * @apiParam {String} title Curriculum title (required)\n * @apiParam {String} description Curriculum description (required)\n * @apiParam {Number} duration Curriculum duration (required)\n * @apiParam {String} term Curriculum term (required)\n * @apiParam {Number} level Curriculum level (required)\n * @apiParam {String} subsidiary Curriculum subsidiary (required)\n * @apiParam {ObjectId} course Curriculum course\n * @apiParam {ObjectId} classes Curriculum classes Array<ObjectId>\n * @apiParam {ObjectId} subject Curriculum subject (required)\n * @apiParam {Array} books Curriculum books Array<ObjectId>\n * @apiParam {Array} materials Curriculum materials Array<ObjectId>\n * @apiParam {ObjectId} staff Curriculum staff ObjectId\n * @apiParam {ObjectId} book Curriculum Book ObjectId\n * @apiSuccess {Object} Curriculum Staff's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Curriculum not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/curriculums/:recordId\", [checkAuth, isValidStaff], updateCurriculum);\n\n/**\n * @api {delete} /api/v1/curriculums/{recordId} Delete curriculums\n * @apiName DeleteCurriculum\n * @apiGroup Curriculum\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Curriculum not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/curriculums/:recordId\", [checkAuth, isValidStaff], deleteCurriculum);\n\n//* ==============LESSON ==================\n\n/**\n * @api {get} /api/v1/lessons?id={recordId} Retrieve one or all records\n * @apiName RetrieveLesson\n * @apiGroup Lesson\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/lessons?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Lessons of Lesson the school.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/lessons\", [checkAuth, isValidStaff], fetchLesson);\n\n/**\n * @api {post} /api/v1/lessons Create lessons\n * @apiName CreateLesson\n * @apiGroup Lesson\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code Lesson code (required)\n * @apiParam {String} title Lesson title (required)\n * @apiParam {Number} duration Lesson duration (required)\n * @apiParam {Date} start_date Lesson start_date (required)\n * @apiParam {Date} end_date Lesson end_date (required)\n * @apiParam {String} objective Lesson objective (required)\n * @apiParam {Number} module Lesson module (required)\n * @apiParam {Number} unit Lesson unit (required)\n * @apiParam {String} description Lesson description\n * @apiParam {ObjectId} teacher Lesson teacher (required)\n * @apiParam {ObjectId} timetable Lesson timetable\n * @apiParam {ObjectId} classe Lesson classe\n * @apiParam {ObjectId} course Lesson course\n * @apiParam {ObjectId} curriculum Lesson curriculum (required)\n * @apiParam {String} remark Lesson remark\n * @apiParam {String} status Lesson status\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Lesson not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/lessons\", [checkAuth, isValidStaff], createLesson);\n\n/**\n * @api {put} /api/v1/lessons/{recordId} Update lessons\n * @apiName UpdateLesson\n * @apiGroup Lesson\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code Lesson code (required)\n * @apiParam {String} title Lesson title (required)\n * @apiParam {Number} duration Lesson duration (required)\n * @apiParam {Date} start_date Lesson start_date (required)\n * @apiParam {Date} end_date Lesson end_date (required)\n * @apiParam {String} objective Lesson objective (required)\n * @apiParam {Number} module Lesson module (required)\n * @apiParam {Number} unit Lesson unit (required)\n * @apiParam {String} description Lesson description\n * @apiParam {ObjectId} teacher Lesson teacher (required)\n * @apiParam {ObjectId} timetable Lesson timetable\n * @apiParam {ObjectId} classe Lesson classe\n * @apiParam {ObjectId} course Lesson course\n * @apiParam {ObjectId} curriculum Lesson curriculum (required)\n * @apiParam {String} remark Lesson remark\n * @apiParam {String} status Lesson status\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Lesson not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/lessons/:recordId\", [checkAuth, isValidStaff], updateLesson);\n\n/**\n * @api {delete} /api/v1/lessons/{recordId} Delete lessons\n * @apiName DeleteLesson\n * @apiGroup Lesson\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Lesson not found.\n * @apiError 401 master Lesson only.\n */\nrouter.delete(\"/lessons/:recordId\", [checkAuth, isValidStaff], deleteLesson);\n\nexport default router;\n"]}
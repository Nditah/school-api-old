{"version":3,"sources":["../../../../src/api/general/lesson-register/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,mBAAX,EAAgC,CAACC,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DC,uBAA3D;;AAEA;;;;;;;;;;;;;AAaAN,OAAOO,IAAP,CAAY,mBAAZ,EAAiC,CAACH,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DG,wBAA5D;;AAEA;;;;;;;;;;;;;AAaAR,OAAOS,GAAP,CAAW,6BAAX,EAA0C,CAACL,wBAAD,EAAYC,2BAAZ,CAA1C,EAAqEK,wBAArE;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,6BAAd,EAA6C,CAACP,wBAAD,EAAYC,2BAAZ,CAA7C,EAAwEO,wBAAxE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/lesson-registers?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveLessonRegister\r\n * @apiGroup LessonRegister\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/lesson-registers?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records of lesson-register the school.\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/lesson-registers\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/lesson-registers Create lesson-registers\r\n * @apiName CreateLessonRegister\r\n * @apiGroup LessonRegister\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {ObjectId} lesson LessonRegister  (required)\r\n * @apiParam {Date} taught_date LessonRegister date  (required)\r\n * @apiParam {String} status LessonRegister status (PENDING|COMPLETED) (required)\r\n * @apiParam {ObjectId} teacher LessonRegister teacher (optional)\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 LessonRegister not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.post(\"/lesson-registers\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/v1/lesson-registers/{recordId} Update lesson-registers\r\n * @apiName UpdateLessonRegister\r\n * @apiGroup LessonRegister\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {ObjectId} lesson LessonRegister  (required)\r\n * @apiParam {Date} taught_date LessonRegister date  (required)\r\n * @apiParam {String} status LessonRegister status (PENDING|COMPLETED) (required)\r\n * @apiParam {ObjectId} teacher LessonRegister teacher (optional)\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 LessonRegister not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.put(\"/lesson-registers/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/v1/lesson-registers/{recordId} Delete lesson-registers\r\n * @apiName DeleteLessonRegister\r\n * @apiGroup LessonRegister\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 LessonRegister not found.\r\n * @apiError 401 master LessonRegister only.\r\n */\r\nrouter.delete(\"/lesson-registers/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
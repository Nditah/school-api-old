{"version":3,"sources":["../../../../src/api/general/lesson-register/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","lesson","Joi","string","optional","taught_date","date","status","number","teacher","created_by","required","schemaUpdate","updated_by","schema","type","ref","Date","String","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","LessonRegister","model","insertMany","table"],"mappings":";;;;;;;AAUA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;IAEQA,M,GAAWC,kB,CAAXD,M;AAPR;AAZA;AACA;;;;;;;;;;IAmBQE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,YAAQC,cAAIC,MAAJ,GAAaC,QAAb,EADgB;AAExBC,iBAAaH,cAAII,IAAJ,GAAWF,QAAX,EAFW;AAGxBG,YAAQL,cAAIM,MAAJ,GAAaJ,QAAb,EAHgB;AAIxBK,aAAUP,cAAIC,MAAJ,GAAaC,QAAb,EAJc;AAKxBM,gBAAYR,cAAIC,MAAJ,GAAaQ,QAAb;AALY,CAArB;;AAQA,IAAMC,sCAAe;AACxBX,YAAQC,cAAIC,MAAJ,GAAaC,QAAb,EADgB;AAExBC,iBAAaH,cAAII,IAAJ,GAAWF,QAAX,EAFW;AAGxBG,YAAQL,cAAIM,MAAJ,GAAaJ,QAAb,EAHgB;AAIxBK,aAAUP,cAAIC,MAAJ,GAAaC,QAAb,EAJc;AAKxBS,gBAAYX,cAAIC,MAAJ,GAAaQ,QAAb;AALY,CAArB;;AAQA,IAAMG,0BAAS;AAClBb,YAAS,EAAEc,MAAMjB,QAAR,EAAkBkB,KAAK,QAAvB,EADS;AAElBX,iBAAa,EAAEU,MAAME,IAAR,EAFK;AAGlBV,YAAQ,EAAEQ,MAAMG,MAAR,EAHU;AAIlBT,aAAS,EAAEM,MAAMG,MAAR,EAAgBF,KAAM,OAAtB,EAJS;AAKlBN,gBAAY,EAAEK,MAAMjB,QAAR,EAAkBa,UAAU,IAA5B,EAAkCK,KAAK,OAAvC,EALM;AAMlBH,gBAAY,EAAEE,MAAMjB,QAAR,EAAkBkB,KAAK,OAAvB;AANM,CAAf;;AASP,IAAMG,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI7B,MAAJ,CAAWkB,MAAX,EAAmBS,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,iBAA5B;AACAD,UAAUE,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,iBAAiBhC,mBAASiC,KAAT,CAAe,gBAAf,EAAiCL,SAAjC,CAAvB;AACA,IAAIN,OAAJ,EAAa;AAAEU,mBAAeE,UAAf,CAA0BC,eAA1B;AAAmC;;kBAEnCH,c","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {Number} id LessonRegister primaryKey\n * @property {ObjectId} lesson LessonRegister  (required)\n * @property {Date} taught_date LessonRegister date  (required)\n * @property {String} status LessonRegister status (PENDING|COMPLETED) (required)\n * @property {ObjectId} teacher LessonRegister teacher (optional)\n * @description LessonRegister model holds record of all lesson-registers the company deals with\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Course from \"../course/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    lesson: Joi.string().optional(),\n    taught_date: Joi.date().optional(),\n    status: Joi.number().optional(),\n    teacher : Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    lesson: Joi.string().optional(),\n    taught_date: Joi.date().optional(),\n    status: Joi.number().optional(),\n    teacher : Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    lesson : { type: ObjectId, ref: \"Lesson\"},\n    taught_date: { type: Date },\n    status: { type: String },\n    teacher: { type: String, ref : \"staff\" },\n    created_by: { type: ObjectId, required: true, ref: \"Staff\" },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"lesson-register\");\nnewSchema.plugin(mongoose_csv);\n\nconst LessonRegister = mongoose.model(\"LessonRegister\", newSchema);\nif (preload) { LessonRegister.insertMany(table); }\n\nexport default LessonRegister;\n"]}
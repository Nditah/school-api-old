{"version":3,"sources":["../../../../src/api/general/asset-assignment/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","AssetAssignment","find","populate","path","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","assignment_status","issued_date","issued_by","created_by","UserModel","userId","user_type","Student","Staff","AssetModel","assetId","asset_type","Vehicle","Asset","newRecord","save","updateVehicle","vehicle_custodian","vehicle_assignment","updateUser","$push","asset_assigment_ids","_id","update","vehicle_id","createRecord","id","params","recordId","schemaUpdate","updated_by","findOneAndUpdate","new","updateRecord","findOneAndRemove","$pull","result2","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport AssetAssignment, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId, timestamp } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\nimport Vehicle from \"../vehicle/model\";\nimport Asset from \"../asset/model\";\n\n// Logging\nconst logger = log4js.getLogger(\"[asset-assignments]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/asset-assignments.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await AssetAssignment.find(filter)\n            .populate(\"asset_id\")\n            .populate(\"vehicle_id\")\n            .populate(\"task_id\")\n            .populate({ path: \"staff_id\", select: \"-password -otp\" })\n            .populate({ path: \"student_id\", select: \"-password -otp\" })\n            .populate({ path: \"created_by\", select: \"surname given_name email phone\" })\n            .populate({ path: \"updated_by\", select: \"surname given_name email phone\" })\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n\n    if (data.assignment_status === \"ISSUED\") {\n        data.issued_date = data.issued_date ? data.issued_date : timestamp();\n        data.issued_by = data.created_by;\n    }\n    let UserModel;\n    let userId;\n    switch (data.user_type) {\n    case \"STUDENT\": UserModel = Student; userId = \"student_id\"; break;\n    case \"STAFF\": UserModel = Staff; userId = \"staff_id\"; break;\n    default: return fail(res, 422, `Error invalid user_type ${data.user_type}`);\n    }\n    let AssetModel;\n    let assetId;\n    switch (data.asset_type) {\n    case \"VEHICLE\": AssetModel = Vehicle; assetId = \"vehicle_id\"; break;\n    case \"INVENTORY\": AssetModel = Asset; assetId = \"asset_id\"; break;\n    default: return fail(res, 422, `Error invalid asset_type ${data.asset_type}`);\n    }\n    try {\n        const newRecord = new AssetAssignment(data);\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n\n        const updateVehicle = { vehicle_custodian: data.user_type };\n        updateVehicle[ `current_${userId}` ] = result[ userId ];\n        updateVehicle.vehicle_assignment = \"ASSIGNED\";\n        const updateUser = { $push: { asset_assigment_ids: result._id } };\n        if (result.asset_type === \"VEHICLE\") {\n            await Vehicle.update({ _id: result[ assetId ] }, updateVehicle).exec();\n            updateUser.vehicle_id = result[ assetId ];\n        }\n\n        await UserModel.update({ _id: result[ userId ] }, updateUser).exec();\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\n/*\n    vehicle_custodian: {\n        type: String,\n        enum: Object.values(VEHICLE_CUSTODIAN),\n        default: VEHICLE_CUSTODIAN.UNKNOWN,\n        required: [true, \"Why no vehicle_custodian?\"],\n    },\n    current_staff_id: { type: ObjectId, ref: \"Staff\" },\n    current_student_id: { type: ObjectId, ref: \"Student\" },\n*/\n// eslint-disable-next-line complexity\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (data.assignment_status === \"ISSUED\") {\n        data.issued_date = data.issued_date ? data.issued_date : timestamp();\n        data.issued_by = data.updated_by;\n    }\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await AssetAssignment\n            .findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await AssetAssignment.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        let UserModel;\n        let userId;\n        switch (result.user_type) {\n        case \"STUDENT\": UserModel = Student; userId = \"student_id\"; break;\n        case \"STAFF\": UserModel = Staff; userId = \"staff_id\"; break;\n        default: return fail(res, 422, `Error invalid user_type ${result.user_type}`);\n        }\n        let AssetModel;\n        let assetId;\n        switch (result.asset_type) {\n        case \"VEHICLE\": AssetModel = Vehicle; assetId = \"vehicle_id\"; break;\n        case \"INVENTORY\": AssetModel = Asset; assetId = \"asset_id\"; break;\n        default: return fail(res, 422, `Error invalid asset_type ${result.asset_type}`);\n        }\n        const updateUser = { $pull: { asset_assigment_ids: result._id } };\n        if (result.asset_type === \"VEHICLE\") {\n            updateUser.vehicle_id = null;\n        }\n        const result2 = await UserModel.update({ _id: result[ userId ] }, updateUser).exec();\n\n        const updateVehicle = {};\n        updateVehicle[ `current_${userId}` ] = null;\n        updateVehicle.vehicle_assignment = \"UNASSIGNED\";\n        await Vehicle.update({ _id: result[ assetId ] }, updateVehicle).exec();\n\n        return success(res, 200, result2, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
{"version":3,"sources":["../../../../src/api/general/asset-assignment/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","Staff","Asset","Vehicle","Task","Schema","ObjectId","Types","schemaCreate","user_type","string","trim","valid","required","staff_id","optional","partner_id","request_date","date","task_id","asset_type","vehicle_id","asset_id","issued_date","issued_by","issuer_remark","request_status","assignment_status","is_returnable","boolean","expected_returned_date","actual_returned_date","collected_date","collected_by","collected_remark","created_by","schemaUpdate","updated_by","schema","type","String","enum","ref","Date","default","Boolean","options","OPTIONS","newSchema","set","AssetAssignment","model"],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,IAAP,MAAiB,eAAjB;;AAEA,MAAM,EAAEC,MAAF,KAAaP,QAAnB;AACA,MAAM,EAAEQ,QAAF,KAAeD,OAAOE,KAA5B;;AAEA,OAAO,MAAMC,eAAe;AACxBC,eAAWZ,IAAIa,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,OAAD,EAAU,SAAV,CAA1B,EAAgDC,QAAhD,EADa;AAExBC,cAAUjB,IAAIa,MAAJ,GAAaK,QAAb,EAFc;AAGxBC,gBAAYnB,IAAIa,MAAJ,GAAaK,QAAb,EAHY;AAIxBE,kBAAcpB,IAAIqB,IAAJ,GAAWH,QAAX,EAJU;AAKxBI,aAAStB,IAAIa,MAAJ,GAAaK,QAAb,EALe;AAMxBK,gBAAYvB,IAAIa,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,SAAD,EAAY,WAAZ,CAA1B,EAAoDC,QAApD,EANY;AAOxBQ,gBAAYxB,IAAIa,MAAJ,GAAaK,QAAb,EAPY;AAQxBO,cAAUzB,IAAIa,MAAJ,GAAaK,QAAb,EARc;AASxBQ,iBAAa1B,IAAIqB,IAAJ,GAAWH,QAAX,EATW;AAUxBS,eAAW3B,IAAIa,MAAJ,GAAaK,QAAb,EAVa;AAWxBU,mBAAe5B,IAAIa,MAAJ,GAAaK,QAAb,EAXS;AAYxBW,oBAAgB7B,IAAIa,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,SAAD,EAAY,WAAZ,EAAyB,SAAzB,CAA1B,EAA+DG,QAA/D,EAZQ;AAaxBY,uBAAmB9B,IAAIa,MAAJ,GAAaC,IAAb,GAAoBC,KAApB,CAA0B,CAAC,SAAD,EAAY,UAAZ,EAAwB,QAAxB,EAAkC,WAAlC,EAA+C,UAA/C,CAA1B,EAAsFG,QAAtF,EAbK;AAcxBa,mBAAe/B,IAAIgC,OAAJ,GAAcd,QAAd,EAdS;AAexBe,4BAAwBjC,IAAIqB,IAAJ,GAAWH,QAAX,EAfA;AAgBxBgB,0BAAsBlC,IAAIqB,IAAJ,GAAWH,QAAX,EAhBE;AAiBxBiB,oBAAgBnC,IAAIqB,IAAJ,GAAWH,QAAX,EAjBQ;AAkBxBkB,kBAAcpC,IAAIa,MAAJ,GAAaK,QAAb,EAlBU;AAmBxBmB,sBAAkBrC,IAAIa,MAAJ,GAAaK,QAAb,EAnBM;AAoBxBoB,gBAAYtC,IAAIa,MAAJ,GAAaG,QAAb;AApBY,CAArB;;AAuBP,OAAO,MAAMuB,eAAe;AACxB3B,eAAWZ,IAAIa,MAAJ,GAAaE,KAAb,CAAmB,CAAC,OAAD,EAAU,SAAV,CAAnB,EAAyCG,QAAzC,EADa;AAExBD,cAAUjB,IAAIa,MAAJ,GAAaK,QAAb,EAFc;AAGxBC,gBAAYnB,IAAIa,MAAJ,GAAaK,QAAb,EAHY;AAIxBE,kBAAcpB,IAAIqB,IAAJ,GAAWH,QAAX,EAJU;AAKxBI,aAAStB,IAAIa,MAAJ,GAAaK,QAAb,EALe;AAMxBK,gBAAYvB,IAAIa,MAAJ,GAAaE,KAAb,CAAmB,CAAC,SAAD,EAAY,WAAZ,CAAnB,EAA6CG,QAA7C,EANY;AAOxBM,gBAAYxB,IAAIa,MAAJ,GAAaK,QAAb,EAPY;AAQxBO,cAAUzB,IAAIa,MAAJ,GAAaK,QAAb,EARc;AASxBQ,iBAAa1B,IAAIqB,IAAJ,GAAWH,QAAX,EATW;AAUxBS,eAAW3B,IAAIa,MAAJ,GAAaK,QAAb,EAVa;AAWxBU,mBAAe5B,IAAIa,MAAJ,GAAaK,QAAb,EAXS;AAYxBW,oBAAgB7B,IAAIa,MAAJ,GAAaE,KAAb,CAAmB,CAAC,SAAD,EAAY,WAAZ,EAAyB,SAAzB,CAAnB,EAAwDG,QAAxD,EAZQ;AAaxBY,uBAAmB9B,IAAIa,MAAJ,GAAaE,KAAb,CAAmB,CAAC,SAAD,EAAY,UAAZ,EAAwB,QAAxB,EAAkC,WAAlC,EAA+C,UAA/C,CAAnB,EAA+EG,QAA/E,EAbK;AAcxBa,mBAAe/B,IAAIgC,OAAJ,GAAcd,QAAd,EAdS;AAexBe,4BAAwBjC,IAAIqB,IAAJ,GAAWH,QAAX,EAfA;AAgBxBgB,0BAAsBlC,IAAIqB,IAAJ,GAAWH,QAAX,EAhBE;AAiBxBiB,oBAAgBnC,IAAIqB,IAAJ,GAAWH,QAAX,EAjBQ;AAkBxBkB,kBAAcpC,IAAIa,MAAJ,GAAaK,QAAb,EAlBU;AAmBxBmB,sBAAkBrC,IAAIa,MAAJ,GAAaK,QAAb,EAnBM;AAoBxBsB,gBAAYxC,IAAIa,MAAJ,GAAaG,QAAb;AApBY,CAArB;;AAuBP,OAAO,MAAMyB,SAAS;AAClB7B,eAAW,EAAE8B,MAAMC,MAAR,EAAgBC,MAAM,CAAC,OAAD,EAAU,SAAV,CAAtB,EAA4C5B,UAAU,IAAtD,EADO;AAElBC,cAAU,EAAEyB,MAAMjC,QAAR,EAAkBoC,KAAK,OAAvB,EAFQ;AAGlB1B,gBAAY,EAAEuB,MAAMjC,QAAR,EAAkBoC,KAAK,SAAvB,EAHM;AAIlBzB,kBAAc,EAAEsB,MAAMI,IAAR,EAJI,EAIY;AAC9BxB,aAAS,EAAEoB,MAAMjC,QAAR,EAAkBoC,KAAK,MAAvB,EALS;AAMlBtB,gBAAY,EAAEmB,MAAMC,MAAR,EAAgBC,MAAM,CAAC,SAAD,EAAY,WAAZ,CAAtB,EAAgD5B,UAAU,IAA1D,EANM;AAOlBQ,gBAAY,EAAEkB,MAAMjC,QAAR,EAAkBoC,KAAK,SAAvB,EAPM;AAQlBpB,cAAU,EAAEiB,MAAMjC,QAAR,EAAkBoC,KAAK,OAAvB,EARQ;AASlBnB,iBAAa,EAAEgB,MAAMI,IAAR,EATK;AAUlBnB,eAAW,EAAEe,MAAMjC,QAAR,EAAkBoC,KAAK,OAAvB,EAVO;AAWlBjB,mBAAe,EAAEc,MAAMC,MAAR,EAXG;AAYlBd,oBAAgB;AACZa,cAAMC,MADM;AAEZC,cAAM,CAAC,SAAD,EAAY,WAAZ,EAAyB,SAAzB,CAFM;AAGZ5B,kBAAU,CAAC,IAAD,EAAO,eAAP,CAHE;AAIZ+B,iBAAS;AAJG,KAZE;AAkBlBjB,uBAAmB;AACfY,cAAMC,MADS;AAEfC,cAAM,CAAC,SAAD,EAAY,UAAZ,EAAwB,QAAxB,EAAkC,WAAlC,EAA+C,UAA/C,CAFS;AAGf5B,kBAAU,CAAC,IAAD,EAAO,eAAP,CAHK;AAIf+B,iBAAS;AAJM,KAlBD;AAwBlBhB,mBAAe,EAAEW,MAAMM,OAAR,EAAiBhC,UAAU,CAAC,IAAD,EAAO,eAAP,CAA3B,EAAoD+B,SAAS,IAA7D,EAxBG;AAyBlBd,4BAAwB,EAAES,MAAMI,IAAR,EAzBN;AA0BlBZ,0BAAsB,EAAEQ,MAAMI,IAAR,EA1BJ;AA2BlBX,oBAAgB,EAAEO,MAAMI,IAAR,EA3BE;AA4BlBV,kBAAc,EAAEM,MAAMjC,QAAR,EAAkBoC,KAAK,OAAvB,EA5BI,EA4B8B;AAChDR,sBAAkB,EAAEK,MAAMC,MAAR,EA7BA;AA8BlBL,gBAAY,EAAEI,MAAMjC,QAAR,EAAkBO,UAAU,IAA5B,EAAkC6B,KAAK,OAAvC,EA9BM;AA+BlBL,gBAAY,EAAEE,MAAMjC,QAAR,EAAkBoC,KAAK,OAAvB;AA/BM,CAAf;;AAkCP,MAAMI,UAAU9C,SAAS+C,OAAzB;;AAEA,MAAMC,YAAY,IAAI3C,MAAJ,CAAWiC,MAAX,EAAmBQ,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,kBAA5B;;AAEA,MAAMC,kBAAkBpD,SAASqD,KAAT,CAAe,iBAAf,EAAkCH,SAAlC,CAAxB;;AAEA,eAAeE,eAAf","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {Number} id AssetAssignment ObjectId primaryKey\n * @property {String} user_type AssetAssignment user_type \"STAFF|PARTNER\" (required)\n * @property {String} staff_id AssetAssignment staff_id (optional)\n * @property {String} partner_id AssetAssignment partner_id (optional)\n * @property {Date} request_date AssetAssignment request_date (optional)\n * @property {String} task_id AssetAssignment task_id (optional)\n * @property {String} asset_type AssetAssignment asset_type \"VEHICLE|INVENTORY\" (required)\n * @property {String} vehicle_id AssetAssignment vehicle_id (optional)\n * @property {String} asset_id AssetAssignment asset_id (optional)\n * @property {Date} issued_date AssetAssignment issued_date (optional)\n * @property {String} issued_by AssetAssignment issued_by (optional)\n * @property {String} issuer_remark AssetAssignment issuer_remark (optional)\n * @property {String} request_status AssetAssignment request_status\n *  \"PENDING|COLLECTED|REVOKED\"PENDING\" optional)\n * @property {String} assignment_status AssetAssignment assignment_status\n *  \"PENDING|APPROVED|ISSUED|COLLECTED|REJECTED\" (optional)\n * @property {Boolean} is_returnable AssetAssignment is_returnable (optional)\n * @property {Date} expected_returned_date AssetAssignment expected_returned_date (optional)\n * @property {Date} actual_returned_date AssetAssignment actual_returned_date (optional)\n * @property {Date} collected_date AssetAssignment collected_date (optional)\n * @property {String} collected_by AssetAssignment collected_by (optional)\n * @property {String} collected_remark AssetAssignment collected_remark (optional)\n * @description AssetAssignment model holds record of all inventories and vehicles\n *  assignments. The Staff or driver may revoke and unfulfilled request.\n *  The Asset Manager can reject a pending request. Once request are collected,\n *  then it can be re-issued. For multiple assets, multiple request should be made\n *  to track them individually.\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Asset from \"../asset/model\";\nimport Vehicle from \"../vehicle/model\";\nimport Task from \"../task/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    user_type: Joi.string().trim().valid([\"STAFF\", \"PARTNER\"]).required(),\n    staff_id: Joi.string().optional(),\n    partner_id: Joi.string().optional(),\n    request_date: Joi.date().optional(),\n    task_id: Joi.string().optional(),\n    asset_type: Joi.string().trim().valid([\"VEHICLE\", \"INVENTORY\"]).required(),\n    vehicle_id: Joi.string().optional(),\n    asset_id: Joi.string().optional(),\n    issued_date: Joi.date().optional(),\n    issued_by: Joi.string().optional(),\n    issuer_remark: Joi.string().optional(),\n    request_status: Joi.string().trim().valid([\"PENDING\", \"COLLECTED\", \"REVOKED\"]).optional(),\n    assignment_status: Joi.string().trim().valid([\"PENDING\", \"APPROVED\", \"ISSUED\", \"COLLECTED\", \"REJECTED\"]).optional(),\n    is_returnable: Joi.boolean().optional(),\n    expected_returned_date: Joi.date().optional(),\n    actual_returned_date: Joi.date().optional(),\n    collected_date: Joi.date().optional(),\n    collected_by: Joi.string().optional(),\n    collected_remark: Joi.string().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    user_type: Joi.string().valid([\"STAFF\", \"PARTNER\"]).optional(),\n    staff_id: Joi.string().optional(),\n    partner_id: Joi.string().optional(),\n    request_date: Joi.date().optional(),\n    task_id: Joi.string().optional(),\n    asset_type: Joi.string().valid([\"VEHICLE\", \"INVENTORY\"]).optional(),\n    vehicle_id: Joi.string().optional(),\n    asset_id: Joi.string().optional(),\n    issued_date: Joi.date().optional(),\n    issued_by: Joi.string().optional(),\n    issuer_remark: Joi.string().optional(),\n    request_status: Joi.string().valid([\"PENDING\", \"COLLECTED\", \"REVOKED\"]).optional(),\n    assignment_status: Joi.string().valid([\"PENDING\", \"APPROVED\", \"ISSUED\", \"COLLECTED\", \"REJECTED\"]).optional(),\n    is_returnable: Joi.boolean().optional(),\n    expected_returned_date: Joi.date().optional(),\n    actual_returned_date: Joi.date().optional(),\n    collected_date: Joi.date().optional(),\n    collected_by: Joi.string().optional(),\n    collected_remark: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    user_type: { type: String, enum: [\"STAFF\", \"PARTNER\"], required: true },\n    staff_id: { type: ObjectId, ref: \"Staff\" },\n    partner_id: { type: ObjectId, ref: \"Partner\" },\n    request_date: { type: Date }, // desired date to receive to have the request granted\n    task_id: { type: ObjectId, ref: \"Task\" },\n    asset_type: { type: String, enum: [\"VEHICLE\", \"INVENTORY\"], required: true },\n    vehicle_id: { type: ObjectId, ref: \"Vehicle\" },\n    asset_id: { type: ObjectId, ref: \"Asset\" },\n    issued_date: { type: Date },\n    issued_by: { type: ObjectId, ref: \"Staff\" },\n    issuer_remark: { type: String },\n    request_status: {\n        type: String,\n        enum: [\"PENDING\", \"COLLECTED\", \"REVOKED\"],\n        required: [true, \"Why no input?\"],\n        default: \"PENDING\",\n    },\n    assignment_status: {\n        type: String,\n        enum: [\"PENDING\", \"APPROVED\", \"ISSUED\", \"COLLECTED\", \"REJECTED\"],\n        required: [true, \"Why no input?\"],\n        default: \"PENDING\",\n    },\n    is_returnable: { type: Boolean, required: [true, \"Why no input?\"], default: true },\n    expected_returned_date: { type: Date },\n    actual_returned_date: { type: Date },\n    collected_date: { type: Date },\n    collected_by: { type: ObjectId, ref: \"Staff\" }, // Staff to received the returned asset\n    collected_remark: { type: String },\n    created_by: { type: ObjectId, required: true, ref: \"Staff\" },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"asset_assignment\");\n\nconst AssetAssignment = mongoose.model(\"AssetAssignment\", newSchema);\n\nexport default AssetAssignment;\n"]}
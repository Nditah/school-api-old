{"version":3,"sources":["../../../../src/api/general/asset-assignment/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","user_type","Joi","string","trim","valid","required","staff_id","optional","partner_id","request_date","date","task_id","asset_type","vehicle_id","asset_id","issued_date","issued_by","issuer_remark","request_status","assignment_status","is_returnable","boolean","expected_returned_date","actual_returned_date","collected_date","collected_by","collected_remark","created_by","schemaUpdate","updated_by","schema","type","String","enum","ref","Date","default","Boolean","options","DATABASE","OPTIONS","newSchema","set","AssetAssignment","model"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\r\n/**\r\n * @author 4Dcoder\r\n * @property {Number} id AssetAssignment ObjectId primaryKey\r\n * @property {String} user_type AssetAssignment user_type \"STAFF|PARTNER\" (required)\r\n * @property {String} staff_id AssetAssignment staff_id (optional)\r\n * @property {String} partner_id AssetAssignment partner_id (optional)\r\n * @property {Date} request_date AssetAssignment request_date (optional)\r\n * @property {String} task_id AssetAssignment task_id (optional)\r\n * @property {String} asset_type AssetAssignment asset_type \"VEHICLE|INVENTORY\" (required)\r\n * @property {String} vehicle_id AssetAssignment vehicle_id (optional)\r\n * @property {String} asset_id AssetAssignment asset_id (optional)\r\n * @property {Date} issued_date AssetAssignment issued_date (optional)\r\n * @property {String} issued_by AssetAssignment issued_by (optional)\r\n * @property {String} issuer_remark AssetAssignment issuer_remark (optional)\r\n * @property {String} request_status AssetAssignment request_status\r\n *  \"PENDING|COLLECTED|REVOKED\"PENDING\" optional)\r\n * @property {String} assignment_status AssetAssignment assignment_status\r\n *  \"PENDING|APPROVED|ISSUED|COLLECTED|REJECTED\" (optional)\r\n * @property {Boolean} is_returnable AssetAssignment is_returnable (optional)\r\n * @property {Date} expected_returned_date AssetAssignment expected_returned_date (optional)\r\n * @property {Date} actual_returned_date AssetAssignment actual_returned_date (optional)\r\n * @property {Date} collected_date AssetAssignment collected_date (optional)\r\n * @property {String} collected_by AssetAssignment collected_by (optional)\r\n * @property {String} collected_remark AssetAssignment collected_remark (optional)\r\n * @description AssetAssignment model holds record of all inventories and vehicles\r\n *  assignments. The Staff or driver may revoke and unfulfilled request.\r\n *  The Asset Manager can reject a pending request. Once request are collected,\r\n *  then it can be re-issued. For multiple assets, multiple request should be made\r\n *  to track them individually.\r\n */\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE } from \"../../../constants\";\r\nimport Staff from \"../staff/model\";\r\nimport Asset from \"../asset/model\";\r\nimport Vehicle from \"../vehicle/model\";\r\nimport Task from \"../task/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaCreate = {\r\n    user_type: Joi.string().trim().valid([\"STAFF\", \"PARTNER\"]).required(),\r\n    staff_id: Joi.string().optional(),\r\n    partner_id: Joi.string().optional(),\r\n    request_date: Joi.date().optional(),\r\n    task_id: Joi.string().optional(),\r\n    asset_type: Joi.string().trim().valid([\"VEHICLE\", \"INVENTORY\"]).required(),\r\n    vehicle_id: Joi.string().optional(),\r\n    asset_id: Joi.string().optional(),\r\n    issued_date: Joi.date().optional(),\r\n    issued_by: Joi.string().optional(),\r\n    issuer_remark: Joi.string().optional(),\r\n    request_status: Joi.string().trim().valid([\"PENDING\", \"COLLECTED\", \"REVOKED\"]).optional(),\r\n    assignment_status: Joi.string().trim().valid([\"PENDING\", \"APPROVED\", \"ISSUED\", \"COLLECTED\", \"REJECTED\"]).optional(),\r\n    is_returnable: Joi.boolean().optional(),\r\n    expected_returned_date: Joi.date().optional(),\r\n    actual_returned_date: Joi.date().optional(),\r\n    collected_date: Joi.date().optional(),\r\n    collected_by: Joi.string().optional(),\r\n    collected_remark: Joi.string().optional(),\r\n    created_by: Joi.string().required(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    user_type: Joi.string().valid([\"STAFF\", \"PARTNER\"]).optional(),\r\n    staff_id: Joi.string().optional(),\r\n    partner_id: Joi.string().optional(),\r\n    request_date: Joi.date().optional(),\r\n    task_id: Joi.string().optional(),\r\n    asset_type: Joi.string().valid([\"VEHICLE\", \"INVENTORY\"]).optional(),\r\n    vehicle_id: Joi.string().optional(),\r\n    asset_id: Joi.string().optional(),\r\n    issued_date: Joi.date().optional(),\r\n    issued_by: Joi.string().optional(),\r\n    issuer_remark: Joi.string().optional(),\r\n    request_status: Joi.string().valid([\"PENDING\", \"COLLECTED\", \"REVOKED\"]).optional(),\r\n    assignment_status: Joi.string().valid([\"PENDING\", \"APPROVED\", \"ISSUED\", \"COLLECTED\", \"REJECTED\"]).optional(),\r\n    is_returnable: Joi.boolean().optional(),\r\n    expected_returned_date: Joi.date().optional(),\r\n    actual_returned_date: Joi.date().optional(),\r\n    collected_date: Joi.date().optional(),\r\n    collected_by: Joi.string().optional(),\r\n    collected_remark: Joi.string().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    user_type: { type: String, enum: [\"STAFF\", \"PARTNER\"], required: true },\r\n    staff_id: { type: ObjectId, ref: \"Staff\" },\r\n    partner_id: { type: ObjectId, ref: \"Partner\" },\r\n    request_date: { type: Date }, // desired date to receive to have the request granted\r\n    task_id: { type: ObjectId, ref: \"Task\" },\r\n    asset_type: { type: String, enum: [\"VEHICLE\", \"INVENTORY\"], required: true },\r\n    vehicle_id: { type: ObjectId, ref: \"Vehicle\" },\r\n    asset_id: { type: ObjectId, ref: \"Asset\" },\r\n    issued_date: { type: Date },\r\n    issued_by: { type: ObjectId, ref: \"Staff\" },\r\n    issuer_remark: { type: String },\r\n    request_status: {\r\n        type: String,\r\n        enum: [\"PENDING\", \"COLLECTED\", \"REVOKED\"],\r\n        required: [true, \"Why no input?\"],\r\n        default: \"PENDING\",\r\n    },\r\n    assignment_status: {\r\n        type: String,\r\n        enum: [\"PENDING\", \"APPROVED\", \"ISSUED\", \"COLLECTED\", \"REJECTED\"],\r\n        required: [true, \"Why no input?\"],\r\n        default: \"PENDING\",\r\n    },\r\n    is_returnable: { type: Boolean, required: [true, \"Why no input?\"], default: true },\r\n    expected_returned_date: { type: Date },\r\n    actual_returned_date: { type: Date },\r\n    collected_date: { type: Date },\r\n    collected_by: { type: ObjectId, ref: \"Staff\" }, // Staff to received the returned asset\r\n    collected_remark: { type: String },\r\n    created_by: { type: ObjectId, required: true, ref: \"Staff\" },\r\n    updated_by: { type: ObjectId, ref: \"Staff\" },\r\n};\r\n\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\nnewSchema.set(\"collection\", \"asset_assignment\");\r\n\r\nconst AssetAssignment = mongoose.model(\"AssetAssignment\", newSchema);\r\n\r\nexport default AssetAssignment;\r\n"]}
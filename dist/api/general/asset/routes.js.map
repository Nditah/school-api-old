{"version":3,"sources":["../../../../src/api/general/asset/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,SAAX,EAAsB,CAACC,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDC,uBAAjD;;AAEA;;;;;;;;;;;;;AAaAN,OAAOO,IAAP,CAAY,SAAZ,EAAuB,CAACH,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDG,wBAAlD;;AAEA;;;;;;;;;;;;;AAaAR,OAAOS,GAAP,CAAW,mBAAX,EAAgC,CAACL,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DK,wBAA3D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,mBAAd,EAAmC,CAACP,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DO,wBAA9D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/assets?id={recordId} Retrieve Asset records\n * @apiName RetrieveAsset\n * @apiGroup Asset\n * @apiHeader {String} Authorization Bearer token\n* @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/assets\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/assets\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/assets Create an Asset record\n * @apiName CreateAsset\n * @apiGroup Asset\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Asset name\n * @apiParam {String} type Asset type or model\n * @apiParam {String} value Asset value\n * @apiSuccess {Object} Asset Asset's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Asset not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/assets\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/assets/{recordId} Update an Asset record\n * @apiName UpdateAsset\n * @apiGroup Asset\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Asset name\n * @apiParam {String} type Asset type or model\n * @apiParam {String} value Asset value\n * @apiSuccess {Object} Asset Asset's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Asset not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/assets/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/assets/{recordId} Delete an Asset record\n * @apiName DeleteAsset\n * @apiGroup Asset\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Asset not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/assets/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
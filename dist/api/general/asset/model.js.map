{"version":3,"sources":["../../../../src/api/general/asset/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","table","Staff","Category","Schema","ObjectId","Types","schemaCreate","label","string","optional","serial","name","type","make","measure","category_id","description","terminal_id","subsidiary","location","is_consumable","usability","valid","worth","staff_id","launch_date","date","expire_date","purchase_id","opening_value","number","closing_value","salvage_value","current_value","photo","lifespan","total_depreciable_cost","depreciation_rate","depreciation_expense","accumulated_depreciation","created_by","required","schemaUpdate","updated_by","schema","String","comment","ref","Boolean","default","enum","Date","Number","preload","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","Asset","model","insertMany"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Dcoder\n * @property {ObjectId} id Asset primaryKey\n * @property {String} label Asset label or barcode tag\n * @property {String} serial Asset serial\n * @property {String} name Asset name\n * @property {String} type Asset type or model\n * @property {String} make Asset make or manufacturer\n * @property {String} measure Asset measure\n * @property {ObjectId} category_id Asset category_id\n * @property {String} description Asset description\n * @property {ObjectId} terminal_id Asset terminal_id\n * @property {String} subsidiary Asset subsidiary\n * @property {String} location Asset location\n * @property {String} is_consumable Asset is_consumable\n * @property {String} usability Asset usability \"DUTY|SCRAP|SHOP|SOLD|DISPOSED\"\n * @property {String} worth Asset worth \"APPRECIATE|DEPRECIATE\"\n * @property {ObjectId} staff_id Asset custodian staff ObjectId\n * @property {Date} launch_date Asset launch_date\n * @property {Date} expire_date Asset expire_date\n * @property {ObjectId} purchase_id Asset purchase_id\n * @property {Number} opening_value Asset opening_value\n * @property {Number} closing_value Asset closing_value\n * @property {Number} salvage_value Asset salvage_value\n * @property {Number} current_value Asset current_value\n * @property {String} photo Asset photo\n * @property {Number} lifespan Asset lifespan in Years\n * @property {Number} total_depreciable_cost Asset total_depreciable_cost\n * @property {Number} depreciation_rate Asset depreciation_rate\n * @property {Number} depreciation_expense Asset depreciation_expense\n * @property {Number} accumulated_depreciation Asset accumulated_depreciation\n * @description Asset model holds record of all Inventories except vehicles\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Category from \"../category/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    label: Joi.string().optional(),\n    serial: Joi.string().optional(),\n    name: Joi.string().optional(),\n    type: Joi.string().optional(),\n    make: Joi.string().optional(),\n    measure: Joi.string().optional(),\n    category_id: Joi.string().optional(),\n    description: Joi.string().optional(),\n    terminal_id: Joi.string().optional(),\n    subsidiary: Joi.string().optional(),\n    location: Joi.string().optional(),\n    is_consumable: Joi.string().optional(),\n    usability: Joi.string().valid(\"DUTY\", \"SCRAP\", \"SHOP\", \"SOLD\", \"DISPOSED\").optional(),\n    worth: Joi.string().valid(\"APPRECIATE\", \"DEPRECIATE\").optional(),\n    staff_id: Joi.string().optional(),\n    launch_date: Joi.date().optional(),\n    expire_date: Joi.date().optional(),\n    purchase_id: Joi.string().optional(),\n    opening_value: Joi.number().optional(),\n    closing_value: Joi.number().optional(),\n    salvage_value: Joi.number().optional(),\n    current_value: Joi.number().optional(),\n    photo: Joi.string().optional(),\n    lifespan: Joi.number().optional(),\n    total_depreciable_cost: Joi.number().optional(),\n    depreciation_rate: Joi.number().optional(),\n    depreciation_expense: Joi.number().optional(),\n    accumulated_depreciation: Joi.number().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    label: Joi.string().optional(),\n    serial: Joi.string().optional(),\n    name: Joi.string().optional(),\n    type: Joi.string().optional(),\n    make: Joi.string().optional(),\n    measure: Joi.string().optional(),\n    category_id: Joi.string().optional(),\n    description: Joi.string().optional(),\n    terminal_id: Joi.string().optional(),\n    subsidiary: Joi.string().optional(),\n    location: Joi.string().optional(),\n    is_consumable: Joi.string().optional(),\n    usability: Joi.string().valid(\"DUTY\", \"SCRAP\", \"SHOP\", \"SOLD\", \"DISPOSED\").optional(),\n    worth: Joi.string().valid(\"APPRECIATE\", \"DEPRECIATE\").optional(),\n    staff_id: Joi.string().optional(),\n    launch_date: Joi.date().optional(),\n    expire_date: Joi.date().optional(),\n    purchase_id: Joi.string().optional(),\n    opening_value: Joi.number().optional(),\n    closing_value: Joi.number().optional(),\n    salvage_value: Joi.number().optional(),\n    current_value: Joi.number().optional(),\n    photo: Joi.string().optional(),\n    lifespan: Joi.number().optional(),\n    total_depreciable_cost: Joi.number().optional(),\n    depreciation_rate: Joi.number().optional(),\n    depreciation_expense: Joi.number().optional(),\n    accumulated_depreciation: Joi.number().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    label: { type: String, comment: \"tag\" },\n    serial: { type: String },\n    name: { type: String },\n    type: { type: String },\n    make: { type: String },\n    measure: { type: String },\n    category_id: { type: ObjectId, ref: \"Category\" },\n    description: { type: String },\n    terminal_id: { type: ObjectId, ref: \"Terminal\", required: true },\n    subsidiary: { type: String },\n    is_consumable: { type: Boolean, required: true, default: false },\n    usability: { type: String, enum: [\"DUTY\", \"SCRAP\", \"SHOP\", \"SOLD\", \"DISPOSED\"] },\n    worth: { type: String, enum: [\"APPRECIATE\", \"DEPRECIATE\"] },\n    staff_id: { type: ObjectId, ref: \"Staff\", comment: \"custodian\" },\n    launch_date: { type: Date },\n    expire_date: { type: Date },\n    purchase_id: { type: ObjectId, ref: \"Purchase\", required: true },\n    opening_value: { type: Number },\n    closing_value: { type: Number },\n    salvage_value: { type: Number },\n    current_value: { type: Number },\n    photo: { type: String },\n    lifespan: { type: Number },\n    total_depreciable_cost: { type: Number },\n    depreciation_rate: { type: Number },\n    depreciation_expense: { type: Number },\n    accumulated_depreciation: { type: Number },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"asset\");\nnewSchema.plugin(mongoose_csv);\n\nconst Asset = mongoose.model(\"Asset\", newSchema);\nif (preload) { Asset.insertMany(table); }\n\nexport default Asset;\n"]}
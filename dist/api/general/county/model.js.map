{"version":3,"sources":["../../../../src/api/general/county/model.js"],"names":["Joi","mongoose","mongoose_csv","DATABASE","table","State","Staff","Schema","ObjectId","Types","schemaCreate","name","string","trim","required","state_id","created_by","schemaUpdate","optional","updated_by","schema","type","String","ref","allowNull","preload","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","County","model","insertMany"],"mappings":"AAAA;AACA;;;;;;;;;AASA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,MAAM,EAAEC,MAAF,KAAaN,QAAnB;AACA,MAAM,EAAEO,QAAF,KAAeD,OAAOE,KAA5B;;AAEA,OAAO,MAAMC,eAAe;AACxBC,UAAMX,IAAIY,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EADkB;AAExBC,cAAUf,IAAIY,MAAJ,GAAaE,QAAb,EAFc;AAGxBE,gBAAYhB,IAAIY,MAAJ,GAAaE,QAAb;AAHY,CAArB;;AAMP,OAAO,MAAMG,eAAe;AACxBN,UAAMX,IAAIY,MAAJ,GAAaC,IAAb,GAAoBK,QAApB,EADkB;AAExBH,cAAUf,IAAIY,MAAJ,GAAaM,QAAb,EAFc;AAGxBC,gBAAYnB,IAAIY,MAAJ,GAAaE,QAAb;AAHY,CAArB;;AAMP,OAAO,MAAMM,SAAS;AAClBT,UAAM,EAAEU,MAAMC,MAAR,EADY;AAElBP,cAAU,EAAEM,MAAMb,QAAR,EAAkBe,KAAK,OAAvB,EAFQ;AAGlBP,gBAAY,EAAEK,MAAMb,QAAR,EAAkBM,UAAU,CAAC,IAAD,EAAO,eAAP,CAA5B,EAHM;AAIlBK,gBAAY,EAAEE,MAAMb,QAAR,EAAkBgB,WAAW,IAA7B;AAJM,CAAf;;AAOP,MAAMC,UAAUtB,SAASuB,kBAAT,CAA4BC,OAA5C;AACA,MAAMC,UAAUzB,SAAS0B,OAAzB;;AAEA,MAAMC,YAAY,IAAIvB,MAAJ,CAAWa,MAAX,EAAmBQ,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,QAA5B;AACAD,UAAUE,MAAV,CAAiB9B,YAAjB;;AAEA,MAAM+B,SAAShC,SAASiC,KAAT,CAAe,QAAf,EAAyBJ,SAAzB,CAAf;AACA,IAAIL,OAAJ,EAAa;AAAEQ,WAAOE,UAAP,CAAkB/B,KAAlB;AAA2B;;AAE1C,eAAe6B,MAAf","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {Number} id County primaryKey\n * @property {String} name County short name\n * @property {String} state_id County State Id\n * @property {Number} created_by County record created by\n * @property {Number} updated_by County record modified by\n * @description County holds record of all cities with terminal_list\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport State from \"../state/model\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    state_id: Joi.string().required(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    state_id: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String },\n    state_id: { type: ObjectId, ref: \"State\" },\n    created_by: { type: ObjectId, required: [true, \"Why no input?\"] },\n    updated_by: { type: ObjectId, allowNull: true },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"county\");\nnewSchema.plugin(mongoose_csv);\n\nconst County = mongoose.model(\"County\", newSchema);\nif (preload) { County.insertMany(table); }\n\nexport default County;\n"]}
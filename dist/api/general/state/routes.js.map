{"version":3,"sources":["../../../../src/api/general/state/routes.js"],"names":["router","express","Router","get","fetchRecord","post","checkAuth","isValidStaff","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,SAAX,EAAsBC,uBAAtB;;AAEA;;;;;;;;;;;;;AAaAJ,OAAOK,IAAP,CAAY,SAAZ,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,wBAAlD;;AAEA;;;;;;;;;;;;;;;AAeAR,OAAOS,GAAP,CAAW,mBAAX,EAAgC,CAACH,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DG,wBAA3D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,mBAAd,EAAmC,CAACL,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DK,wBAA9D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/states?id={recordId} Retrieve State records\n * @apiName RetrieveState\n * @apiGroup State\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/states?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of Geographical entities housing terminals\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/states\", fetchRecord);\n\n/**\n * @api {post} /api/v1/states Create a State record\n * @apiName CreateState\n * @apiGroup State\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name State name\n * @apiParam {String} country_iso2 State country\n * @apiParam {Number} created_by State record created by\n * @apiSuccess {Object} State State's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 State not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/states\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/states/{recordId} Update a State record\n * @apiName UpdateState\n * @apiGroup State\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {Number} recordId State record id (primaryKey)\n * @apiParam {String} name State name\n * @apiParam {String} country_iso2 State country\n * @apiParam {Number} updated_by State record modified by\n * @apiSuccess {Object} State State's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 State not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/states/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/states/{recordId} Delete a State record\n * @apiName DeleteState\n * @apiGroup State\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 State not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/states/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
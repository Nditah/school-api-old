{"version":3,"sources":["../../../../src/api/general/state/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","name","Joi","string","trim","required","country_iso2","max","created_by","schemaUpdate","optional","updated_by","schema","type","String","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","plugin","mongoose_csv","State","model","insertMany","table"],"mappings":";;;;;;;AAWA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;AAJA;AAbA;AACA;;;;;;;;;;IAkBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBC,QAApB,EADkB;AAExBC,kBAAcJ,cAAIC,MAAJ,GAAaC,IAAb,GAAoBG,GAApB,CAAwB,CAAxB,EAA2BF,QAA3B,EAFU;AAGxBG,gBAAYN,cAAIC,MAAJ,GAAaE,QAAb;AAHY,CAArB;;AAMA,IAAMI,sCAAe;AACxBR,UAAMC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBM,QAApB,EADkB;AAExBJ,kBAAcJ,cAAIC,MAAJ,GAAaC,IAAb,GAAoBG,GAApB,CAAwB,CAAxB,EAA2BG,QAA3B,EAFU;AAGxBC,gBAAYT,cAAIC,MAAJ,GAAaE,QAAb;AAHY,CAArB;;AAMA,IAAMO,0BAAS;AAClBX,UAAM,EAAEY,MAAMC,MAAR,EAAgBT,UAAU,IAA1B,EADY;AAElBC,kBAAc,EAAEO,MAAMC,MAAR,EAAgBT,UAAU,IAA1B,EAFI;AAGlBG,gBAAY,EAAEK,MAAMf,QAAR,EAAkBiB,KAAK,OAAvB,EAAgCV,UAAU,IAA1C,EAHM;AAIlBM,gBAAY,EAAEE,MAAMf,QAAR,EAAkBiB,KAAK,OAAvB;AAJM,CAAf;;AAOP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI1B,MAAJ,CAAWgB,MAAX,EAAmBQ,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,OAA5B;AACAD,UAAUE,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,QAAQ7B,mBAAS8B,KAAT,CAAe,OAAf,EAAwBL,SAAxB,CAAd;;AAEA,IAAIN,OAAJ,EAAa;AAAEU,UAAME,UAAN,CAAiBC,eAAjB;AAA0B;;kBAE1BH,K","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {ObjectId} id State primaryKey\n * @property {String} name State name\n * @property {Number} hub_id State Hub id\n * @property {String} country_iso2 The Country where the state is located\n * @property {ObjectId} created_by State record created by\n * @property {ObjectId} updated_by State record modified by\n * @description State holds record of all cities with terminal_list\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    country_iso2: Joi.string().trim().max(2).required(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    country_iso2: Joi.string().trim().max(2).optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    name: { type: String, required: true },\n    country_iso2: { type: String, required: true },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"state\");\nnewSchema.plugin(mongoose_csv);\n\nconst State = mongoose.model(\"State\", newSchema);\n\nif (preload) { State.insertMany(table); }\n\nexport default State;\n"]}
{"version":3,"sources":["../../../../src/api/general/budget/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAN,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDG,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DK,wBAA5D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DO,wBAA/D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/budgets?id={recordId} Retrieve one or all records\n * @apiName RetrieveBudget\n * @apiGroup Budget\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/budgets?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/budgets\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/budgets Create budgets\n * @apiName CreateBudget\n * @apiGroup Budget\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Budget name (required)\n * @apiParam {String} type Budget Category ACCOUNT|OFFICE|SUBSIDIARY|TERMINAL\n * @apiParam {String} description Budget description (required)\n * @apiParam {String} subsidiary Budget PET|CHEM|PLANT|ENGR (required)\n * @apiParam {Number} year Budget year e.g. 2020 Period is gotten from settings\n * @apiParam {Number} amount Budget cap set for the given year\n * @apiParam {ObjectId} office Budget for a given office\n * @apiParam {ObjectId} terminal Budget Terminal\n * @apiParam {ObjectId} account_heading Budget AccountHeading\n * @apiSuccess {Object} Budget Budget's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Budget not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/budgets\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/budgets/{recordId} Update budgets\n * @apiName UpdateBudget\n * @apiGroup Budget\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} name Budget name (required)\n * @apiParam {String} type Budget Category ACCOUNT|OFFICE|SUBSIDIARY|TERMINAL\n * @apiParam {String} description Budget description (required)\n * @apiParam {String} subsidiary Budget PET|CHEM|PLANT|ENGR (required)\n * @apiParam {Number} year Budget year e.g. 2020 Period is gotten from settings\n * @apiParam {Number} amount Budget cap set for the given year\n * @apiParam {ObjectId} office Budget for a given office\n * @apiParam {ObjectId} terminal Budget Terminal\n * @apiParam {ObjectId} account_heading Budget AccountHeading\n * @apiSuccess {Object} Budget Budget's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Budget not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/budgets/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/budgets/{recordId} Delete budgets\n * @apiName DeleteBudget\n * @apiGroup Budget\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Budget not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/budgets/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
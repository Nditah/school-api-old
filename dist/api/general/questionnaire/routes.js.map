{"version":3,"sources":["../../../../src/api/general/questionnaire/routes.js"],"names":["router","express","Router","get","checkAuth","fetchRecord","post","isValidCustomer","createRecord","put","isValidStaff","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,iBAAX,EAA8B,CAACC,wBAAD,CAA9B,EAA2CC,uBAA3C;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBAL,OAAOM,IAAP,CAAY,iBAAZ,EAA+B,CAACF,wBAAD,EAAYG,8BAAZ,CAA/B,EAA6DC,wBAA7D;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBAR,OAAOS,GAAP,CAAW,2BAAX,EAAwC,CAACL,wBAAD,EAAYM,2BAAZ,CAAxC,EAAmEC,wBAAnE;;AAEA;;;;;;;;;;AAUAX,OAAOY,MAAP,CAAc,2BAAd,EAA2C,CAACR,wBAAD,EAAYM,2BAAZ,CAA3C,EAAsEG,wBAAtE;;kBAEeb,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff, isValidCustomer } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/questionnaires?id={recordId} Retrieve one or all records\n * @apiName RetrieveQuestionnaires\n * @apiGroup Questionnaire\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/questionnaires?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of permissible api routes staff can access\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/questionnaires\", [checkAuth], fetchRecord);\n\n/**\n * @api {post} /api/v1/questionnaires Create questionnaires\n * @apiName CreateQuestionnaire\n * @apiGroup Questionnaire\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code Questionnaire code\n * @apiParam {String} type Questionnaire type \"OBJECTIVE|THEORY|SUBJECTIVE\"\n * @apiParam {String} question Questionnaire question\n * @apiParam {String} answer1 Questionnaire 1st optional answer\n * @apiParam {String} answer2 Questionnaire 2nd optional answer\n * @apiParam {String} answer3 Questionnaire 3rd optional answer\n * @apiParam {String} answer4 Questionnaire 4th optional answer\n * @apiParam {String} answer5 Questionnaire 5th optional answer\n * @apiParam {String} correct Questionnaire correct answer(s) amongst\n *  \"answer1|answer2|answer3|answer4|answer5\"\n * @apiParam {Number} score Questionnaire score or weight of quiz\n * @apiParam {String} courses Questionnaire courses Array<Course>\n * @apiSuccess {Object} Questionnaire Questionnaire's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Questionnaire not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/questionnaires\", [checkAuth, isValidCustomer], createRecord);\n\n/**\n * @api {put} /api/v1/questionnaires/{recordId} Update questionnaires\n * @apiName UpdateQuestionnaire\n * @apiGroup Questionnaire\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} code Questionnaire code\n * @apiParam {String} type Questionnaire type \"OBJECTIVE|THEORY|SUBJECTIVE\"\n * @apiParam {String} question Questionnaire question\n * @apiParam {String} answer1 Questionnaire 1st optional answer\n * @apiParam {String} answer2 Questionnaire 2nd optional answer\n * @apiParam {String} answer3 Questionnaire 3rd optional answer\n * @apiParam {String} answer4 Questionnaire 4th optional answer\n * @apiParam {String} answer5 Questionnaire 5th optional answer\n * @apiParam {String} correct Questionnaire correct answer(s) amongst\n *  \"answer1|answer2|answer3|answer4|answer5\"\n * @apiParam {Number} score Questionnaire score or weight of quiz\n * @apiParam {String} courses Questionnaire courses Array<Course>\n * @apiSuccess {Object} Questionnaire Questionnaire's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Questionnaire not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/questionnaires/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/questionnaires/{recordId} Delete questionnaires\n * @apiName DeleteQuestionnaire\n * @apiGroup Questionnaire\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {ObjectId} recordId record ObjectId.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Questionnaire not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/questionnaires/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
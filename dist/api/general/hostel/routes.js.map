{"version":3,"sources":["../../../../src/api/general/hostel/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,WAAX,EAAwB,CAACC,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDC,uBAAnD;;AAEA;;;;;;;;;;;;;;;AAeAN,OAAOO,IAAP,CAAY,WAAZ,EAAyB,CAACH,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDG,wBAApD;;AAEA;;;;;;;;;;;;;;;AAeAR,OAAOS,GAAP,CAAW,qBAAX,EAAkC,CAACL,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DK,wBAA7D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACP,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEO,wBAAhE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/subjects?id={recordId} Retrieve one or all records\n * @apiName RetrieveSubject\n * @apiGroup Subject\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/subjects?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records of Subject the school.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/subjects\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/subjects Create subjects\n * @apiName CreateSubject\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} block Subject block name (required)\n * @apiParam {Number} room_no Subject room_no (required)\n * @apiParam {Number} no_of_beds Subject no_of_beds (required)\n * @apiParam {String} fee_id Subject fee_id (optional)\n * @apiParam {String} description Subject description (optional)\n * @apiParam {String} status Subject Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Subject not found.\n * @apiError 500 server error.\n */\nrouter.post(\"/subjects\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/subjects/{recordId} Update subjects\n * @apiName UpdateSubject\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} block Subject block name (required)\n * @apiParam {Number} room_no Subject room_no (required)\n * @apiParam {Number} no_of_beds Subject no_of_beds (required)\n * @apiParam {String} fee_id Subject fee_id (optional)\n * @apiParam {String} description Subject description (optional)\n * @apiParam {String} status Subject Status (Occupied or not Occupied)(optional)\n * @apiError {Object} 422 Some parameters may contain invalid values.\n * @apiError 404 Subject not found.\n * @apiError 500 server error.\n */\nrouter.put(\"/subjects/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/subjects/{recordId} Delete subjects\n * @apiName DeleteSubject\n * @apiGroup Subject\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Subject not found.\n * @apiError 401 master Subject only.\n */\nrouter.delete(\"/subjects/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
{"version":3,"sources":["../../../../src/api/general/attendance/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","type","Joi","string","optional","staff","student","office","attendance_status","trim","valid","subsidiary","Object","values","SUBSIDIARY","classe","arrival_time","date","required","departure_time","created_by","schemaUpdate","updated_by","schema","String","enum","ref","default","Date","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Attendance","model","insertMany","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Attendance primaryKey\n * @property {ObjectId} staff_id Attendance staff_id\n * @property {ObjectId} student_id Attendance student_id\n * @property {String} attendance_status Attendance pay_status \"SUSPENDED\", \"EARLY\", \"LATE\"\n * @property {String} subsidiary Attendance subsidiary\n * @property {ObjectId} classe_id Attendance classe_id\n * @property {Date} arrival_time Attendance arrival_time\n * @property {Date} departure_time Attendance departure_time\n * @description Attendance model holds record of staff time log\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\nimport Office from \"../office/model\";\nimport Classe from \"../classe/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    type: Joi.string().optional(),\n    staff: Joi.string().optional(),\n    student: Joi.string().optional(),\n    office: Joi.string().optional(),\n    attendance_status: Joi.string().trim().valid([\"SUSPENDED\", \"EARLY\", \"LATE\"]).optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    classe: Joi.string().optional(),\n    arrival_time: Joi.date().required(),\n    departure_time: Joi.date().optional(),\n    created_by: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    type: Joi.string().optional(),\n    staff: Joi.string().optional(),\n    student: Joi.string().optional(),\n    office: Joi.string().optional(),\n    attendance_status: Joi.string().trim().valid([\"SUSPENDED\", \"EARLY\", \"LATE\"]).optional(),\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n    classe: Joi.string().optional(),\n    arrival_time: Joi.date().optional(),\n    departure_time: Joi.date().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    type: { type: String, enum: [\"STAFF\", \"STUDENT\"], required: true },\n    staff: { type: ObjectId, ref: \"Staff\" },\n    student: { type: ObjectId, ref: \"Student\" },\n    attendance_status: {\n        type: String,\n        enum: [\"SUSPENDED\", \"EARLY\", \"LATE\"],\n        default: \"EARLY\",\n        required: true,\n    },\n    office: { type: ObjectId, ref: \"Office\", required: false },\n    subsidiary: {\n        type: String,\n        enum: Object.values(SUBSIDIARY),\n        required: [true, \"Why no subsidiary?\"],\n    },\n    classe: { type: ObjectId, ref: \"Classe\" },\n    arrival_time: { type: Date },\n    departure_time: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"attendance\");\n\nconst Attendance = mongoose.model(\"Attendance\", newSchema);\n\nif (preload) { Attendance.insertMany(table); }\n\nexport default Attendance;\n"]}
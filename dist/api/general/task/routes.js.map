{"version":3,"sources":["../../../../src/api/general/task/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,QAAX,EAAqB,CAACC,wBAAD,EAAYC,2BAAZ,CAArB,EAAgDC,uBAAhD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAN,OAAOO,IAAP,CAAY,QAAZ,EAAsB,CAACH,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDG,wBAAjD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BAR,OAAOS,GAAP,CAAW,kBAAX,EAA+B,CAACL,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DK,wBAA1D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,kBAAd,EAAkC,CAACP,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DO,wBAA7D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/tasks?id={recordId} Retrieve Task records\n * @apiName RetrieveTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/tasks?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of account headings belonging to one classification\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/tasks\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/tasks Create a Task record\n * @apiName CreateTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} name Task short name\n * @apiParam {String} tags Task tags are keywords\n * @apiParam {String} code Task code\n * @apiParam {String} status Task status \"PENDING|ASSIGNED|ONGOING|STARTED|ENDING|CLOSED\"\n * @apiParam {String} title Task title\n * @apiParam {String} description Task description explanation and expectations\n * @apiParam {Number} manhour Task manhour estimated manhour required\n * @apiParam {Number} completion Task completion current Percent executed\n * @apiParam {String} report Task report by Staff assigned_to\n * @apiParam {Date} start_date Task start_date assigned_to mark as started\n * @apiParam {Date} end_date Task end_date Staff assigned_to mark as ended\n * @apiParam {Date} assigned_date Task assigned_date\n * @apiParam {ObjectId} assigned_to Task assigned_to Staff performing the task\n * @apiParam {ObjectId} assigned_by Task assigned_by Staff created the task\n * @apiParam {Number} score Task score by Staff assigned_by\n * @apiParam {String} remark Task remark by Staff assigned_by\n * @apiParam {ObjectId} voucher Task voucher for needed funds by Staff assigned_to\n * @apiParam {ObjectId} asset_assignment Task request by Staff assigned_to\n * @apiParam {String} subsidiary Task subsidiary conducting the task\n * @apiParam {ObjectId} office_id Task office id conducting the task\n * @apiSuccess {Object} Task Task's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Task not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/tasks\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/tasks/{recordId} Update a Task record\n * @apiName UpdateTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} name Task short name\n * @apiParam {String} tags Task tags are keywords\n * @apiParam {String} code Task code\n * @apiParam {String} status Task status \"PENDING|ASSIGNED|ONGOING|STARTED|ENDING|CLOSED\"\n * @apiParam {String} title Task title\n * @apiParam {String} description Task description explanation and expectations\n * @apiParam {Number} manhour Task manhour estimated manhour required\n * @apiParam {Number} completion Task completion current Percent executed\n * @apiParam {String} report Task report by Staff assigned_to\n * @apiParam {Date} start_date Task start_date assigned_to mark as started\n * @apiParam {Date} end_date Task end_date Staff assigned_to mark as ended\n * @apiParam {Date} assigned_date Task assigned_date\n * @apiParam {ObjectId} assigned_to Task assigned_to Staff performing the task\n * @apiParam {ObjectId} assigned_by Task assigned_by Staff created the task\n * @apiParam {Number} score Task score by Staff assigned_by\n * @apiParam {String} remark Task remark by Staff assigned_by\n * @apiParam {ObjectId} voucher Task voucher for needed funds by Staff assigned_to\n * @apiParam {ObjectId} asset_assignment Task request by Staff assigned_to\n * @apiParam {String} subsidiary Task subsidiary conducting the task\n * @apiParam {ObjectId} office_id Task office id conducting the task\n * @apiSuccess {Object} Task Task's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Task not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/tasks/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/tasks/{recordId} Delete a Task record\n * @apiName DeleteTask\n * @apiGroup Task\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Task not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/tasks/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
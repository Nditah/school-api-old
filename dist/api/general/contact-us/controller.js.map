{"version":3,"sources":["../../../../src/api/general/contact-us/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","ContactUs","find","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","Joi","validate","schemaCreate","email","subject","fullname","phone","requestType","request_type","newRecord","send","console","log","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport ContactUs, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, isObjecId } from \"../../../lib\";\nimport { emailFromContactus } from \"../../../services\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[contact_us]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/contact_us.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { filter, skip, limit, sort, projection } = aqp(query);\n    try {\n        const result = await ContactUs.find(filter)\n           \n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const { email, subject, message, fullname, phone, request_type: requestType } = data;\n    const newRecord = new ContactUs(data);\n    try {\n        const send = emailFromContactus(email, subject, message, fullname, phone, requestType);\n        console.log(send);\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await ContactUs.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await ContactUs.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
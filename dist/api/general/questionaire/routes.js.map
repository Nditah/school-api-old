{"version":3,"sources":["../../../../src/api/general/questionaire/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,aAAX,EAA0B,CAACC,wBAAD,EAAYC,2BAAZ,CAA1B,EAAqDC,WAArD;;AAEA;;;;;;;;;;;;;;;AAeAN,OAAOO,IAAP,CAAY,aAAZ,EAA2B,CAACH,wBAAD,EAAYC,2BAAZ,CAA3B,EAAsDG,YAAtD;;AAEA;;;;;;;;;;;;;;;AAeAR,OAAOS,GAAP,CAAW,uBAAX,EAAoC,CAACL,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DK,YAA/D;;AAEA;;;;;;;;;;;;;;;AAeAV,OAAOW,MAAP,CAAc,uBAAd,EAAuC,CAACP,wBAAD,EAAYC,2BAAZ,CAAvC,EAAkEO,YAAlE;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\n// import { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/admissions?id={recordId} Retrieve one or all records\r\n * @apiName RetrieveAdmission\r\n * @apiGroup Questionaire\r\n * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/admissions?\r\n * @apiParam {String} code Questionaire code ObjectId\r\n * @apiParam {String} questionaire Questionaire \r\n * @apiParam {String} answer Questionaire answer\r\n * @apiParam {String} correct_answer Questionaire correct_answer\r\n * @apiParam {String} score Questionaire score)\r\n * @apiParam {String} course_name Questionaire course_name\r\n * @apiDescription Records of Questionaire in a hierarchy that give certain privileges.\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/admissions\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/questionaire Create questionaire\r\n * @apiName CreateQuestionaire\r\n * @apiGroup Questionaire\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} code Questionaire code ObjectId\r\n * @apiParam {String} questionaire Questionaire \r\n * @apiParam {String} answer Questionaire answer\r\n * @apiParam {String} correct_answer Questionaire correct_answer\r\n * @apiParam {String} score Questionaire score)\r\n * @apiParam {String} course_name Questionaire course_name\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 Questionaire not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.post(\"/admissions\", [checkAuth, isValidStaff], createRecord);\r\n\r\n/**\r\n * @api {put} /api/admissions/{recordId} Update admissions\r\n * @apiName UpdateAdmission\r\n * @apiGroup Admission\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} code Questionaire code ObjectId\r\n * @apiParam {String} questionaire Questionaire \r\n * @apiParam {String} answer Questionaire answer\r\n * @apiParam {String} correct_answer Questionaire correct_answer\r\n * @apiParam {String} score Questionaire score)\r\n * @apiParam {String} course_name Questionaire course_name\r\n * @apiError {Object} 422 Some parameters may contain invalid values.\r\n * @apiError 404 Admission not found.\r\n * @apiError 500 server error.\r\n */\r\nrouter.put(\"/admissions/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\n/**\r\n * @api {delete} /api/admissions/{recordId} Delete admissions\r\n * @apiName DeleteAdmission\r\n * @apiGroup Admission\r\n * @apiHeader {String} Authorization Bearer token\r\n *@apiParam {String} code Questionaire code ObjectId\r\n * @apiParam {String} questionaire Questionaire \r\n * @apiParam {String} answer Questionaire answer\r\n * @apiParam {String} correct_answer Questionaire correct_answer\r\n * @apiParam {String} score Questionaire score)\r\n * @apiParam {String} course_name Questionaire course_name\r\n * @apiSuccess (Success 204) 204 No Content.\r\n * @apiError 404 Admission not found.\r\n * @apiError 401 master Admission only.\r\n */\r\nrouter.delete(\"/admissions/:recordId\", [checkAuth, isValidStaff], deleteRecord);\r\n\r\nexport default router;\r\n"]}
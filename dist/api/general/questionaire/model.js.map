{"version":3,"sources":["../../../../src/api/general/questionaire/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaCreate","code","Joi","string","optional","questionaire","valid","required","answer","correct_answer","score","number","course_name","created_by","updated_by","schemaUpdate","schema","type","String","enum","question","Number","default","ref","options","DATABASE","OPTIONS","newSchema","set","Notification","model","Questionaire"],"mappings":";;;;;;;AAaA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;AAJA;AAfA;;;;;;;;;;;;;IAqBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,sCAAe;AACxBC,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,kBAAcH,cAAIC,MAAJ,GAAaG,KAAb,CAAmB,WAAnB,EAAgC,QAAhC,EAA0C,YAA1C,EAAwDC,QAAxD,EAFU;AAGxBC,YAAQN,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIxBK,oBAAgBP,cAAIC,MAAJ,GAAaG,KAAb,CAAmB,SAAnB,EAA6B,SAA7B,EAAwC,SAAxC,EAAmD,SAAnD,EAA8D,SAA9D,EAAyEC,QAAzE,EAJQ;AAKxBG,WAAOR,cAAIS,MAAJ,GAAaJ,QAAb,EALiB;AAMxBK,iBAAaV,cAAIC,MAAJ,GAAaI,QAAb,EANW;AAOxBM,gBAAYX,cAAIC,MAAJ,GAAaI,QAAb,EAPY;AAQxBO,gBAAYZ,cAAIC,MAAJ,GAAaC,QAAb;AARY,CAArB;;AAWA,IAAMW,sCAAe;AACxBd,UAAMC,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBC,kBAAcH,cAAIC,MAAJ,GAAaG,KAAb,CAAmB,WAAnB,EAAgC,QAAhC,EAA0C,YAA1C,EAAwDC,QAAxD,EAFU;AAGxBC,YAAQN,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIxBK,oBAAgBP,cAAIC,MAAJ,GAAaG,KAAb,CAAmB,SAAnB,EAA6B,SAA7B,EAAwC,SAAxC,EAAmD,SAAnD,EAA8D,SAA9D,EAAyEC,QAAzE,EAJQ;AAKxBG,WAAOR,cAAIS,MAAJ,GAAaJ,QAAb,EALiB;AAMxBK,iBAAaV,cAAIC,MAAJ,GAAaI,QAAb,EANW;AAOxBM,gBAAYX,cAAIC,MAAJ,GAAaI,QAAb,EAPY;AAQxBO,gBAAYZ,cAAIC,MAAJ,GAAaC,QAAb;AARY,CAArB;;AAWA,IAAMY,0BAAS;AAClBf,UAAM,EAAEgB,MAAMC,MAAR,EADY;AAElBb,kBAAc,EAAEY,MAAMC,MAAR,EAAgBC,MAAM,CAAC,WAAD,EAAc,QAAd,EAAwB,YAAxB,CAAtB,EAA6DZ,UAAU,IAAvE,EAFI;AAGlBa,cAAU,EAAEH,MAAMC,MAAR,EAAgBX,UAAU,IAA1B,EAHQ;AAIlBC,YAAQ,EAAES,MAAMC,MAAR,EAJU;AAKlBT,oBAAgB,CAAC,EAAEQ,MAAMC,MAAR,EAAgBC,MAAM,CAAC,SAAD,EAAW,SAAX,EAAsB,SAAtB,EAAiC,SAAjC,EAA4C,SAA5C,CAAtB,EAA8EZ,UAAU,IAAxF,EAAD,CALE;AAMlBG,WAAO,EAAEO,MAAMI,MAAR,EAAgBd,UAAU,IAA1B,EAAgCe,SAAS,CAAzC,EANW;AAOlBV,iBAAa,EAACK,MAAMC,MAAP,EAAeX,UAAU,IAAzB,EAPK;AAQlBM,gBAAY,EAAEI,MAAMnB,QAAR,EAAkByB,KAAK,OAAvB,EAAgChB,UAAU,IAA1C,EARM;AASlBO,gBAAY,EAAEG,MAAMnB,QAAR,EAAkByB,KAAK,OAAvB;AATM,CAAf;;AAYP,IAAMC,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAI/B,MAAJ,CAAWoB,MAAX,EAAmBQ,OAAnB,CAAlB;AACAG,UAAUC,GAAV,CAAc,YAAd,EAA4B,cAA5B;;AAEA,IAAMC,eAAehC,mBAASiC,KAAT,CAAe,cAAf,EAA+BH,SAA/B,CAArB;;kBAEeI,Y","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Questionaire primaryKey\n * @property {String} code Questionaire code ObjectId\n * @property {String} questionaire Questionaire questionaire \n * @property {String} answer Questionaire answer\n * @property {String} correct_answer Questionaire correct_answer\n * @property {String} score Questionaire score\n * @property {String} course_name Questionaire course_name\n * @property {ObjectId} created_by Questionaire created_by\n * @property {ObjectId} updated_by Questionaire updated_by \n * @description Questionaire model holds record of all Questionaire\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE } from \"../../../constants\";\nimport Staff from \"../staff/model\";\nimport Student from \"../student/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaCreate = {\n    code: Joi.string().optional(),\n    questionaire: Joi.string().valid(\"OBJECTIVE\", \"THEORY\", \"SUBJECTIVE\").required(),\n    answer: Joi.string().optional(),\n    correct_answer: Joi.string().valid(\"ANSWER1\",\"ANSWER2\", \"ANSWER3\", \"ANSWER4\", \"ANSWER5\").required(),\n    score: Joi.number().required(),\n    course_name: Joi.string().required(),\n    created_by: Joi.string().required(),\n    updated_by: Joi.string().optional(),\n};\n\nexport const schemaUpdate = {\n    code: Joi.string().optional(),\n    questionaire: Joi.string().valid(\"OBJECTIVE\", \"THEORY\", \"SUBJECTIVE\").required(),\n    answer: Joi.string().optional(),\n    correct_answer: Joi.string().valid(\"ANSWER1\",\"ANSWER2\", \"ANSWER3\", \"ANSWER4\", \"ANSWER5\").required(),\n    score: Joi.number().required(),\n    course_name: Joi.string().required(),\n    created_by: Joi.string().required(),\n    updated_by: Joi.string().optional(),\n};\n\nexport const schema = {\n    code: { type: String, },\n    questionaire: { type: String, enum: [\"OBJECTIVE\", \"THEORY\", \"SUBJECTIVE\"], required: true},\n    question: { type: String, required: true },\n    answer: { type: String },\n    correct_answer: [{ type: String, enum: [\"ANSWER1\",\"ANSWER2\", \"ANSWER3\", \"ANSWER4\", \"ANSWER5\"], required: true }],\n    score: { type: Number, required: true, default: 1},\n    course_name: {type: String, required: true},\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"questionaire\");\n\nconst Notification = mongoose.model(\"questionaire\", newSchema);\n\nexport default Questionaire;\n"]}
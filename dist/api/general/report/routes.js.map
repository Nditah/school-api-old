{"version":3,"sources":["../../../../src/api/general/report/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","generateReport","put","updateRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAgBAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,uBAAlD;;AAEA;;;;;;;;;;;;;AAaAN,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDG,0BAAnD;;AAEA;;;;;;;;;;;;;;AAcAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DK,wBAA5D;;kBAEeV,M","file":"routes.js","sourcesContent":["import express from \"express\";\r\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\r\nimport { fetchRecord, generateReport, updateRecord } from \"./controller\";\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @api {get} /api/v1/reports?id={recordId} Retrieve Report records\r\n * @apiName RetrieveReport\r\n * @apiGroup Report\r\n * @apiHeader {String} Authorization Bearer token\r\n  * @apiExample {curl} Example usage for retieving a single record:\r\n *      curl -i api/reports?\r\n * @apiParam {Object} filter query condition (optional)\r\n * @apiParam {Number} skip Number of records to offset by (optional)\r\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\r\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\r\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\r\n * @apiDescription Records  of account headings belonging to one classification\r\n * @apiSuccess {Object[]} Array of Objects of records.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n */\r\nrouter.get(\"/reports\", [checkAuth, isValidStaff], fetchRecord);\r\n\r\n/**\r\n * @api {post} /api/v1/reports Create a Report record\r\n * @apiName CreateReport\r\n * @apiGroup Report\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} name Report name\r\n * @apiParam {String} description Report description\r\n * @apiParam {String} subsidiary Report subsidiary\r\n * @apiSuccess {Object} Report Report's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Report not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.post(\"/reports\", [checkAuth, isValidStaff], generateReport);\r\n\r\n/**\r\n * @api {put} /api/v1/reports/{recordId} Update a Report record\r\n * @apiName UpdateReport\r\n * @apiGroup Report\r\n * @apiHeader {String} Authorization Bearer token\r\n * @apiParam {String} recordId required record ObjectId\r\n * @apiParam {String} name Report name\r\n * @apiParam {String} description Report description\r\n * @apiParam {String} subsidiary Report subsidiary\r\n * @apiSuccess {Object} Report Report's data.\r\n * @apiError {Object} 400 Some parameters may contain invalid values.\r\n * @apiError 404 Report not found.\r\n * @apiError 401 master access only.\r\n */\r\nrouter.put(\"/reports/:recordId\", [checkAuth, isValidStaff], updateRecord);\r\n\r\nexport default router;\r\n"]}
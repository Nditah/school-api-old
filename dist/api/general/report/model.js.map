{"version":3,"sources":["../../../../src/api/general/report/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaGenerate","id","Joi","string","optional","code","from","date","to","terminal","pmtroute","partner","staff","customer","task","office","product","store","sales","purchase","subsidiary","valid","Object","values","SUBSIDIARY","schemaUpdate","type","name","description","updated_by","required","schema","String","enum","created_by","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","set","Report","model","insertMany","table"],"mappings":";;;;;;;AAQA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;;;AACA;;;;;;AAJA;AAVA;;;;;;;;IAgBQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,0CAAiB;AAC1BC,QAAIC,cAAIC,MAAJ,GAAaC,QAAb,EADsB;AAE1BC,UAAMH,cAAIC,MAAJ,GAAaC,QAAb,EAFoB;AAG1BE,UAAMJ,cAAIK,IAAJ,GAAWH,QAAX,EAHoB,EAGG;AAC7BI,QAAIN,cAAIK,IAAJ,GAAWH,QAAX,EAJsB,EAIC;AAC3BK,cAAUP,cAAIC,MAAJ,GAAaC,QAAb,EALgB,EAKS;AACnCM,cAAUR,cAAIC,MAAJ,GAAaC,QAAb,EANgB,EAMS;AACnCO,aAAST,cAAIC,MAAJ,GAAaC,QAAb,EAPiB,EAOQ;AAClCQ,WAAOV,cAAIC,MAAJ,GAAaC,QAAb,EARmB,EAQM;AAChCS,cAAUX,cAAIC,MAAJ,GAAaC,QAAb,EATgB,EASS;AACnCU,UAAMZ,cAAIC,MAAJ,GAAaC,QAAb,EAVoB,EAUK;AAC/BW,YAAQb,cAAIC,MAAJ,GAAaC,QAAb,EAXkB,EAWO;AACjCY,aAASd,cAAIC,MAAJ,GAAaC,QAAb,EAZiB,EAYQ;AAClCa,WAAOf,cAAIC,MAAJ,GAAaC,QAAb,EAbmB,EAaM;AAChCc,WAAOhB,cAAIC,MAAJ,GAAaC,QAAb,EAdmB,EAcM;AAChCe,cAAUjB,cAAIC,MAAJ,GAAaC,QAAb,EAfgB,EAeS;AACnCgB,gBAAYlB,cAAIC,MAAJ,GAAakB,KAAb,CAAmBC,OAAOC,MAAP,CAAcC,qBAAd,CAAnB,EAA8CpB,QAA9C;AAhBc,CAAvB;;AAmBA,IAAMqB,sCAAe;AACxBpB,UAAMH,cAAIC,MAAJ,GAAaC,QAAb,EADkB;AAExBsB,UAAMxB,cAAIC,MAAJ,GAAaC,QAAb,EAFkB;AAGxBuB,UAAMzB,cAAIC,MAAJ,GAAaC,QAAb,EAHkB;AAIxBwB,iBAAa1B,cAAIC,MAAJ,GAAaC,QAAb,EAJW;AAKxByB,gBAAY3B,cAAIC,MAAJ,GAAa2B,QAAb;AALY,CAArB;;AAQA,IAAMC,0BAAS;AAClB1B,UAAM,EAAEqB,MAAMM,MAAR,EADY;AAElBN,UAAM;AACFA,cAAMM,MADJ;AAEFC,cAAM,CAAC,YAAD,EAAe,WAAf,CAFJ;AAGFH,kBAAU;AAHR,KAFY;AAOlBH,UAAM,EAAED,MAAMM,MAAR,EAPY;AAQlBJ,iBAAa,EAAEF,MAAMM,MAAR,EARK;AASlBE,gBAAY,EAAER,MAAM5B,QAAR,EAAkBgC,UAAU,IAA5B,EATM;AAUlBD,gBAAY,EAAEH,MAAM5B,QAAR,EAAkBqC,KAAK,OAAvB;AAVM,CAAf;;AAaP,IAAMC,UAAUC,oBAASC,kBAAT,CAA4BC,OAA5C;AACA,IAAMC,UAAUH,oBAASI,OAAzB;;AAEA,IAAMC,YAAY,IAAI9C,MAAJ,CAAWmC,MAAX,EAAmBS,OAAnB,CAAlB;AACAE,UAAUC,GAAV,CAAc,YAAd,EAA4B,QAA5B;;AAEA,IAAMC,SAAS/C,mBAASgD,KAAT,CAAe,QAAf,EAAyBH,SAAzB,CAAf;;AAEA,IAAIN,OAAJ,EAAa;AAAEQ,WAAOE,UAAP,CAAkBC,eAAlB;AAA2B;;kBAE3BH,M","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {ObjectId} id Report primaryKey\n * @property {String} name Report name\n * @property {String} description Report description\n * @property {String} subsidiary Report subsidiary\n * @description Report holds the model for generating financial reports.\n */\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, SUBSIDIARY } from \"../../../constants\";\nimport table from \"./table\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaGenerate = {\n    id: Joi.string().optional(),\n    code: Joi.string().optional(),\n    from: Joi.date().optional(), // start period\n    to: Joi.date().optional(), // end period\n    terminal: Joi.string().optional(), // ObjectId\n    pmtroute: Joi.string().optional(), // ObjectId\n    partner: Joi.string().optional(), // ObjectId\n    staff: Joi.string().optional(), // ObjectId\n    customer: Joi.string().optional(), // ObjectId\n    task: Joi.string().optional(), // ObjectId\n    office: Joi.string().optional(), // ObjectId\n    product: Joi.string().optional(), // ObjectId\n    store: Joi.string().optional(), // ObjectId\n    sales: Joi.string().optional(), // Sales ObjectId\n    purchase: Joi.string().optional(), // Sales ObjectId\n    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),\n};\n\nexport const schemaUpdate = {\n    code: Joi.string().optional(),\n    type: Joi.string().optional(),\n    name: Joi.string().optional(),\n    description: Joi.string().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    code: { type: String },\n    type: {\n        type: String,\n        enum: [\"management\", \"financial\"],\n        required: true,\n    },\n    name: { type: String },\n    description: { type: String },\n    created_by: { type: ObjectId, required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\nnewSchema.set(\"collection\", \"report\");\n\nconst Report = mongoose.model(\"Report\", newSchema);\n\nif (preload) { Report.insertMany(table); }\n\nexport default Report;\n"]}
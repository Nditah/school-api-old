{"version":3,"sources":["../../../../src/api/general/course/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;AAeAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;;AAmBAN,OAAOO,IAAP,CAAY,UAAZ,EAAwB,CAACH,wBAAD,EAAYC,2BAAZ,CAAxB,EAAmDG,wBAAnD;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,EAAYC,2BAAZ,CAAjC,EAA4DK,wBAA5D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DO,wBAA/D;;kBAEeZ,M","file":"routes.js","sourcesContent":["import express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/v1/courses?id={recordId} Retrieve one or all records\n * @apiName RetrieveCourse\n * @apiGroup Course\n* @apiExample {curl} Example usage for retieving a single record:\n *      curl -i api/courses?\n * @apiParam {Object} filter query condition (optional)\n * @apiParam {Number} skip Number of records to offset by (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} sort how records would be arranged in alphabet (optional)\n * @apiParam {String} projection list of record's attributes to retrieve (optional)\n * @apiDescription Records  of courses in the school\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/courses\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/v1/courses Create courses\n * @apiName CreateCourse\n * @apiGroup Course\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} type Course type (optional)\n * @apiParam {String} title Course title (optional)\n * @apiParam {String} level Course level (optional)\n * @apiParam {String} code Course code (optional)\n * @apiParam {String} coefficient Course coefficient (optional)\n * @apiParam {String} description Course description (optional)\n * @apiParam {String} classe Course classe (optional)\n * @apiParam {String} subject Course subject (optional)\n * @apiParam {String} teacher Course teacher (optional)\n * @apiSuccess {Object} Course Course's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Course not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/courses\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/v1/courses/{recordId} Update courses\n * @apiName UpdateCourse\n * @apiGroup Course\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiParam {String} type Course type (optional)\n * @apiParam {String} title Course title (optional)\n * @apiParam {String} level Course level (optional)\n * @apiParam {String} code Course code (optional)\n * @apiParam {String} coefficient Course coefficient (optional)\n * @apiParam {String} description Course description (optional)\n * @apiParam {String} classe Course classe (optional)\n * @apiParam {String} subject Course subject (optional)\n * @apiParam {String} teacher Course teacher (optional)\n * @apiSuccess {Object} Course Course's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Course not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/courses/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/v1/courses/{recordId} Delete courses\n * @apiName DeleteCourse\n * @apiGroup Course\n * @apiHeader {String} Authorization Bearer token\n * @apiParam {String} recordId required record ObjectId\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Course not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/courses/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}
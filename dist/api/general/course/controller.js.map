{"version":3,"sources":["../../../../src/api/general/course/controller.js"],"names":["req","res","query","filter","skip","limit","sort","projection","searchString","q","$text","$search","Course","find","populate","select","exec","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","error","message","fetchRecord","data","body","password","Joi","validate","schemaCreate","email","phone","findOne","$or","duplicate","newRecord","save","createRecord","id","params","recordId","schemaUpdate","findOneAndUpdate","_id","new","updateRecord","findOneAndRemove","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aqp from \"api-query-params\";\nimport Course, { schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound, hasProp, hash } from \"../../../lib\";\nimport { STATUS_MSG } from \"../../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[course]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/course.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    try {\n        const { filter, skip, limit, sort, projection } = aqp(query);\n        const searchString = filter.q || \"\";\n        if (searchString) {\n            filter.$text = { $search: searchString };\n            delete filter.q;\n        }\n        const result = await Course.find(filter)\n            .populate(\"classe\")\n            .populate(\"subject\")\n            .populate(\"staff\")\n            .skip(skip)\n            .limit(limit)\n            .sort(sort)\n            .select(projection)\n            .exec();\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\n// eslint-disable-next-line complexity\nexport async function createRecord(req, res) {\n    const data = req.body;\n    if (hasProp(data, \"password\")) data.password = hash(req.body.password);\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    const { email, phone } = data;\n    const duplicate = await Course.findOne({ $or: [{ email }, { phone }] }).exec();\n    if (duplicate) {\n        return fail(res, 422, `Error! Record already exist for ${email} or ${phone}`);\n    }\n    const newRecord = new Course(data);\n    try {\n        const result = await newRecord.save();\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    if (hasProp(data, \"password\")) data.password = hash(req.body.password);\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await Course.findOneAndUpdate({ _id: id }, data, { new: true });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const result = await Course.findOneAndRemove({ _id: id });\n        if (!result) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        return success(res, 204, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}
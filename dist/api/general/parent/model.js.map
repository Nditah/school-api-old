{"version":3,"sources":["../../../../src/api/general/parent/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","title","first_name","middle_name","last_name","gender","date_of_birth","date","marital_status","address","state","county","profession","parents_name","employment_status","Object","values","EMPLOYMENT_STATUS","students_name","created_by","schemaUpdate","updated_by","required","schema","String","enum","GENDER","default","MALE","Date","MARITAL_STATUS","lowercase","unique","match","ref","preload","DATABASE","PRELOAD_TABLE_DATA","DEFAULT","options","OPTIONS","newSchema","index","phone_personal","weights","set","plugin","mongoose_csv","Parent","model","createIndexes"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {String} id Parent ObjectId primaryKey\n * @property {String} title Parent title (optional)\n * @property {String} first_name Parent first_name (optional)\n * @property {String} middle_name Parent middle_name (optional)\n * @property {String} last_name Parent first_name (optional)\n * @property {String} gender Parent gender (optional)\n * @property {Date} date_of_birth Parent date_of_birth (optional)\n * @property {String} marital_status Parent marital_status (optional)\n * @property {String} address Parent address (optional)\n * @property {String} state Parent state (optional)\n * @property {String} county Parent county (optional)\n * @property {String} email Parent email (optional)\n * @property {String} phone Parent office phone (optional)\n * @property {String} password Parent password (optional)\n * @property {String} profession Parent profession (optional)\n * @property {String} employment_status Parent employment_status (required)\n * @property {String} students_name Parent students_name (optional)\n * @property {String} created_by Parent record created by\n * @property {String} updated_by Parent record modified by\n * @description Parent holds record of all student's parents in the school\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, GENDER, EMPLOYMENT_STATUS, MARITAL_STATUS } from \"../../../constants\";\n// import table from \"./table\";\nimport Student from \"../student/model\";\nimport State from \"../state/model\";\nimport County from \"../county/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    title: Joi.string().optional(),\n    first_name: Joi.string().trim().optional(),\n    middle_name: Joi.string().trim().optional(),\n    last_name: Joi.string().trim().optional(),\n    gender: Joi.string().optional(),\n    date_of_birth: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    parents_name: Joi.string().trim().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    students_name: Joi.string().trim().optional(),\n    created_by: Joi.string().optional(),\n};\n\nexport const schemaUpdate = {\n    title: Joi.string().optional(),\n    first_name: Joi.string().trim().optional(),\n    middle_name: Joi.string().trim().optional(),\n    last_name: Joi.string().trim().optional(),\n    gender: Joi.string().optional(),\n    date_of_birth: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    parents_name: Joi.string().trim().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    students_name: Joi.string().trim().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    title: { type: String },\n    first_name: { type: String, required: [true, \"Why no firstname?\"] },\n    middle_name: { type: String },\n    last_name: { type: String, required: [true, \"Why no lastname?\"] },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        default: GENDER.MALE,\n        required: [false, \"Why no gender?\"],\n    },\n    date_of_birth: { type: Date, required: [true, \"Date is required\"] },\n    marital_status: {\n        type: String,\n        enum: Object.values(MARITAL_STATUS),\n        required: [false, \"Why no marital_status?\"],\n    },\n    address: { type: String, required: [false, \"Why no Address\"] },\n    state: { type: String, required: [false, \"Why no State?\"] },\n    county: { type: String, required: [false, \"Why no County?\"] },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    phone: {\n        type: String,\n        required: [false, \"Why no phone?\"],\n        unique: true,\n    },\n    password: { type: String, required: [false, \"Why no password\"] },\n    profession: { type: String },\n    employment_status: {\n        type: String,\n        enum: Object.values(EMPLOYMENT_STATUS),\n        required: [false, \"Why no input?\"],\n    },\n    students_name: { type: ObjectId, ref: \"Student\", required: [false, \"Why no Parent's name\"] },\n    created_by: { type: ObjectId, ref: \"Parent\", required: true },\n    updated_by: { type: ObjectId, ref: \"Parent\", required: true },\n};\n\nconst preload = DATABASE.PRELOAD_TABLE_DATA.DEFAULT;\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\n\nnewSchema.index({\n    phone: \"text\",\n    phone_personal: \"text\",\n    email: \"text\",\n    last_name: \"text\",\n    first_name: \"text\",\n},\n{\n    weights: {\n        phone: 5,\n        phone_personal: 5,\n        email: 4,\n        last_name: 3,\n        first_name: 1,\n    },\n});\n\nnewSchema.set(\"collection\", \"parent\");\nnewSchema.plugin(mongoose_csv);\n\nconst Parent = mongoose.model(\"Parent\", newSchema);\nParent.createIndexes();\n\nexport default Parent;\n"]}
{"version":3,"sources":["../../../../src/api/general/parent/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","title","surname","given_name","gender","birth_date","date","marital_status","address","state","county","profession","employment_status","Object","values","EMPLOYMENT_STATUS","students_name","array","created_by","schemaUpdate","updated_by","required","schema","String","enum","GENDER","default","MALE","Date","MARITAL_STATUS","lowercase","unique","match","ref","options","DATABASE","OPTIONS","newSchema","index","phone_personal","last_name","first_name","weights","set","plugin","mongoose_csv","Parent","model","createIndexes"],"mappings":";;;;;;;AAyBA;;;;AACA;;;;AAEA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAJA;;AAHA;AA3BA;AACA;;;;;;;;;;;;;;;;;;;;;;;;IAmCQA,M,GAAWC,kB,CAAXD,M;IACAE,Q,GAAaF,OAAOG,K,CAApBD,Q;AAED,IAAME,oCAAc;AACvBC,WAAOC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBH,KAApB,GAA4BI,QAA5B,EADgB;AAEvBC,WAAOJ,cAAIC,MAAJ,GAAaE,QAAb,EAFgB;AAGvBE,SAAKL,cAAIC,MAAJ,GAAaE,QAAb,EAHkB;AAIvBG,cAAUN,cAAIC,MAAJ,GAAaE,QAAb,EAJa;AAKvBI,UAAMP,cAAIC,MAAJ,GAAaO,KAAb,CAAmB,CAAC,OAAD,EAAU,OAAV,EAAmB,KAAnB,CAAnB,EAA8CL,QAA9C;AALiB,CAApB;;AAQA,IAAMM,sCAAe;AACxBC,WAAOV,cAAIC,MAAJ,GAAaE,QAAb,EADiB;AAExBQ,aAASX,cAAIC,MAAJ,GAAaE,QAAb,EAFe;AAGxBS,gBAAYZ,cAAIC,MAAJ,GAAaE,QAAb,EAHY;AAIxBU,YAAQb,cAAIC,MAAJ,GAAaE,QAAb,EAJgB;AAKxBW,gBAAYd,cAAIe,IAAJ,GAAWZ,QAAX,EALY;AAMxBa,oBAAgBhB,cAAIC,MAAJ,GAAaE,QAAb,EANQ;AAOxBc,aAASjB,cAAIC,MAAJ,GAAaE,QAAb,EAPe;AAQxBe,WAAOlB,cAAIC,MAAJ,GAAaE,QAAb,EARiB;AASxBgB,YAAQnB,cAAIC,MAAJ,GAAaE,QAAb,EATgB;AAUxBJ,WAAOC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBH,KAApB,GAA4BI,QAA5B,EAViB;AAWxBC,WAAOJ,cAAIC,MAAJ,GAAaE,QAAb,EAXiB;AAYxBG,cAAUN,cAAIC,MAAJ,GAAaE,QAAb,EAZc;AAaxBiB,gBAAYpB,cAAIC,MAAJ,GAAaE,QAAb,EAbY;AAcxBkB,uBAAmBrB,cAAIC,MAAJ,GAAaC,IAAb,GAAoBM,KAApB,CAA0Bc,OAAOC,MAAP,CAAcC,4BAAd,CAA1B,EAA4DrB,QAA5D,EAdK;AAexBsB,mBAAezB,cAAI0B,KAAJ,GAAYvB,QAAZ,EAfS;AAgBxBwB,gBAAY3B,cAAIC,MAAJ,GAAaE,QAAb;AAhBY,CAArB;;AAmBA,IAAMyB,sCAAe;AACxBlB,WAAOV,cAAIC,MAAJ,GAAaE,QAAb,EADiB;AAExBQ,aAASX,cAAIC,MAAJ,GAAaE,QAAb,EAFe;AAGxBS,gBAAYZ,cAAIC,MAAJ,GAAaE,QAAb,EAHY;AAIxBU,YAAQb,cAAIC,MAAJ,GAAaE,QAAb,EAJgB;AAKxBW,gBAAYd,cAAIe,IAAJ,GAAWZ,QAAX,EALY;AAMxBa,oBAAgBhB,cAAIC,MAAJ,GAAaE,QAAb,EANQ;AAOxBc,aAASjB,cAAIC,MAAJ,GAAaE,QAAb,EAPe;AAQxBe,WAAOlB,cAAIC,MAAJ,GAAaE,QAAb,EARiB;AASxBgB,YAAQnB,cAAIC,MAAJ,GAAaE,QAAb,EATgB;AAUxBJ,WAAOC,cAAIC,MAAJ,GAAaC,IAAb,GAAoBH,KAApB,GAA4BI,QAA5B,EAViB;AAWxBC,WAAOJ,cAAIC,MAAJ,GAAaE,QAAb,EAXiB;AAYxBG,cAAUN,cAAIC,MAAJ,GAAaE,QAAb,EAZc;AAaxBiB,gBAAYpB,cAAIC,MAAJ,GAAaE,QAAb,EAbY;AAcxBkB,uBAAmBrB,cAAIC,MAAJ,GAAaC,IAAb,GAAoBM,KAApB,CAA0Bc,OAAOC,MAAP,CAAcC,4BAAd,CAA1B,EAA4DrB,QAA5D,EAdK;AAexBsB,mBAAezB,cAAI0B,KAAJ,GAAYvB,QAAZ,EAfS;AAgBxB0B,gBAAY7B,cAAIC,MAAJ,GAAa6B,QAAb;AAhBY,CAArB;;AAmBA,IAAMC,0BAAS;AAClBrB,WAAO,EAAEH,MAAMyB,MAAR,EADW;AAElBrB,aAAS,EAAEJ,MAAMyB,MAAR,EAAgBF,UAAU,CAAC,IAAD,EAAO,iBAAP,CAA1B,EAFS;AAGlBlB,gBAAY,EAAEL,MAAMyB,MAAR,EAAgBF,UAAU,CAAC,IAAD,EAAO,oBAAP,CAA1B,EAHM;AAIlBjB,YAAQ;AACJN,cAAMyB,MADF;AAEJC,cAAMX,OAAOC,MAAP,CAAcW,iBAAd,CAFF;AAGJC,iBAASD,kBAAOE,IAHZ;AAIJN,kBAAU,CAAC,KAAD,EAAQ,gBAAR;AAJN,KAJU;AAUlBhB,gBAAY,EAAEP,MAAM8B,IAAR,EAAcP,UAAU,CAAC,IAAD,EAAO,kBAAP,CAAxB,EAVM;AAWlBd,oBAAgB;AACZT,cAAMyB,MADM;AAEZC,cAAMX,OAAOC,MAAP,CAAce,yBAAd,CAFM;AAGZR,kBAAU,CAAC,KAAD,EAAQ,wBAAR;AAHE,KAXE;AAgBlBb,aAAS,EAAEV,MAAMyB,MAAR,EAAgBF,UAAU,CAAC,KAAD,EAAQ,gBAAR,CAA1B,EAhBS;AAiBlBZ,WAAO,EAAEX,MAAMyB,MAAR,EAAgBF,UAAU,CAAC,KAAD,EAAQ,eAAR,CAA1B,EAjBW;AAkBlBX,YAAQ,EAAEZ,MAAMyB,MAAR,EAAgBF,UAAU,CAAC,KAAD,EAAQ,gBAAR,CAA1B,EAlBU;AAmBlB/B,WAAO;AACHQ,cAAMyB,MADH;AAEH9B,cAAM,IAFH;AAGHqC,mBAAW,IAHR;AAIHC,gBAAQ,IAJL;AAKH;AACAC,eAAO,CAAC,+CAAD,EACH,mCADG;AANJ,KAnBW;AA4BlBrC,WAAO;AACHG,cAAMyB,MADH;AAEHF,kBAAU,CAAC,KAAD,EAAQ,eAAR,CAFP;AAGHU,gBAAQ;AAHL,KA5BW;AAiClBlC,cAAU,EAAEC,MAAMyB,MAAR,EAAgBF,UAAU,CAAC,KAAD,EAAQ,iBAAR,CAA1B,EAjCQ;AAkClBV,gBAAY,EAAEb,MAAMyB,MAAR,EAlCM;AAmClBX,uBAAmB;AACfd,cAAMyB,MADS;AAEfC,cAAMX,OAAOC,MAAP,CAAcC,4BAAd,CAFS;AAGfM,kBAAU,CAAC,KAAD,EAAQ,eAAR;AAHK,KAnCD;AAwClBL,mBAAe,CAAC,EAAElB,MAAMX,QAAR,EAAkB8C,KAAK,SAAvB,EAAkCZ,UAAU,CAAC,KAAD,EAAQ,uBAAR,CAA5C,EAAD,CAxCG;AAyClBH,gBAAY,EAAEpB,MAAMX,QAAR,EAAkB8C,KAAK,OAAvB,EAAgCZ,UAAU,IAA1C,EAzCM;AA0ClBD,gBAAY,EAAEtB,MAAMX,QAAR,EAAkB8C,KAAK,OAAvB,EAAgCZ,UAAU,IAA1C;AA1CM,CAAf;;AA6CP,IAAMa,UAAUC,oBAASC,OAAzB;;AAEA,IAAMC,YAAY,IAAIpD,MAAJ,CAAWqC,MAAX,EAAmBY,OAAnB,CAAlB;;AAEAG,UAAUC,KAAV,CAAgB;AACZ3C,WAAO,MADK;AAEZ4C,oBAAgB,MAFJ;AAGZjD,WAAO,MAHK;AAIZkD,eAAW,MAJC;AAKZC,gBAAY;AALA,CAAhB,EAOA;AACIC,aAAS;AACL/C,eAAO,CADF;AAEL4C,wBAAgB,CAFX;AAGLjD,eAAO,CAHF;AAILkD,mBAAW,CAJN;AAKLC,oBAAY;AALP;AADb,CAPA;;AAiBAJ,UAAUM,GAAV,CAAc,YAAd,EAA4B,QAA5B;AACAN,UAAUO,MAAV,CAAiBC,qBAAjB;;AAEA,IAAMC,SAAS5D,mBAAS6D,KAAT,CAAe,QAAf,EAAyBV,SAAzB,CAAf;AACAS,OAAOE,aAAP;;kBAEeF,M","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\r\n/**\r\n * @author 4Decoder\r\n * @property {ObjectId} id Parent ObjectId primaryKey\r\n * @property {String} title Parent title (optional)\r\n * @property {String} first_name Parent first_name (optional)\r\n * @property {String} middle_name Parent middle_name (optional)\r\n * @property {String} last_name Parent first_name (optional)\r\n * @property {String} gender Parent gender (optional)\r\n * @property {Date} birth_date Parent birth_date (optional)\r\n * @property {String} marital_status Parent marital_status (optional)\r\n * @property {String} address Parent address (optional)\r\n * @property {ObjectId} state Parent state (optional)\r\n * @property {ObjectId} county Parent county (optional)\r\n * @property {String} email Parent email (optional)\r\n * @property {String} phone Parent office phone (optional)\r\n * @property {String} password Parent password (optional)\r\n * @property {String} profession Parent profession (optional)\r\n * @property {String} employment_status Parent employment_status (required)\r\n * @property {ObjectId} students_name Parent students_name Array<ObjectId> (optional)\r\n * @property {String} created_by Parent record created by\r\n * @property {String} updated_by Parent record modified by\r\n * @description Parent holds record of all student's parents in the school\r\n */\r\n\r\nimport Joi from \"joi\";\r\nimport mongoose from \"mongoose\";\r\n// eslint-disable-next-line camelcase\r\nimport mongoose_csv from \"mongoose-csv\";\r\nimport { DATABASE, GENDER, EMPLOYMENT_STATUS, MARITAL_STATUS } from \"../../../constants\";\r\n// import table from \"./table\";\r\nimport Student from \"../student/model\";\r\nimport State from \"../state/model\";\r\nimport County from \"../county/model\";\r\nimport Staff from \"../staff/model\";\r\n\r\nconst { Schema } = mongoose;\r\nconst { ObjectId } = Schema.Types;\r\n\r\nexport const schemaLogin = {\r\n    email: Joi.string().trim().email().optional(),\r\n    phone: Joi.string().optional(),\r\n    otp: Joi.string().optional(),\r\n    password: Joi.string().optional(),\r\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\r\n};\r\n\r\nexport const schemaCreate = {\r\n    title: Joi.string().optional(),\r\n    surname: Joi.string().optional(),\r\n    given_name: Joi.string().optional(),\r\n    gender: Joi.string().optional(),\r\n    birth_date: Joi.date().optional(),\r\n    marital_status: Joi.string().optional(),\r\n    address: Joi.string().optional(),\r\n    state: Joi.string().optional(),\r\n    county: Joi.string().optional(),\r\n    email: Joi.string().trim().email().optional(),\r\n    phone: Joi.string().optional(),\r\n    password: Joi.string().optional(),\r\n    profession: Joi.string().optional(),\r\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\r\n    students_name: Joi.array().optional(),\r\n    created_by: Joi.string().optional(),\r\n};\r\n\r\nexport const schemaUpdate = {\r\n    title: Joi.string().optional(),\r\n    surname: Joi.string().optional(),\r\n    given_name: Joi.string().optional(),\r\n    gender: Joi.string().optional(),\r\n    birth_date: Joi.date().optional(),\r\n    marital_status: Joi.string().optional(),\r\n    address: Joi.string().optional(),\r\n    state: Joi.string().optional(),\r\n    county: Joi.string().optional(),\r\n    email: Joi.string().trim().email().optional(),\r\n    phone: Joi.string().optional(),\r\n    password: Joi.string().optional(),\r\n    profession: Joi.string().optional(),\r\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\r\n    students_name: Joi.array().optional(),\r\n    updated_by: Joi.string().required(),\r\n};\r\n\r\nexport const schema = {\r\n    title: { type: String },\r\n    surname: { type: String, required: [true, \"Why no Surname?\"] },\r\n    given_name: { type: String, required: [true, \"Why no Given name?\"] },\r\n    gender: {\r\n        type: String,\r\n        enum: Object.values(GENDER),\r\n        default: GENDER.MALE,\r\n        required: [false, \"Why no gender?\"],\r\n    },\r\n    birth_date: { type: Date, required: [true, \"Date is required\"] },\r\n    marital_status: {\r\n        type: String,\r\n        enum: Object.values(MARITAL_STATUS),\r\n        required: [false, \"Why no marital_status?\"],\r\n    },\r\n    address: { type: String, required: [false, \"Why no Address\"] },\r\n    state: { type: String, required: [false, \"Why no State?\"] },\r\n    county: { type: String, required: [false, \"Why no County?\"] },\r\n    email: {\r\n        type: String,\r\n        trim: true,\r\n        lowercase: true,\r\n        unique: true,\r\n        // eslint-disable-next-line no-useless-escape\r\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n            \"Please fill a valid email address\"],\r\n    },\r\n    phone: {\r\n        type: String,\r\n        required: [false, \"Why no phone?\"],\r\n        unique: true,\r\n    },\r\n    password: { type: String, required: [false, \"Why no password\"] },\r\n    profession: { type: String },\r\n    employment_status: {\r\n        type: String,\r\n        enum: Object.values(EMPLOYMENT_STATUS),\r\n        required: [false, \"Why no input?\"],\r\n    },\r\n    students_name: [{ type: ObjectId, ref: \"Student\", required: [false, \"Why no Student's name\"] }],\r\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n    updated_by: { type: ObjectId, ref: \"Staff\", required: true },\r\n};\r\n\r\nconst options = DATABASE.OPTIONS;\r\n\r\nconst newSchema = new Schema(schema, options);\r\n\r\nnewSchema.index({\r\n    phone: \"text\",\r\n    phone_personal: \"text\",\r\n    email: \"text\",\r\n    last_name: \"text\",\r\n    first_name: \"text\",\r\n},\r\n{\r\n    weights: {\r\n        phone: 5,\r\n        phone_personal: 5,\r\n        email: 4,\r\n        last_name: 3,\r\n        first_name: 1,\r\n    },\r\n});\r\n\r\nnewSchema.set(\"collection\", \"parent\");\r\nnewSchema.plugin(mongoose_csv);\r\n\r\nconst Parent = mongoose.model(\"Parent\", newSchema);\r\nParent.createIndexes();\r\n\r\nexport default Parent;\r\n"]}
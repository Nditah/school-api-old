{"version":3,"sources":["../../../../src/api/general/parent/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","title","surname","given_name","gender","birth_date","date","marital_status","address","state","county","profession","employment_status","Object","values","EMPLOYMENT_STATUS","students","array","created_by","schemaUpdate","updated_by","required","schema","String","enum","GENDER","default","MALE","Date","MARITAL_STATUS","lowercase","unique","match","ref","deleted","Boolean","deleted_at","options","DATABASE","OPTIONS","newSchema","index","weights","set","plugin","mongoose_csv","Parent","model","createIndexes"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {ObjectId} id Parent ObjectId primaryKey\n * @property {String} title Parent title (optional)\n * @property {String} first_name Parent first_name (optional)\n * @property {String} middle_name Parent middle_name (optional)\n * @property {String} last_name Parent first_name (optional)\n * @property {String} gender Parent gender (optional)\n * @property {Date} birth_date Parent birth_date (optional)\n * @property {String} marital_status Parent marital_status (optional)\n * @property {String} address Parent address (optional)\n * @property {ObjectId} state Parent state (optional)\n * @property {ObjectId} county Parent county (optional)\n * @property {String} email Parent email (optional)\n * @property {String} phone Parent office phone (optional)\n * @property {String} password Parent password (optional)\n * @property {String} profession Parent profession (optional)\n * @property {String} employment_status Parent employment_status (required)\n * @property {ObjectId} students Parent students Array<ObjectId> (optional)\n * @property {String} created_by Parent record created by\n * @property {String} updated_by Parent record modified by\n * @description Parent holds record of all student's parents in the school\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, GENDER, EMPLOYMENT_STATUS, MARITAL_STATUS } from \"../../../constants\";\nimport Student from \"../student/model\";\nimport State from \"../state/model\";\nimport County from \"../county/model\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    students: Joi.array().optional(),\n    created_by: Joi.string().optional(),\n};\n\nexport const schemaUpdate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    students: Joi.array().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    title: { type: String },\n    surname: { type: String, required: [true, \"Why no Surname?\"] },\n    given_name: { type: String, required: [true, \"Why no Given name?\"] },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        default: GENDER.MALE,\n        required: [false, \"Why no gender?\"],\n    },\n    birth_date: { type: Date, required: [true, \"Date is required\"] },\n    marital_status: {\n        type: String,\n        enum: Object.values(MARITAL_STATUS),\n        required: [false, \"Why no marital_status?\"],\n    },\n    address: { type: String, required: [false, \"Why no Address\"] },\n    state: { type: String, required: [false, \"Why no State?\"] },\n    county: { type: String, required: [false, \"Why no County?\"] },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    phone: {\n        type: String,\n        required: [false, \"Why no phone?\"],\n        unique: true,\n    },\n    password: { type: String, required: [false, \"Why no password\"] },\n    profession: { type: String },\n    employment_status: {\n        type: String,\n        enum: Object.values(EMPLOYMENT_STATUS),\n        required: [false, \"Why no input?\"],\n    },\n    students: [{ type: ObjectId, ref: \"Student\" }],\n    deleted: { type: Boolean, default: false, required: true },\n    deleted_at: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\n\nnewSchema.index({\n    phone: \"text\",\n    email: \"text\",\n    surname: \"text\",\n    given_name: \"text\",\n},\n{\n    weights: {\n        phone: 5,\n        email: 4,\n        surname: 3,\n        given_name: 1,\n    },\n});\n\nnewSchema.set(\"collection\", \"parent\");\nnewSchema.plugin(mongoose_csv);\n\nconst Parent = mongoose.model(\"Parent\", newSchema);\nParent.createIndexes();\n\nexport default Parent;\n"]}
{"version":3,"sources":["../../../../src/api/general/parent/model.js"],"names":["Schema","mongoose","ObjectId","Types","schemaLogin","email","Joi","string","trim","optional","phone","otp","password","type","valid","schemaCreate","title","surname","given_name","gender","marital_status","address","state","county","profession","employment_status","Object","values","EMPLOYMENT_STATUS","students","array","created_by","schemaUpdate","updated_by","required","schema","String","enum","GENDER","default","MALE","MARITAL_STATUS","lowercase","unique","match","ref","deleted","Boolean","deleted_at","Date","options","DATABASE","OPTIONS","newSchema","index","weights","set","plugin","mongoose_csv","Parent","model","createIndexes"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint-disable import/no-cycle */\n/**\n * @author 4Decoder\n * @property {ObjectId} id Parent ObjectId primaryKey\n * @property {String} title Parent title (optional)\n * @property {String} first_name Parent first_name (optional)\n * @property {String} middle_name Parent middle_name (optional)\n * @property {String} last_name Parent first_name (optional)\n * @property {String} gender Parent gender (optional)\n * @property {String} marital_status Parent marital_status (optional)\n * @property {String} address Parent address (optional)\n * @property {ObjectId} state Parent state (optional)\n * @property {ObjectId} county Parent county (optional)\n * @property {String} email Parent email (optional)\n * @property {String} phone Parent office phone (optional)\n * @property {String} password Parent password (optional)\n * @property {String} profession Parent profession (optional)\n * @property {String} employment_status Parent employment_status (required)\n * @property {ObjectId} students Parent students Array<ObjectId> (optional)\n * @property {String} created_by Parent record created by\n * @property {String} updated_by Parent record modified by\n * @description Parent holds record of all student's parents in the school\n */\n\nimport Joi from \"joi\";\nimport mongoose from \"mongoose\";\n// eslint-disable-next-line camelcase\nimport mongoose_csv from \"mongoose-csv\";\nimport { DATABASE, GENDER, EMPLOYMENT_STATUS, MARITAL_STATUS } from \"../../../constants\";\nimport Student from \"../student/model\";\nimport State from \"../state/model\";\nimport County from \"../county/model\";\nimport Staff from \"../staff/model\";\n\nconst { Schema } = mongoose;\nconst { ObjectId } = Schema.Types;\n\nexport const schemaLogin = {\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n    type: Joi.string().valid([\"EMAIL\", \"PHONE\", \"OTP\"]).optional(),\n};\n\nexport const schemaCreate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    marital_status: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    students: Joi.array().optional(),\n    created_by: Joi.string().optional(),\n};\n\nexport const schemaUpdate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    given_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    marital_status: Joi.string().optional(),\n    address: Joi.string().optional(),\n    state: Joi.string().optional(),\n    county: Joi.string().optional(),\n    email: Joi.string().trim().email().optional(),\n    phone: Joi.string().optional(),\n    password: Joi.string().optional(),\n    profession: Joi.string().optional(),\n    employment_status: Joi.string().trim().valid(Object.values(EMPLOYMENT_STATUS)).optional(),\n    students: Joi.array().optional(),\n    updated_by: Joi.string().required(),\n};\n\nexport const schema = {\n    title: { type: String },\n    surname: { type: String, required: [true, \"Why no Surname?\"] },\n    given_name: { type: String, required: [true, \"Why no Given name?\"] },\n    gender: {\n        type: String,\n        enum: Object.values(GENDER),\n        default: GENDER.MALE,\n        required: [false, \"Why no gender?\"],\n    },\n    marital_status: {\n        type: String,\n        enum: Object.values(MARITAL_STATUS),\n        required: [false, \"Why no marital_status?\"],\n    },\n    address: { type: String, required: [false, \"Why no Address\"] },\n    state: { type: String, required: [false, \"Why no State?\"] },\n    county: { type: String, required: [false, \"Why no County?\"] },\n    email: {\n        type: String,\n        trim: true,\n        lowercase: true,\n        unique: true,\n        // eslint-disable-next-line no-useless-escape\n        match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n            \"Please fill a valid email address\"],\n    },\n    phone: {\n        type: String,\n        required: [false, \"Why no phone?\"],\n        unique: true,\n    },\n    password: { type: String, required: [false, \"Why no password\"] },\n    profession: { type: String },\n    employment_status: {\n        type: String,\n        enum: Object.values(EMPLOYMENT_STATUS),\n        required: [false, \"Why no input?\"],\n    },\n    students: [{ type: ObjectId, ref: \"Student\" }],\n    deleted: { type: Boolean, default: false, required: true },\n    deleted_at: { type: Date },\n    created_by: { type: ObjectId, ref: \"Staff\", required: true },\n    updated_by: { type: ObjectId, ref: \"Staff\" },\n};\n\nconst options = DATABASE.OPTIONS;\n\nconst newSchema = new Schema(schema, options);\n\nnewSchema.index({\n    phone: \"text\",\n    email: \"text\",\n    surname: \"text\",\n    given_name: \"text\",\n},\n{\n    weights: {\n        phone: 5,\n        email: 4,\n        surname: 3,\n        given_name: 1,\n    },\n});\n\nnewSchema.set(\"collection\", \"parent\");\nnewSchema.plugin(mongoose_csv);\n\nconst Parent = mongoose.model(\"Parent\", newSchema);\nParent.createIndexes();\n\nexport default Parent;\n"]}
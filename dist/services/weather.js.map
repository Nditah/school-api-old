{"version":3,"sources":["../../src/services/weather.js"],"names":["type","city","country","options","method","uri","url","apiKey","headers","headersObj","json","Promise","resolve","reject","body","weatherService","req","res","params","then","status","data","message","catch","error","getWeather","Accept","process","env","OPENWEATHERMAP_APIKEY"],"mappings":";;;;;;;AAWA;;;;;;;uEAMO;AAAA,YAA8BA,IAA9B,uEAAqC,SAArC;AAAA,YAAgDC,IAAhD,uEAAuD,OAAvD;AAAA,YAAgEC,OAAhE,uEAA0E,IAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,+BADH,GACa;AACZC,oCAAQ,KADI;AAEZC,iCAAQC,GAAR,SAAeN,IAAf,WAAyBC,IAAzB,SAAiCC,OAAjC,eAAkDK,MAAlD,kBAFY;AAGZC,qCAASC,UAHG;AAIZC,kCAAM;AAJM,yBADb;AAAA,0DAOI,IAAIC,OAAJ;AAAA,gGAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEE,uDAAM,8BAAGV,OAAH,CAAN;;AAFF;AAELW,oDAFK;;AAGXF,wDAAQE,IAAR;AAHW;AAAA;;AAAA;AAAA;AAAA;;AAKXD;;AALW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAZ;;AAAA;AAAA;AAAA;AAAA,4BAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeE,c;;;;;;wEAiBf,kBAA0BC,GAA1B,EAA+BC,GAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sCAC6BD,IAAIE,MADjC,EACKlB,IADL,eACKA,IADL,EACWC,IADX,eACWA,IADX,EACiBC,OADjB,eACiBA,OADjB;AAEGC,+BAFH,GAEa;AACZC,oCAAQ,KADI;AAEZC,iCAAQC,GAAR,SAAeN,IAAf,WAAyBC,IAAzB,SAAiCC,OAAjC,eAAkDK,MAAlD,kBAFY;AAGZC,qCAASC,UAHG;AAIZC,kCAAM;AAJM,yBAFb;AAAA,0DAQI,8BAAGP,OAAH,EAAYgB,IAAZ,CAAiB,UAACL,IAAD,EAAU;AAC9B,gCAAIA,KAAKM,MAAT,EAAiB,OAAO,kBAAQH,GAAR,EAAa,GAAb,EAAkBH,KAAKO,IAAvB,EAA6BP,KAAKQ,OAAlC,CAAP;AACjB,mCAAO,eAAKL,GAAL,EAAU,GAAV,EAAeH,KAAKQ,OAApB,CAAP;AACH,yBAHM,EAGJC,KAHI,CAGE,UAACC,KAAD,EAAW;AAChB,2CAAKP,GAAL,EAAU,GAAV,mCAA8CO,MAAMF,OAApD;AACH,yBALM,CARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,U;;;;;AAlCtB;;;;AACA;;;;;;AAEA,IAAMnB,MAAM,wCAAZ,C,CAAsD;AACtD,IAAMG,aAAa;AACfiB,YAAQ,kBADO;AAEf,oBAAgB,kBAFD;AAGfhB,UAAM;AAHS,CAAnB;AAKA,IAAMH,SAASoB,QAAQC,GAAR,CAAYC,qBAA3B","file":"weather.js","sourcesContent":["import rp from \"request-promise\";\r\nimport { success, fail } from \"../lib\";\r\n\r\nconst url = \"http://api.openweathermap.org/data/2.5\"; // weather|forecast\r\nconst headersObj = {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\",\r\n    json: true,\r\n};\r\nconst apiKey = process.env.OPENWEATHERMAP_APIKEY;\r\n\r\n/**\r\n * @description Retrieve weather-map infor mation from openweathermap api\r\n * @param {string} type weather|forecast for info type\r\n * @param {string} city the name of the city\r\n * @param {string} country the ISO-2 code for the country\r\n */\r\nexport async function weatherService(type = \"weather\", city = \"Enugu\", country = \"ng\") {\r\n    const options = {\r\n        method: \"GET\",\r\n        uri: `${url}/${type}?q=${city},${country}&APPID=${apiKey}&units=metric`,\r\n        headers: headersObj,\r\n        json: true,\r\n    };\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const body = await rp(options);\r\n            resolve(body);\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n}\r\n\r\nexport async function getWeather(req, res) {\r\n    const { type, city, country } = req.params;\r\n    const options = {\r\n        method: \"GET\",\r\n        uri: `${url}/${type}?q=${city},${country}&APPID=${apiKey}&units=metric`,\r\n        headers: headersObj,\r\n        json: true,\r\n    };\r\n    return rp(options).then((body) => {\r\n        if (body.status) return success(res, 200, body.data, body.message);\r\n        return fail(res, 200, body.message);\r\n    }).catch((error) => {\r\n        fail(res, 500, `Error getting weather data. ${error.message}`);\r\n    });\r\n}\r\n"]}
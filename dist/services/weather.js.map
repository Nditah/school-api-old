{"version":3,"sources":["../../src/services/weather.js"],"names":["rp","success","fail","url","headersObj","Accept","json","apiKey","process","env","OPENWEATHERMAP_APIKEY","weatherService","type","city","country","options","method","uri","headers","Promise","resolve","reject","body","error","getWeather","req","res","params","then","status","data","message","catch"],"mappings":"AAAA,OAAOA,EAAP,MAAe,iBAAf;AACA,SAASC,OAAT,EAAkBC,IAAlB,QAA8B,QAA9B;;AAEA,MAAMC,MAAM,wCAAZ,C,CAAsD;AACtD,MAAMC,aAAa;AACfC,YAAQ,kBADO;AAEf,oBAAgB,kBAFD;AAGfC,UAAM;AAHS,CAAnB;AAKA,MAAMC,SAASC,QAAQC,GAAR,CAAYC,qBAA3B;;AAEA;;;;;;AAMA,OAAO,eAAeC,cAAf,CAA8BC,OAAO,SAArC,EAAgDC,OAAO,OAAvD,EAAgEC,UAAU,IAA1E,EAAgF;AACnF,UAAMC,UAAU;AACZC,gBAAQ,KADI;AAEZC,aAAM,GAAEd,GAAI,IAAGS,IAAK,MAAKC,IAAK,IAAGC,OAAQ,UAASP,MAAO,eAF7C;AAGZW,iBAASd,UAHG;AAIZE,cAAM;AAJM,KAAhB;AAMA,WAAO,IAAIa,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,YAAI;AACA,kBAAMC,OAAO,MAAMtB,GAAGe,OAAH,CAAnB;AACAK,oBAAQE,IAAR;AACH,SAHD,CAGE,OAAOC,KAAP,EAAc;AACZF,mBAAOE,KAAP;AACH;AACJ,KAPM,CAAP;AAQH;;AAED,OAAO,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoC;AACvC,UAAM,EAAEd,IAAF,EAAQC,IAAR,EAAcC,OAAd,KAA0BW,IAAIE,MAApC;AACA,UAAMZ,UAAU;AACZC,gBAAQ,KADI;AAEZC,aAAM,GAAEd,GAAI,IAAGS,IAAK,MAAKC,IAAK,IAAGC,OAAQ,UAASP,MAAO,eAF7C;AAGZW,iBAASd,UAHG;AAIZE,cAAM;AAJM,KAAhB;AAMA,WAAON,GAAGe,OAAH,EAAYa,IAAZ,CAAkBN,IAAD,IAAU;AAC9B,YAAIA,KAAKO,MAAT,EAAiB,OAAO5B,QAAQyB,GAAR,EAAa,GAAb,EAAkBJ,KAAKQ,IAAvB,EAA6BR,KAAKS,OAAlC,CAAP;AACjB,eAAO7B,KAAKwB,GAAL,EAAU,GAAV,EAAeJ,KAAKS,OAApB,CAAP;AACH,KAHM,EAGJC,KAHI,CAGGT,KAAD,IAAW;AAChBrB,aAAKwB,GAAL,EAAU,GAAV,EAAgB,+BAA8BH,MAAMQ,OAAQ,EAA5D;AACH,KALM,CAAP;AAMH","file":"weather.js","sourcesContent":["import rp from \"request-promise\";\nimport { success, fail } from \"../lib\";\n\nconst url = \"http://api.openweathermap.org/data/2.5\"; // weather|forecast\nconst headersObj = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n    json: true,\n};\nconst apiKey = process.env.OPENWEATHERMAP_APIKEY;\n\n/**\n * @description Retrieve weather-map infor mation from openweathermap api\n * @param {string} type weather|forecast for info type\n * @param {string} city the name of the city\n * @param {string} country the ISO-2 code for the country\n */\nexport async function weatherService(type = \"weather\", city = \"Enugu\", country = \"ng\") {\n    const options = {\n        method: \"GET\",\n        uri: `${url}/${type}?q=${city},${country}&APPID=${apiKey}&units=metric`,\n        headers: headersObj,\n        json: true,\n    };\n    return new Promise(async (resolve, reject) => {\n        try {\n            const body = await rp(options);\n            resolve(body);\n        } catch (error) {\n            reject(error);\n        }\n    });\n}\n\nexport async function getWeather(req, res) {\n    const { type, city, country } = req.params;\n    const options = {\n        method: \"GET\",\n        uri: `${url}/${type}?q=${city},${country}&APPID=${apiKey}&units=metric`,\n        headers: headersObj,\n        json: true,\n    };\n    return rp(options).then((body) => {\n        if (body.status) return success(res, 200, body.data, body.message);\n        return fail(res, 200, body.message);\n    }).catch((error) => {\n        fail(res, 500, `Error getting weather data. ${error.message}`);\n    });\n}\n"]}
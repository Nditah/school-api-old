{"version":3,"sources":["../../src/services/authenticate.js"],"names":["loginPayload","email","phone","otp","password","type","user","token","filter","Staff","findOne","populate","exec","Error","otp_access","bcryptjs","compareSync","query","_id","update","findOneAndUpdate","new","payload","id","userType","terminal","terminal_id","role","time","Date","jwt","sign","JWT","jwtSecret","expiresIn","message","staffAuthenticate","staffAuthenticate2Old","$or","then","vehicle_id"],"mappings":"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","file":"authenticate.js","sourcesContent":["import bcryptjs from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport Staff from \"../api/general/staff/model\";\nimport { JWT } from \"../constants\";\n\nexport function staffAuthenticate2Old(loginPayload) {\n    // return next();\n    const { email, phone, otp, password, type } = loginPayload;\n    return Staff.findOne({ $or: [{ email }, { phone }] })\n        // eslint-disable-next-line complexity\n        .then((user) => {\n            if (!user) { throw new Error(\"Authentication failed. User not found.\"); }\n            if (otp && phone) {\n                if (!user.otp_access) {\n                    throw new Error(`Authentication failed. OTP Access is ${user.otp_access}`);\n                }\n            }\n            if (!(bcryptjs.compareSync(password || \"\", user.password)\n            || bcryptjs.compareSync(otp || \"\", user.otp))) {\n                throw new Error(\"Authentication failed. Wrong password or otp.\");\n            }\n\n            const query = { _id: user._id };\n            const update = { otp_access: false };\n            Staff.findOneAndUpdate(query, update, { new: true }).exec();\n            // Delete private attributes\n            delete user.password;\n            delete user.otp;\n            const payload = {\n                id: user.id,\n                userType: \"staff\",\n                terminal_id: user.terminal_id,\n                role: user.role,\n                vehicle_id: user.vehicle_id,\n                email,\n                phone,\n                time: new Date(),\n            };\n\n            const token = jwt.sign(payload, JWT.jwtSecret, {\n                expiresIn: \"240h\", // JWT.tokenExpireTime,\n            });\n            return { token, user };\n        });\n}\n\n// eslint-disable-next-line complexity\nexport async function staffAuthenticate(loginPayload) {\n    // return next();\n    const { email, phone, otp, password, type } = loginPayload;\n    let user;\n    let token;\n    try {\n        const filter = {};\n        if (phone) {\n            filter.phone = phone;\n        } else {\n            filter.email = email;\n        }\n        user = await Staff\n            .findOne(filter)\n            .populate(\"terminal_id\")\n            .populate(\"role\")\n            .populate(\"bank_id\")\n            .populate(\"vehicle_id\")\n            .populate(\"asset_request_assigment_ids\")\n            .populate(\"rating_ids\")\n            .populate(\"state_id\")\n            .populate(\"county_id\")\n            .exec();\n\n        if (!user) {\n            throw new Error(\"User not found.\");\n        }\n        if (otp && phone) {\n            if (!user.otp_access) {\n                throw new Error(`Authentication failed. OTP Access is ${user.otp_access}`);\n            }\n        }\n        if (!(bcryptjs.compareSync(password || \"\", user.password)\n        || (bcryptjs.compareSync(otp || \"\", user.otp) && user.otp_access))) {\n            throw new Error(\"Wrong password or otp credentials.\");\n        }\n        const query = { _id: user._id };\n        const update = { otp_access: false };\n        await Staff.findOneAndUpdate(query, update, { new: true }).exec();\n\n        // Delete private attributes\n        user.password = null;\n        user.otp = null;\n        delete user.password;\n        delete user.otp;\n        const payload = {\n            id: user.id,\n            userType: \"staff\",\n            terminal: user.terminal_id,\n            role: user.role,\n            email,\n            phone,\n            time: new Date(),\n        };\n\n        token = jwt.sign(payload, JWT.jwtSecret, {\n            expiresIn: \"240h\", // JWT.tokenExpireTime,\n        });\n    } catch (err) {\n        throw new Error(`Authentication failed ${err.message}`);\n    }\n    return { token, user };\n}\n\n"]}
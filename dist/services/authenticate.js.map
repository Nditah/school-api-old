{"version":3,"sources":["../../src/services/authenticate.js"],"names":["bcryptjs","jwt","Staff","JWT","staffAuthenticate2Old","loginPayload","email","phone","otp","password","type","findOne","$or","then","user","Error","otp_access","compareSync","query","_id","update","findOneAndUpdate","new","exec","payload","id","userType","terminal_id","role","vehicle_id","time","Date","token","sign","jwtSecret","expiresIn","staffAuthenticate","filter","populate","terminal","err","message"],"mappings":"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","file":"authenticate.js","sourcesContent":["import bcryptjs from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport Staff from \"../api/general/staff/model\";\nimport { JWT } from \"../constants\";\n\nexport function staffAuthenticate2Old(loginPayload) {\n    // return next();\n    const { email, phone, otp, password, type } = loginPayload;\n    return Staff.findOne({ $or: [{ email }, { phone }] })\n        // eslint-disable-next-line complexity\n        .then((user) => {\n            if (!user) { throw new Error(\"Authentication failed. User not found.\"); }\n            if (otp && phone) {\n                if (!user.otp_access) {\n                    throw new Error(`Authentication failed. OTP Access is ${user.otp_access}`);\n                }\n            }\n            if (!(bcryptjs.compareSync(password || \"\", user.password)\n            || bcryptjs.compareSync(otp || \"\", user.otp))) {\n                throw new Error(\"Authentication failed. Wrong password or otp.\");\n            }\n\n            const query = { _id: user._id };\n            const update = { otp_access: false };\n            Staff.findOneAndUpdate(query, update, { new: true }).exec();\n            // Delete private attributes\n            delete user.password;\n            delete user.otp;\n            const payload = {\n                id: user.id,\n                userType: \"staff\",\n                terminal_id: user.terminal_id,\n                role: user.role,\n                vehicle_id: user.vehicle_id,\n                email,\n                phone,\n                time: new Date(),\n            };\n\n            const token = jwt.sign(payload, JWT.jwtSecret, {\n                expiresIn: \"240h\", // JWT.tokenExpireTime,\n            });\n            return { token, user };\n        });\n}\n\n// eslint-disable-next-line complexity\nexport async function staffAuthenticate(loginPayload) {\n    // return next();\n    const { email, phone, otp, password, type } = loginPayload;\n    let user;\n    let token;\n    try {\n        const filter = {};\n        if (phone) {\n            filter.phone = phone;\n        } else {\n            filter.email = email;\n        }\n        user = await Staff\n            .findOne(filter)\n            .populate(\"terminal_id\")\n            .populate(\"role\")\n            .populate(\"bank_id\")\n            .populate(\"vehicle_id\")\n            .populate(\"asset_request_assigment_ids\")\n            .populate(\"rating_ids\")\n            .populate(\"state_id\")\n            .populate(\"county_id\")\n            .exec();\n\n        if (!user) {\n            throw new Error(\"User not found.\");\n        }\n        if (otp && phone) {\n            if (!user.otp_access) {\n                throw new Error(`Authentication failed. OTP Access is ${user.otp_access}`);\n            }\n        }\n        if (!(bcryptjs.compareSync(password || \"\", user.password)\n        || (bcryptjs.compareSync(otp || \"\", user.otp) && user.otp_access))) {\n            throw new Error(\"Wrong password or otp credentials.\");\n        }\n        const query = { _id: user._id };\n        const update = { otp_access: false };\n        await Staff.findOneAndUpdate(query, update, { new: true }).exec();\n\n        // Delete private attributes\n        user.password = null;\n        user.otp = null;\n        delete user.password;\n        delete user.otp;\n        const payload = {\n            id: user.id,\n            userType: \"staff\",\n            terminal: user.terminal_id,\n            role: user.role,\n            email,\n            phone,\n            time: new Date(),\n        };\n\n        token = jwt.sign(payload, JWT.jwtSecret, {\n            expiresIn: \"240h\", // JWT.tokenExpireTime,\n        });\n    } catch (err) {\n        throw new Error(`Authentication failed ${err.message}`);\n    }\n    return { token, user };\n}\n\n"]}
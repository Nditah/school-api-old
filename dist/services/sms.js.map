{"version":3,"sources":["../../src/services/sms.js"],"names":["recipient","message","data","from","formatPhone","sender","body","to","client","messages","create","result","sendSmsAsync","req","res","twiml","toString","send","receiveSms","dotenv","require","SMS","config","smsApi","process","env","SMS_API","PEACE_SMS_SENDER","phone","str","trim","length","slice","sendSms","then","console","log","sid","readMultipleSms","each"],"mappings":";;;;;;;uEAgCA,iBAA4BA,SAA5B,EAAuCC,OAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,4BADV,GACiB;AACTC,kCAAMC,YAAYC,MAAZ,CADG;AAETC,kCAAML,OAFG;AAGTM,gCAAIH,YAAYJ,SAAZ;AAHK,yBADjB;AAAA;AAMmB,+BAAMQ,OAAOC,QAAP,CAAgBC,MAAhB,CAAuBR,IAAvB,CAAN;;AANnB;AAMUS,8BANV;AAAA,yDAOWA,MAPX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Y;;;;;AAUf;;;;;;;wEAIA,kBAA0BC,GAA1B,EAA+BC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,6BADV,GACkB,EADlB,EACsB;;AAClBA,8BAAMd,OAAN,CAAc,0BAAd;AACMA,+BAHV,GAGoBc,MAAMC,QAAN,EAHpB;;AAIIF,4BAAIG,IAAJ,CAAShB,OAAT;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeiB,U;;;;;AAOf;;;;;AArDA,IAAMC,SAASC,QAAQ,QAAR,CAAf;;eACgBA,QAAQ,cAAR,C;IAARC,G,YAAAA,G;;AAERF,OAAOG,MAAP;;AAEA,IAAMC,SAASC,QAAQC,GAAR,CAAYC,OAA3B;AACA,IAAMlB,SAAS,IAAf;AACA;AACA,IAAMH,SAASgB,IAAIM,gBAAnB;;AAEA,SAASvB,WAAT,CAAqBwB,KAArB,EAA4B;AACxB,QAAIC,MAAMD,MAAMZ,QAAN,EAAV;AACAa,UAAMA,IAAIC,IAAJ,EAAN;AACA,QAAID,IAAIE,MAAJ,KAAe,EAAf,IAAqBF,IAAK,CAAL,MAAa,GAAtC,EAA2C;AACvCA,uBAAaA,IAAIG,KAAJ,CAAU,CAAV,CAAb;AACH;AACD,QAAIH,IAAIE,MAAJ,KAAe,EAAnB,EAAuB;AACnBF,uBAAaA,GAAb;AACH;AACD,WAAOA,GAAP;AACH;;AAED,SAASI,OAAT,CAAiBjC,SAAjB,EAA4BC,OAA5B,EAAqC;AACjC,QAAMC,OAAO;AACTC,cAAMC,YAAYC,MAAZ,CADG;AAETC,cAAML,OAFG;AAGTM,YAAIH,YAAYJ,SAAZ;AAHK,KAAb;AAKAQ,WAAOC,QAAP,CAAgBC,MAAhB,CAAuBR,IAAvB,EACKgC,IADL,CACU;AAAA,eAAUC,QAAQC,GAAR,CAAYzB,OAAO0B,GAAnB,CAAV;AAAA,KADV;AAEH;;AAwBD,SAASC,eAAT,GAA2B;AACvB9B,WAAOC,QAAP,CAAgB8B,IAAhB,CAAqB;AAAA,eAAYJ,QAAQC,GAAR,CAAY3B,SAAS4B,GAArB,CAAZ;AAAA,KAArB;AACH;;QAEQJ,O,GAAAA,O;QAASrB,Y,GAAAA,Y;QAAcM,U,GAAAA,U;QAAYoB,e,GAAAA,e","file":"sms.js","sourcesContent":["const dotenv = require(\"dotenv\");\nconst { SMS } = require(\"../constants\");\n\ndotenv.config();\n\nconst smsApi = process.env.SMS_API;\nconst client = null;\n// eslint-disable-next-line new-cap\nconst sender = SMS.PEACE_SMS_SENDER;\n\nfunction formatPhone(phone) {\n    let str = phone.toString();\n    str = str.trim();\n    if (str.length === 11 && str[ 0 ] === \"0\") {\n        str = `+234${str.slice(1)}`;\n    }\n    if (str.length === 10) {\n        str = `+234${str}`;\n    }\n    return str;\n}\n\nfunction sendSms(recipient, message) {\n    const data = {\n        from: formatPhone(sender),\n        body: message,\n        to: formatPhone(recipient),\n    };\n    client.messages.create(data)\n        .then(result => console.log(result.sid));\n}\n\nasync function sendSmsAsync(recipient, message) {\n    const data = {\n        from: formatPhone(sender),\n        body: message,\n        to: formatPhone(recipient),\n    };\n    const result = await client.messages.create(data);\n    return result;\n}\n\n/**\n * Twilio Webhook for receiving sms\n * Receive message via this webhook set at the twilio user settings\n */\nasync function receiveSms(req, res) {\n    const twiml = \"\"; // new twilio.TwimlResponse();\n    twiml.message(\"Twilio incoming message:\");\n    const message = twiml.toString();\n    res.send(message);\n}\n\n// Read Multiple SMS Records\nfunction readMultipleSms() {\n    client.messages.each(messages => console.log(messages.sid));\n}\n\nexport { sendSms, sendSmsAsync, receiveSms, readMultipleSms };\n"]}
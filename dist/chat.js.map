{"version":3,"sources":["../src/chat.js"],"names":["dotenv","config","app","server","http","createServer","io","require","hostname","port","process","env","PORT","chatPort","PORT_CHAT","defaultPath","path","join","__dirname","use","bodyParser","urlencoded","extended","limit","json","express","static","database","on","console","error","bind","once","log","get","req","res","render","next","locals","userId","userType","role","peacegroupApi","pmtApi","pmlApi","Error","status","success","payload","message","listen","socket","data","broadcast","emit","user","msg","chatMessage","Chat","sender","save","id","err"],"mappings":"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","file":"chat.js","sourcesContent":["import \"babel-polyfill\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport morgan from \"morgan\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\n\nimport compression from \"compression\";\nimport path from \"path\";\nimport helmet from \"helmet\";\n\nimport http from \"http\";\n\n// import routes\nimport Chat from \"./api/general/chat/model\";\nimport { peacegroupApi, pmtApi, pmlApi } from \"./api\";\nimport database from \"./config\";\n\ndotenv.config();\nconst app = express();\nconst server = http.createServer(app);\nconst io = require(\"socket.io\")(server);\n\nconst hostname = \"0.0.0.0\"; // \"localhost\";\nconst port = process.env.PORT || 5000;\nconst chatPort = process.env.PORT_CHAT || 7000;\nconst defaultPath = path.join(__dirname, \"/public\");\n\napp.use(helmet());\napp.use(bodyParser.urlencoded({ extended: true, limit: \"50mb\" }));\napp.use(bodyParser.json({ limit: \"50mb\" }));\napp.use(morgan(\"dev\"));\napp.use(cors());\napp.use(compression());\napp.use(express.static(defaultPath));\n\ndatabase.on(\"error\", console.error.bind(console, \"Connection error:\"));\ndatabase.once(\"open\", () => {\n    console.log(\"Successfully connected to the database!\");\n});\n\napp.get(\"/\", (req, res) => {\n    console.log(\"defaultPath \", defaultPath);\n    res.render(`${defaultPath}/index.html`);\n});\n\napp.get(\"/chat\", (req, res) => {\n    console.log(`${defaultPath}/index.html`);\n    res.render(`${defaultPath}/index.html`);\n});\n\n// modify request object\napp.use((req, res, next) => {\n    res.locals.userId = 0.0;\n    res.locals.userType = \"anonymous\";\n    res.locals.role = \"\";\n    next();\n});\n\n// Use Routes\napp.use(\"/api\", peacegroupApi);\napp.use(\"/api\", pmtApi);\napp.use(\"/api\", pmlApi);\n\napp.use((req, res, next) => {\n    const error = new Error(\"Not found!\");\n    error.status = 404;\n    next(error);\n});\n\napp.use((error, req, res, next) => {\n    res.status(error.status || 500);\n    res.json({\n        success: false,\n        payload: null,\n        message: `SCHOOL API says ${error.message}`,\n    });\n    next();\n});\n\n// listen for requests\napp.listen(port, hostname, () => {\n    console.log(`Server running at http://${hostname}:${port}/`);\n});\n\n// setup event listener\nio.on(\"connection\", (socket) => {\n    console.log(\"user connected\");\n\n    socket.on(\"disconnect\", () => {\n        console.log(\"user disconnected\");\n    });\n\n    // Someone is typing\n    socket.on(\"typing\", (data) => {\n        socket.broadcast.emit(\"notifyTyping\", {\n            user: data.user,\n            message: data.message,\n        });\n    });\n\n    // when soemone stops typing\n    socket.on(\"stopTyping\", () => {\n        socket.broadcast.emit(\"notifyStopTyping\");\n    });\n\n    socket.on(\"chat message\", (msg) => {\n        console.log(`message: ${msg}`);\n\n        // broadcast message to everyone in port:5000 except yourself.\n        socket.broadcast.emit(\"received\", { message: msg });\n\n        // save chat to the database\n        const chatMessage = new Chat({ message: msg, sender: \"Anonymous\" });\n        chatMessage.save();\n\n        socket.on(\"disconnect\", () => {\n            console.log(\"client disconnect...\", socket.id);\n            // handleDisconnect();\n        });\n\n        socket.on(\"error\", (err) => {\n            console.log(\"received error from client:\", socket.id);\n            console.log(err);\n        });\n    });\n});\n\nserver.listen(chatPort, () => {\n    console.log(`ChatApp listens on port ${chatPort}`);\n});\n\nexport default app;\n"]}
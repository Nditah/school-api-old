{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","app","hostname","port","process","env","PORT","defaultPath","path","join","__dirname","use","bodyParser","urlencoded","extended","limit","json","express","static","database","on","console","error","bind","once","log","get","req","res","render","next","locals","userId","userType","role","schoolApi","flutterwaveApi","Error","status","success","payload","message","listen"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAGA;;AACA;;;;;;AAFA;AAIAA,iBAAOC,MAAP;AACA,IAAMC,MAAM,wBAAZ;;AAEA,IAAMC,WAAW,SAAjB,C,CAA4B;AAC5B,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACA,IAAMC,cAAcC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAApB;;AAEAT,IAAIU,GAAJ,CAAQ,uBAAR;AACAV,IAAIU,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAkBC,OAAO,MAAzB,EAAtB,CAAR;AACAd,IAAIU,GAAJ,CAAQC,qBAAWI,IAAX,CAAgB,EAAED,OAAO,MAAT,EAAhB,CAAR;AACAd,IAAIU,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAV,IAAIU,GAAJ,CAAQ,qBAAR;AACAV,IAAIU,GAAJ,CAAQ,4BAAR;AACAV,IAAIU,GAAJ,CAAQM,kBAAQC,MAAR,CAAeX,WAAf,CAAR;;AAEAY,iBAASC,EAAT,CAAY,OAAZ,EAAqBC,QAAQC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,mBAA5B,CAArB;AACAF,iBAASK,IAAT,CAAc,MAAd,EAAsB,YAAM;AACxBH,YAAQI,GAAR,CAAY,yCAAZ;AACH,CAFD;;AAIAxB,IAAIyB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBP,YAAQI,GAAR,CAAY,cAAZ,EAA4BlB,WAA5B;AACAqB,QAAIC,MAAJ,CAActB,WAAd;AACH,CAHD;;AAKAN,IAAIyB,GAAJ,CAAQ,OAAR,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3BP,YAAQI,GAAR,CAAelB,WAAf;AACAqB,QAAIC,MAAJ,CAActB,WAAd;AACH,CAHD;;AAKA;AACAN,IAAIU,GAAJ,CAAQ,UAACgB,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;AACxBF,QAAIG,MAAJ,CAAWC,MAAX,GAAoB,GAApB;AACAJ,QAAIG,MAAJ,CAAWE,QAAX,GAAsB,WAAtB;AACAL,QAAIG,MAAJ,CAAWG,IAAX,GAAkB,EAAlB;AACAJ;AACH,CALD;;AAOA;AACA7B,IAAIU,GAAJ,CAAQ,SAAR,EAAmBwB,cAAnB;AACAlC,IAAIU,GAAJ,CAAQ,SAAR,EAAmByB,mBAAnB;;AAEAnC,IAAIU,GAAJ,CAAQ,UAACgB,GAAD,EAAMC,GAAN,EAAWE,IAAX,EAAoB;AACxB,QAAMR,QAAQ,IAAIe,KAAJ,CAAU,YAAV,CAAd;AACAf,UAAMgB,MAAN,GAAe,GAAf;AACAR,SAAKR,KAAL;AACH,CAJD;;AAMArB,IAAIU,GAAJ,CAAQ,UAACW,KAAD,EAAQK,GAAR,EAAaC,GAAb,EAAkBE,IAAlB,EAA2B;AAC/BF,QAAIU,MAAJ,CAAWhB,MAAMgB,MAAN,IAAgB,GAA3B;AACAV,QAAIZ,IAAJ,CAAS;AACLuB,iBAAS,KADJ;AAELC,iBAAS,IAFJ;AAGLC,sCAA4BnB,MAAMmB;AAH7B,KAAT;AAKAX;AACH,CARD;;AAUA;AACA7B,IAAIyC,MAAJ,CAAWvC,IAAX,EAAiBD,QAAjB,EAA2B,YAAM;AAC7BmB,YAAQI,GAAR,+BAAwCvB,QAAxC,SAAoDC,IAApD;AACH,CAFD;;kBAIeF,G","file":"app.js","sourcesContent":["import \"babel-polyfill\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport morgan from \"morgan\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\n\nimport compression from \"compression\";\nimport path from \"path\";\nimport helmet from \"helmet\";\n\n// import routes\nimport { schoolApi, flutterwaveApi } from \"./api\";\nimport database from \"./config\";\n\ndotenv.config();\nconst app = express();\n\nconst hostname = \"0.0.0.0\"; // \"localhost\";\nconst port = process.env.PORT || 5000;\nconst defaultPath = path.join(__dirname, \"/public\");\n\napp.use(helmet());\napp.use(bodyParser.urlencoded({ extended: true, limit: \"50mb\" }));\napp.use(bodyParser.json({ limit: \"50mb\" }));\napp.use(morgan(\"dev\"));\napp.use(cors());\napp.use(compression());\napp.use(express.static(defaultPath));\n\ndatabase.on(\"error\", console.error.bind(console, \"Connection error:\"));\ndatabase.once(\"open\", () => {\n    console.log(\"Successfully connected to the database!\");\n});\n\napp.get(\"/\", (req, res) => {\n    console.log(\"defaultPath \", defaultPath);\n    res.render(`${defaultPath}/index.html`);\n});\n\napp.get(\"/chat\", (req, res) => {\n    console.log(`${defaultPath}/index.html`);\n    res.render(`${defaultPath}/index.html`);\n});\n\n// modify request object\napp.use((req, res, next) => {\n    res.locals.userId = 0.0;\n    res.locals.userType = \"anonymous\";\n    res.locals.role = \"\";\n    next();\n});\n\n// Use Routes\napp.use(\"/api/v1\", schoolApi);\napp.use(\"/api/v1\", flutterwaveApi);\n\napp.use((req, res, next) => {\n    const error = new Error(\"Not found!\");\n    error.status = 404;\n    next(error);\n});\n\napp.use((error, req, res, next) => {\n    res.status(error.status || 500);\n    res.json({\n        success: false,\n        payload: null,\n        message: `SCHOOL API says ${error.message}`,\n    });\n    next();\n});\n\n// listen for requests\napp.listen(port, hostname, () => {\n    console.log(`Server running at http://${hostname}:${port}/`);\n});\n\nexport default app;\n"]}
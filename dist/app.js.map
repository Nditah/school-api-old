{"version":3,"sources":["../src/app.js"],"names":["express","bodyParser","morgan","dotenv","cors","compression","path","helmet","schoolApi","flutterwaveApi","database","config","app","hostname","port","process","env","PORT","defaultPath","join","__dirname","use","urlencoded","extended","limit","json","static","on","console","error","bind","once","log","get","req","res","render","next","locals","userId","userType","role","Error","status","success","payload","message","listen"],"mappings":"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","file":"app.js","sourcesContent":["import \"babel-polyfill\";\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport morgan from \"morgan\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\n\nimport compression from \"compression\";\nimport path from \"path\";\nimport helmet from \"helmet\";\n\n// import routes\nimport { schoolApi, flutterwaveApi } from \"./api\";\nimport database from \"./config\";\n\ndotenv.config();\nconst app = express();\n\nconst hostname = \"0.0.0.0\"; // \"localhost\";\nconst port = process.env.PORT || 5000;\nconst defaultPath = path.join(__dirname, \"/public\");\n\napp.use(helmet());\napp.use(bodyParser.urlencoded({ extended: true, limit: \"50mb\" }));\napp.use(bodyParser.json({ limit: \"50mb\" }));\napp.use(morgan(\"dev\"));\napp.use(cors());\napp.use(compression());\napp.use(express.static(defaultPath));\n\ndatabase.on(\"error\", console.error.bind(console, \"Connection error:\"));\ndatabase.once(\"open\", () => {\n    console.log(\"Successfully connected to the database!\");\n});\n\napp.get(\"/\", (req, res) => {\n    console.log(\"defaultPath \", defaultPath);\n    res.render(`${defaultPath}/index.html`);\n});\n\napp.get(\"/chat\", (req, res) => {\n    console.log(`${defaultPath}/index.html`);\n    res.render(`${defaultPath}/index.html`);\n});\n\n// modify request object\napp.use((req, res, next) => {\n    res.locals.userId = 0.0;\n    res.locals.userType = \"anonymous\";\n    res.locals.role = \"\";\n    next();\n});\n\n// Use Routes\napp.use(\"/api\", schoolApi);\napp.use(\"/api\", flutterwaveApi);\n\napp.use((req, res, next) => {\n    const error = new Error(\"Not found!\");\n    error.status = 404;\n    next(error);\n});\n\napp.use((error, req, res, next) => {\n    res.status(error.status || 500);\n    res.json({\n        success: false,\n        payload: null,\n        message: `SCHOOL API says ${error.message}`,\n    });\n    next();\n});\n\n// listen for requests\napp.listen(port, hostname, () => {\n    console.log(`Server running at http://${hostname}:${port}/`);\n});\n\nexport default app;\n"]}